{
    "version": "https://jsonfeed.org/version/1",
    "title": "但行好事，莫问前程",
    "subtitle": "",
    "icon": "https://60saint.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://60saint.github.io",
    "items": [
        {
            "id": "https://60saint.github.io/data-structor/%E6%95%B0%E7%BB%84/",
            "url": "https://60saint.github.io/data-structor/%E6%95%B0%E7%BB%84/",
            "title": "数组",
            "date_published": "2024-11-19T11:40:56.580Z",
            "content_html": "<h1 id=\"数组理论基础\"><a class=\"anchor\" href=\"#数组理论基础\">#</a> 数组理论基础</h1>\n<p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong></p>\n<p>数组可以方便的通过下标索引的方式获取到下标对应的数据。</p>\n<p>需要两点注意的是</p>\n<ul>\n<li><strong>数组下标都是从 0 开始的。</strong></li>\n<li><strong>数组内存空间的地址是连续的</strong></li>\n</ul>\n<p>正是<strong>因为数组在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p>\n<p>例如删除下标为 3 的元素，需要对下标为 3 的元素后面的所有元素都要做移动操作</p>\n<p><img data-src=\"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png\" alt=\"算法通关数组1\" /></p>\n<p>如果使用 C++ 的话，要注意 vector 和 array 的区别，vector 的底层实现是 array，严格来讲 vector 是容器，不是数组。</p>\n<p><strong>数组的元素是不能删的，只能覆盖。</strong></p>\n<p><img data-src=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20240606105522.png\" alt=\"img\" /></p>\n<p>不同编程语言的内存管理是不一样的，以 C<ins> 为例，在 C</ins> 中二维数组在内存的空间地址是连续分布的。</p>\n",
            "tags": [
                "数据结构和算法",
                "数组"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E3%80%8AC++-Primer-Plus%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/",
            "url": "https://60saint.github.io/cpp/%E3%80%8AC++-Primer-Plus%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/",
            "title": "《C++ Primer Plus》阅读笔记",
            "date_published": "2024-11-17T03:18:10.695Z",
            "content_html": "<h1 id=\"第1章-预备知识\"><a class=\"anchor\" href=\"#第1章-预备知识\">#</a> 第 1 章 预备知识</h1>\n<p>C<ins> 在 C 语言的基础上添加了对面向对象编程和泛型编程的支持。 C</ins> 继承了 C 语言高效、 简洁、 快速和 &lt;u&gt; 可移植性 &lt;/u &gt; 的传统。 C<ins> 面向对象的特性带来了全新的编程方法，这种方法是为应付复杂程度不断提高的现代编程任务而设计的。 C</ins> 的模板特性提供了另一种全新的编程方法 —— 泛型编程。</p>\n<blockquote>\n<p>在计算机科学中，“可移植性” 是指软件或代码能够在不同的计算机系统、操作系统或硬件平台上运行的能力。具体来说，在 C++ 中，可移植性意味着用 C++ 编写的程序可以在不同的环境中（如不同的操作系统或不同的硬件架构）进行编译和运行，而不需要进行大量的修改或重写代码</p>\n</blockquote>\n<h2 id=\"11-c简介\"><a class=\"anchor\" href=\"#11-c简介\">#</a> 1.1 C++ 简介</h2>\n<p>C<ins> 融合了 3 种不同的编程方式: C 语言代表的过程性语言、 C</ins> 在 C 语言基础上添加的类代表的面向对象语言、 C++ 模板支持的泛型编程。</p>\n<h2 id=\"12-c简史\"><a class=\"anchor\" href=\"#12-c简史\">#</a> 1.2 C++ 简史</h2>\n<p>在 20 世纪 70 年代， C 和 Pascal 这样的语言引领人们进入了 &lt;u&gt; 结构化编程 &lt;/u &gt; 时代， 这种机制把秩序和规程带进了迫切需要这种性质的领域中。 除了提供结构化编程工具外， C 还能生成简洁、 快速运行的程序， 并提供了处理硬件问题的能力， 如管理通信端口和磁盘驱动器。 这些因素使 C 语言成为 20 世纪 80 年代占统治地位的编程语言。 同时， 20 世纪 80 年代， 人们也见证了一种新编程模式的成长：面向对象编程 (OOP)。SmallTalk 和 C++ 语言具备这种功能。 下面更深入地介绍 C 和 OOP。</p>\n<blockquote>\n<p>结构化编程是一种编程范式，它强调使用控制结构（如顺序、选择和循环）来组织程序的逻辑，而不是依赖于 goto 语句等不良编程习惯。其主要目标是提高程序的可读性、可维护性和可理解性。结构化编程通常包括以下几个关键特征：</p>\n<ol>\n<li><strong>模块化</strong>：将程序分解为小的、可管理的模块或函数，每个模块完成特定的任务。这使得程序更易于理解和维护。</li>\n<li><strong>控制结构</strong>：使用明确的控制结构（如 if-else、for、while 等）来控制程序的执行流程，而不是使用 goto 语句。这有助于减少程序的复杂性。</li>\n<li><strong>自顶向下设计</strong>：从高层次的功能开始设计程序，然后逐步细化到具体的实现。这种方法有助于清晰地定义程序的结构和功能。</li>\n<li><strong>数据结构</strong>：强调使用数据结构来组织和管理数据，使得程序能够更有效地处理信息。</li>\n</ol>\n<p>结构化编程的出现使得程序员能够编写出更清晰、更易于维护的代码，促进了软件开发的规范化和标准化。</p>\n</blockquote>\n<h3 id=\"121-c语言\"><a class=\"anchor\" href=\"#121-c语言\">#</a> 1.2.1 C 语言</h3>\n<p>20 世纪 70 年代早期， 贝尔实验室的 Dennis Ritchie 致力于开发 UNIX 操作系统。 为完成这项工作， Ritchie 需要一种语言， 它必须简洁， 能够生成简洁、 快速的程序， 并能有效地控制硬件。</p>\n<p>传统上， 程序员使用汇编语言来满足这些需求， 汇编语言依赖于计算机的内部机器语言。 然而， 汇编语言是低级 (low-level) 语言， 即直接操作硬件， 如直接访问 CPU 寄存器和内存单元。 因此汇编语言针对于特定的计算机处理器， 要将汇编程序移植到另 一种计算机上， 必须使用不同的汇编语言重 新编写程序。</p>\n<p>然而， UNIX 是为在不同的计算机 (或平台) 上工作而设计的， 这意味着它是一种高级语言。 高级 (high-level) 语言致力千解决问题， 而不针对特定的硬件。 一种被称为编译器的特殊程序将高级语言翻译 成特定计算机的内部语言。 这样， 就可以通过对每个平台使用不同的编译器来在不同的平台上使用同一个高级语言程序了。 Ritchie 希望有一种语言能将低级语言的效率、 硬件访问能力和高级语言的通用性、 可移植性融合在一起， 于是他在旧语言的基础上开发了 C 语言。</p>\n<h3 id=\"122-c语言编程原理\"><a class=\"anchor\" href=\"#122-c语言编程原理\">#</a> 1.2.2 C 语言编程原理</h3>\n<p>由千 C 吁在 C 语言的基础上移植了新的编程理念， 因此我们首先来看一看 C 所遵循的旧的理念。一般来说， 计算机语言要处理两个概念 —— 数据和算法。 数据是程序使用和处理的信息， 而算法是程序使用的方法</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411181643448.png\" alt=\"\" /></p>\n<p>C 语言与当前最主流的语言一样， 在最初面世时也是过程性 (procedural) 语言， 这意 味着它强调的是编程的算法方面。 从概念上说， 过程化编程首先要确定计算机应采取的操作， 然后使用编 程语言来实现这些操作。 程序命令计算机按一系列流程生成特定的结果</p>\n<p>随着程序规模的扩大， 早期的程序语言 (如 FORTRAN 和 BASIC) 都会遇到组织方面的问题。 例 如， 程序经常使用分支语句， 根据某种测试的结果， 执行一组或另 一组指令。 很多旧式程序的执行路 径很混乱 (被称为 “ 意大利面条式编程 ” )， 几乎不可能通过阅读程序来理解它，修改这种程序简直是一 场灾难。为了解决这种问题，计算机科学家开发了 一 种更有序的编程方法 —— 结构化编程 (structured programming)。 C 语言具有使用这种方法的特性。 例如， 结构化编程将分支 (决定接下来应执行哪个指令) 限制为一小组行为良好的结构。 C 语言的词汇表中就包含了这些结构 (for 循环、while 循环、 do while 循环和 if else 语句)。</p>\n<p>另一个新原则是自顶向下 (top-down) 的设计。在 C 语言中，其理念是将大型程序分解成小型、 便于管理的任务。 如果其中的一项任务仍然过大， 则将它分解为更小的任务。这一过程将一 直持续下去， 直到将程序划分为小型的、 易于编写的模块。C 语言的设计有助 于使用这种方法，它鼓励程序员开发程序单元 (函 数) 来表示各个任务模块。 如上所述， 结构化编 程技术反映了过程性编程的思想， 根据执行的操作来构思一个程序。</p>\n<h3 id=\"123-面向对象编程\"><a class=\"anchor\" href=\"#123-面向对象编程\">#</a> 1.2.3 面向对象编程</h3>\n<p>虽然结构化编程的理念提高了程序的清晰度、 可靠性， 并使之便于维护， 但它在编写大型程序时， 仍面临着挑战。为应付这种挑战，OOP 提供了一种新方法。与强调算法的过程性编程不同的是，OOP 强调的是数据。OOP 不像过程性编程那样， 试图使问题满足语言的过程性方法， 而是试图让语言来满足问题的要求。 其理念是设计与问题的本质特性相对应的数据格式。</p>\n<p>在 C++ 中， 类是一种规范， 它描述了这种新型数据格式， 对象是根据这种规范构造的特定数据结构。 例如， 类可以描述公司管理人员的基本特征 (姓名、 头衔、 工资、特长等)， 而对象则代表特定的管理人员 (Guilford Sheepblat、 副总裁、 $925 000、 知道如何恢复 Windows 注册表)。 通常， 类规定了可使用哪些数 据来表示对象以及可以对这些数据执行哪些操作。 例如， 假设正在开发 一个能够绘制矩形的计算机绘图程 序， 则可以定义一个描述矩形的类。 定义的数据部分应包括顶点的位置、 长和宽、 4 条边的颜色和样式、 矩形内部的填充颜色和图案等；定义的操作部分可以包括移动、 改变大小、 旋转、 改变颜色和图案、 将矩形复制到另一个位置上等操作。 这样， 当使用该程序来绘制矩形时， 它将根据类定义创建一个对象。该对 象保存了描述矩形的所有数据值， 因此可以使用类方法来修改该矩形。 如果绘制两个矩形， 程序将创建两 个对象， 每个矩形对应一个。</p>\n<p>OOP 程序设计方法首先设计类，它们准确地表示了程序要处理的东西。例如，除了表示矩形的类外，绘图程序还可能定义表示直线、圆、画刷、画笔的类。 类定义描述了对每个类可执行的操作， 如移动圆或旋转直线。 然后便可以设计一个使用这些类的对象的程序。从低级组织 (如类) 到高级组织 (如程序) 的处理过程叫做自下向上 (bottom-up) 的编程。</p>\n<p>OOP 编程并不仅仅是将数据和方法合并为类定义。例如， OOP 还有助千创建可重用的代码，这将减少大量的工作。 信息隐藏可以保护数据， 使其免遭不适当的访问。 多态让您能够为运算符和函数创建多个定义， 通过编程上下文来确定使用哪个定义。继承让您能够使用旧类派生出新类。OOP 引入了很多新的理念， 使用的编程方法不同于过程性编程。它不是将重点放在任务上， 而是放在表示概念上。有时不一定使用自上向下的编程方法， 而是使用自下向上的编程方法。</p>\n<p>设计有用、 可靠的类是一项艰巨的任务，幸运的是， OOP 语言使程序员在编程中能够轻松地使用已有 的类。 厂商提供了大量有用的类库， 包括设计用千简化 Wmdows 或 Macintosh 环境下编程的类库。 C++ 真正的优点之一 是：可以方便地重用和修改现有的、 经过仔细测试的代码。</p>\n<h3 id=\"124-c和泛型编程\"><a class=\"anchor\" href=\"#124-c和泛型编程\">#</a> 1.2.4 C++ 和泛型编程</h3>\n<p>泛型编程 (generic programming) 是 C<ins> 支待的另 一种编程模式 。 它与 OOP 的目标相同 ， 即使重用 代码和抽象通用概念的技术 更简单。 不过 OOP 强调的是编程的数据方面，而泛型编程强调的是独立于特定数据类型。它们的侧重点不同。OOP 是一个管理大型项目的工具，而泛型编程 提供了执行常见 任务 (如 对数据排序或合并链表) 的工具。 术语泛型 (generic) 指的是创建独立千类型的代码。 C</ins> 的数据表示有多种类型 —— 整数、 小数、 字符、 字符串、 用户定义的、 由多种类型组成的复合结构。 例如， 要对不同类型的数据进行排序， 通常必须为每种类型创建 一个排序函数 。 泛型编程需要对语言进行扩展， 以便可以只编写一个泛型 (即不是特定类型的) 函数 ， 并将其用千各种实际类型 。 C++ 模板提供了完成这种任务的机制。</p>\n<h3 id=\"125-c的起源\"><a class=\"anchor\" href=\"#125-c的起源\">#</a> 1.2.5 C++ 的起源</h3>\n<p>与 C 语言一样，C<ins> 也是在贝尔实验室诞生的， Bjame Stroustrup 于 20 世纪 80 年代在这里开发 出了这种语言 。 用他自己的话来说， “C</ins> 主要是为了我 的朋友和我不 必再使用汇编语言、 C 语言或其他现代高级语言来编程而设计的 。 它的 主要功能是可以 更方便地编写出好程序， 让每个程序员更加快乐 ” 。</p>\n<p>Stroustrup 比较关心的是让 C<ins> 更有用 ， 而不是实施特定的编程原理或风格。 在确定 C</ins> 语言特性方面 ，真正的编程需要比纯粹的原理更重要。 Stroupstrup 之所以在 C 的基础上创建 C++， 是因为 C 语言简洁、 适合系统编程、 使用广泛且与 UNIX 操作系统联系紧密 。 C<ins> 的 OOP 方面是受到了计算机模拟语言 Simula67 的启发。 Stroustrup 加入了 OOP 特性和对 C 的泛型编程支待， 但并没有对 C 的组件作很大的改动。 因此，C</ins> 是 C 语言的超集，这意味着任何有效的 C 程序都是有效的 C<ins> 程序。它们之间有些细微的差异，但无足轻重 。 C</ins> 程序可以使用已有的 C 软件库。 库是编程模块的集合， 可以从程序中调用它们。 库对很多常见的编程问题提供了可靠的解决方法， 因此能节省程序员大量的时间和工作量 。 这也有助于 C++ 的广泛传播。</p>\n<p>名称 C++ 来自 C 语言中的递增运算符 <ins>， 该运算符将变量加 1。 名称 C</ins> 表明 ，它是 C 的扩充版本。</p>\n<p>计算机程序将实际问题转换为计算机能够执行的一系列操作。&lt;u&gt;OOP 部分赋予了 C<ins> 语言将问题所涉及的概念联系起来的能力 ， C 部分则赋予了 C</ins> 语言紧密联系硬件的能力 &lt;/u&gt;， 这种能力上的结合成就了 C++ 的广泛传播。</p>\n<blockquote>\n<p>C++ 的二重性：</p>\n<ol>\n<li>\n<p>OOP 提供了高级抽象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>north_america<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure></li>\n<li>\n<p>C 提供了低级硬件访问。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set byte at</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  address</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">01000</span> to <span class=\"token number\">0</span></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n<h2 id=\"13-可移植性和标准\"><a class=\"anchor\" href=\"#13-可移植性和标准\">#</a> 1.3 可移植性和标准</h2>\n<p>假设您为运行 Windows2000 的老式奔腾 PC 编写了一个很好用的 C 丹程序，而管理人员决定用使用不 同操作系统 (如 Mac OSX 或 Linux) 和处理器 (如 SPARC 处理器) 的计算机替换它。 该程序是否可以在 新平台上运行呢？当然，必须使用为新平台设计的 C++ 编译器对程序重新编译。 但是否需要修改编写好的代码呢？如果在不修改代码的情况下，重新编译程序后，程序将运行良好，则该程序是可移植的。</p>\n<p>在可移植性方面存在两个障碍，其中的一个是硬件。&lt;u&gt; 硬件特定的程序是不可移植的。例如， 直接控制 IBM PC 视频卡的程序在涉及 Sun 时将 “ 胡言乱语 “&lt;/u&gt;(将依赖于硬件的部分放在函数模块中可以最大限度地降低可移植性问题；这样只需重新编写这些模块即可)。</p>\n<blockquote>\n<p>如果一个程序是针对特定硬件（如 IBM PC 的视频卡）编写的，那么它可能无法在其他硬件平台（如 Sun 计算机）上正常运行。这是因为不同的硬件有不同的架构、接口和功能，直接与特定硬件交互的程序通常依赖于该硬件的特性和指令集。</p>\n<p>例如，IBM PC 的视频卡可能使用特定的命令和数据格式来控制显示，而 Sun 计算机的视频卡则可能使用完全不同的命令和格式。因此，直接控制 IBM PC 视频卡的程序在 Sun 计算机上运行时，可能会产生无法理解的输出或 “胡言乱语”，因为它无法正确与 Sun 的硬件进行交互。</p>\n</blockquote>\n<p>可移植性的第二个障碍是语言上的差异。 口语确实可能产生问题。 约克郡的人对某个事件的描述， 布 鲁克林人可能就听不明白，虽然这两个地方的人都说英语。 计算机语言也可能出现方言。WindowsXP C<ins> 的实现与 Red Hat Linux 或 Macintosh OSX 实现相同吗？虽然多数实现都希望其 C 扞版本与其他版本兼容， 但如果没有准确描述语言工作方式的公开标准，这将很难做到。因此，美国国家标准局 (American National Standards Institute, ANSI) 在 1990 年设立了一 个委员会 (ANSI X3Jl6)， 专门负责制定 C</ins> 标准 (ANSI 制定了 C 语言标准)。 国际标准化组织 (ISO) 很快通过自己的委员会 (ISO- WG-21) 加入了这个行列， 创建了联合组织 ANSI/ISO, 致力于制定 C++ 标准。</p>\n<p>经过多年的努力，制定出了一 个国际标准 ISO/IEC 41 882: 1998, 并于 1998 年获得了 ISO 、 IEC (InternationalElectrotechnicalCommittee, 国际电工技术委员会) 和 ANSI 的批准。该标准常被称为<mark> C++98</mark>, 它不仅描述了已有的 C<ins> 特性， 还对该语言进行了扩展，<mark>添加了异常、 运行阶段类型识别 (RTTI)、 模板和标准模板库 (STL)</mark>。2003 年， 发布了 C</ins> 标准第二版 (IOS/IEC 14882:2003); 这个新版本是一 次技术性修订， 这意味着它对第一版进行了整理 —— 修订错误、 减少多义性等， 但没有改变语言特性。 这个版本常被称为 C<ins>03。 由于 ==C</ins>03 没有改变语言特性，因此使用 C<ins>98 表示 C</ins>98/C++2003==。</p>\n<p>C<ins> 在不断发展。ISO 标准委员会于 2001 年 8 月批准了新标准 ISO/IEC 14882: 20 11, 该标准以前称为 C</ins>11 。 与 C<ins>98 一样，==C</ins>11<mark> 也</mark>新增了众多特性 ==。 另外， 其<mark>目标是消除不一致性， 让 C++ 学习和使用起来更容易</mark>。该标准还<mark>曾被称为 C++0x</mark>, 最初预期 x 为 7 或 8, 但标准制定工作是一个令人疲惫的缓慢过程。所幸的是， 可将 0x 视为十六进制数， 这意味着委员会只需在 2015 年前完成这项任务即可。 根据这个度量标准，委员会还是提前完成了任务。</p>\n<p>lSO C+＋标准还吸收了 ANSI C 语言标准， 因为 C<ins> 应尽量是 C 语言的超集。 这意味着在理想情况下，任何有效的 C 程序都应是有效的 C</ins> 程序。ANSI C 与对应的 C<ins> 规则之间存在一些差别， 但这种差别很小。 实际上， ANSI C 加入了 C</ins> 首次引入的一些特性， 如 &lt;u&gt; 函数原型 &lt;/u &gt; 和类型限定符 const。</p>\n<blockquote>\n<p>函数原型是 C 和 C++ 编程语言中的一个重要概念，它用于在函数的实际定义之前声明函数的名称、返回类型和参数类型。函数原型的主要作用是告诉编译器函数的基本信息，以便在调用该函数时，编译器可以检查传递给函数的参数类型是否与函数原型中声明的类型匹配。</p>\n<p><strong>函数原型的基本语法</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>返回类型 函数名<span class=\"token punctuation\">(</span>参数类型<span class=\"token number\">1</span> 参数名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数类型<span class=\"token number\">2</span> 参数名<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>示例</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数原型</span></pre></td></tr></table></figure><p>在这个例子中， <code>add</code>  是函数的名称，返回类型是 <code>int</code> ，它接受两个 <code>int</code>  类型的参数。</p>\n</blockquote>\n<p>在 ANSI C 出现之前， C 语言社区遵循一种事实标准， 该标准基于 Kernighan 和 Ritchie 编写的《The C Programmling Language》 一书， 通常被称为 K&amp;R C; ANSI C 出现后， 更简单的 K&amp;R C 有时被称为经典 C (C lassicC)。</p>\n<p>ANSI C 标准不仅定义了 C 语言，还定义了一个 ANSI C 实现必须支持的标准 C 库。C<ins> 也使用了这个库；本书将其称为标准 C 库或标准库。 另外， ANSI/ISO C</ins> 标准还提供了一个 C++ 标准类库。</p>\n<p><mark>最新的 C 标准为 C99</mark>, ISO 和 ANSI 分别于 1999 年和 2000 年批准了该标准。 该标准<mark>在 C 语言中添加了一些 C++ 编译器支持的特性， 如 &lt;u&gt; 新的整型 &lt;/u&gt;</mark>。</p>\n<blockquote>\n<p>C99 标准通过引入这些新的整型类型，增强了 C 语言的数值处理能力，使得程序员能够更精确地控制数据的大小和范围。这些新特性使得 C 语言在处理不同平台和硬件时更加灵活和可靠。这些新整型主要包括：</p>\n<p><strong>1.  <code>long long int</code> </strong></p>\n<ul>\n<li>\n<p><strong>描述</strong>：这是一个新的整型类型，至少保证有 64 位的范围。它用于处理比 <code>long int</code>  更大的整数。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> largeNumber <span class=\"token operator\">=</span> <span class=\"token number\">9223372036854775807</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大值</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>2.  <code>int8_t</code> ,  <code>int16_t</code> ,  <code>int32_t</code> ,  <code>int64_t</code> </strong></p>\n<ul>\n<li>\n<p><strong>描述</strong>：这些是固定宽度的整型类型，分别表示 8 位、16 位、32 位和 64 位的有符号整数。它们在 <code>&lt;stdint.h&gt;</code>  头文件中定义，提供了跨平台的一致性。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int8_t</span> smallNumber <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 8 位有符号整数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int16_t</span> mediumNumber <span class=\"token operator\">=</span> <span class=\"token number\">32767</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16 位有符号整数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int32_t</span> largeNumber <span class=\"token operator\">=</span> <span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 32 位有符号整数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int64_t</span> veryLargeNumber <span class=\"token operator\">=</span> <span class=\"token number\">9223372036854775807</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 64 位有符号整数</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>3.  <code>uint8_t</code> ,  <code>uint16_t</code> ,  <code>uint32_t</code> ,  <code>uint64_t</code> </strong></p>\n<ul>\n<li>\n<p><strong>描述</strong>：这些是固定宽度的无符号整型类型，分别表示 8 位、16 位、32 位和 64 位的无符号整数。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">uint8_t</span> smallUnsignedNumber <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8 位无符号整数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">uint16_t</span> mediumUnsignedNumber <span class=\"token operator\">=</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16 位无符号整数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">uint32_t</span> largeUnsignedNumber <span class=\"token operator\">=</span> <span class=\"token number\">4294967295</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 32 位无符号整数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">uint64_t</span> veryLargeUnsignedNumber <span class=\"token operator\">=</span> <span class=\"token number\">18446744073709551615</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 64 位无符号整</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h3 id=\"132-本书遵循的c标准\"><a class=\"anchor\" href=\"#132-本书遵循的c标准\">#</a> 1.3.2 本书遵循的 C++ 标准</h3>\n<p>当代的编译器都对 C<ins>98 提供了很好的支持。 编写本书期间， 有些编译器还支持一些 C</ins> 特性；随着新标准获批， 对这些特性的支持将很快得到提高。 本书反映了当前的情形， 详尽地介绍了 C<ins>98, 并涵盖 了 C</ins>11 新增的一些特性。 在探讨相关的 C<ins>98 主题时顺便介绍了一些 C</ins> 新特性， 而第 18 章专门介绍 新特性， 它总结了本书前面提到的一些特性， 并介绍了其他特性。</p>\n<p>在编写本书期间， 对 C++ 11 的支持还不全面， 因此难以全面介绍 C++11 新增的所有特性。考虑到篇幅限制， 即使这个新标准获得了全面支持，也无法在一本书中全面介绍它。 本书重点介绍大多数编译器都支持的特性， 并简要地总结其他特性。</p>\n<p>详细介绍 C++ 之前， 先介绍一些有关程序创建的基本知识。</p>\n<h2 id=\"14-程序创建的技巧\"><a class=\"anchor\" href=\"#14-程序创建的技巧\">#</a> 1.4 程序创建的技巧</h2>\n<p>假设您编写了 一个 C 开程序。 如何让它运行起来呢？具体的步骤取决于计算机环境和使用的 C++ 编译器， 但大体如下</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411181837996.png\" alt=\"\" /></p>\n<ol>\n<li>使用文本编辑器编写程序， 并将其保存到文件中， 这个文件就是程序的源代码。</li>\n<li>编译源代码。 这意味着运行一个程序， 将源代码翻译为主机使用的内部语言机器语言。 包含了翻译后的程序的文件就是程序的目标代码 (object code)。</li>\n<li>将目标代码与其他代码链接起来。 例如， C<ins> 程序通常使用库。 C</ins> 库包含一系列计算机例程 (被称为函数) 的目标代码， 这些函数可以执行诸如在屏幕上显示信息或计算平方根等任务。 链接指的是将目标代码同使用的函数的目标代码以及一些标准的启动代码 (startup code) 组合起来， 生成程序的运行阶段版本。 包含该最终产品的文件被称为可执行代码。</li>\n</ol>\n<h3 id=\"141-创建源代码文件\"><a class=\"anchor\" href=\"#141-创建源代码文件\">#</a> 1.4.1 创建源代码文件</h3>\n<p>有些 C++ 实现 (如 Microsoft Visual C++、 Embarcadero C<ins>Builder、 Apple Xcode、 Open Watcom C</ins>、 Digital Mars C++ 和 Freescale CodeWarrior) 提供了集成开发环境 (integrated development envirorunents, IDE)， 让您能够在主程序中管理程序开发的所有步骤，包括编辑。</p>\n<p>有些实现 (如用于 UNIX 和 Linux 的 GNU C++、 用于 AIX 的 IBM XL C/C++、 Embarcadero 分发的 Borland 5.5 免费版本以及 Digital Mars 编译器) 只能处理编译和链接阶段，用户需要在系统命令行中输入命令来进行编译和链接。在这种情况下， 可以使用任何文本编辑器来创建和修改源代码。 例如， 在 UNIX 系统上， 可以使用 vi、 ed、 ex 或 emacs; 在以命令提示符模式运行的 Windows 系统上， 可以使用 edlin、 edit 或任何程序编辑器。如果将源代码文件保存为 &lt; u &gt; 标准 ASCII 文本文件 &lt;/u&gt;(而不是 &lt; u &gt; 特殊的字处理器格式 &lt;/u&gt;)， 甚至可以使用 &lt; u &gt; 字处理器 &lt;/u&gt;。</p>\n<blockquote>\n<ul>\n<li>标准 ACSCII 文本文件：仅包含 ASCII 字符（如字母、数字、标点符号等）的文本文件。这种文件格式简单、可读性强，且可以在不同的操作系统和文本编辑器之间无缝传输</li>\n<li>特殊的字处理器格式：字处理器（如 Microsoft Word、WPS Office 等）通常用于创建和编辑文档，支持丰富的格式（如字体、颜色、段落样式等）。这些文档通常以特定的格式保存（如  <code>.doc</code> 、 <code>.docx</code> ），而不是简单的文本。这些格式包含了大量的格式信息，可能不被编译器识别，因此不适合用于源代码的保存。</li>\n<li>字处理器：一种软件应用程序，用于创建、编辑和格式化文本文件。常见的字处理器包括 Microsoft Word、Google Docs 和 LibreOffice Writer。它们提供了丰富的文本格式化功能，但不适合用于编写源代码</li>\n</ul>\n</blockquote>\n<p>另外，还可能有 IDE 选项， 让您能够使用这些命令行编译器。</p>\n<blockquote>\n<p>某些集成开发环境（IDE）可能提供功能，使得用户可以在 IDE 内部直接使用命令行编译器的功能，而不需要手动切换到命令行界面。这种集成可以让开发者在一个统一的环境中进行代码编写、编译和调试，从而提高开发效率</p>\n</blockquote>\n<p>给源文件命名时， 必须使用正确的后缀，将文件标识为 C<ins> 文件。这不仅告诉您该文件是 C</ins> 源代码， 还将这种信息告知编译器 (如果 UNIX 编译器显示信息” bad magic number&quot;,<br />\n 则表明后缀不正确)。 后缀由一个句点和一个或多个字符组成， 这些字符被称作扩展名</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411181922467.png\" alt=\"\" /></p>\n<p>使用什么扩展名取决于 C<ins> 实现， 表 1.1 列出了一些常用的扩展名。 例如， spiffy.C 是有效的 UNIXC</ins> 源代码文件名。 注意， UNIX 区分大小写， 这意味着应使用大写的 C 字符。实际上，&lt;u&gt; 小写 c 扩展名也有效 &lt;/u&gt;， 但标准 C 才使用小写的 c。 因此， 为避免在 UNIX 系统上发生混淆， 对于 C 程序应使用 c, 而对于 C++ 程序则请使用 C。如果不在乎多输入一两个字符，则对于某些 UNlX 系统， 也可以使用扩展名 cc 和 cxx。</p>\n<blockquote>\n<p>在 UNIX 系统上，虽然标准 C 语言使用小写的  <code>.c</code>  作为源文件扩展名，但实际上，使用小写的  <code>.c</code>  作为 C++ 源文件的扩展名也是有效的。这意味着您可以将 C++ 源代码文件命名为  <code>.c</code> ，而不会导致编译错误</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411181936602.png\" alt=\"\" /></p>\n<p>&lt;u&gt;DOS&lt;/u&gt; 比 UNIX 稍微简单一点，不区分大小写，因此 DOS 实现使用额外的字母来区别 C 和 C++ 程序</p>\n<blockquote>\n<p><strong>DOS</strong>（Disk Operating System）是一种操作系统，最初是为个人计算机设计的。它是一个命令行界面的操作系统，用户通过输入命令来执行各种操作，如文件管理、程序运行等</p>\n<p>DOS 使用不同的扩展名来区分源代码文件，例如 <code>.c</code>  用于 C 程序， <code>.cpp</code>  或 <code>.cxx</code>  用于 C++ 程序</p>\n</blockquote>\n<h3 id=\"142-编译和链接\"><a class=\"anchor\" href=\"#142-编译和链接\">#</a> 1.4.2 编译和链接</h3>\n<p>最初， Strosutrpu 实现 C<ins> 时， 使用了一个 C</ins> 到 C 的编译器程序，而不是开发直接的 C<ins> 到目标代码的编译器。 前者叫做 cfront (表示 C 前端， C front end)， 它将 C</ins> 源代码翻译成 C 源代码， 然后使用一个标准 C 编译器对其进行编译。&lt;u&gt; 这种方法简化了向 C 的领域引入 C<ins> 的过程 &lt;/u&gt;。其他实现也采用这种方法将 C</ins> 引入到其他平台。随着 C<ins> 的日渐普及，越来越多的实现转向创建 C</ins> 编译器，直接将 C<ins> 源代码生成目标代码。这种直接方法加速了编译过程，并强调 C</ins> 是一种独立 (虽然有些相似) 的语言。</p>\n<blockquote>\n<p>使用 C++ 到 C 的编译器（如 cfront）可以更容易地将 C++ 语言引入到已经存在的 C 语言环境中</p>\n</blockquote>\n<ol>\n<li>\n<p>UNIX 编译和链接</p>\n<p>最初，UNIX 命令 CC 调用 cfront , 但 cfront 未能紧跟 C<ins> 的发展步伐， 其最后一个版本发布于 1993 年。当今的 UNIX 计算机可能没有编译器、 有专用编译器或第三方编译器，这些编译器可能是商业的，也可能是自由软件，如 GNU g</ins> 编译器。如果 UNIX 计算机上有 C++ 编译器，很多情况下命令 CC 仍然管用， 只是启动的编译器随系统而异。出于简化的目的， 读者应假设命令 CC 可用， 但 必须认识到这 一 点， 即对于下述讨论中的 CC，可能必须使用其他命令来 代替。</p>\n<p>请用 CC 命令来编译程序。名称采用大写字母，这样可以将它与标准 UNIX C 编译器 cc 区分开 来。 CC 编译器是命令行编译器， 这意味着需要在 UNIX 命令行上输入编译命令。</p>\n<p>例如， 要编译 C++ 源代码文件 spiffy.C, 则应在 UNIX 提示符下输入如下命令:</p>\n<p><code>CC spiffy.C</code></p>\n<p>如果程序没有错误，编译器将生成一个扩展名为 o 的目标代码文件。在这个例子中， 编译器将生成文件 spiffy.o。</p>\n<p>接下来， 编译器自动将目标代码文件传递给系统链接程序， 该程序将代码与库代码结合起来， 生成一个可执行文件。 在默认情况下， 可执行文件为 a.out。如果只使用一个源文件， 链接程序还将删除 spiffy.o 文件， 因为这个文件不再需要了。 要运行该程序， 只要输入可执行文件的文件名即可:</p>\n<p><code>a.out</code></p>\n<p>如果编译新程序， 新的可执行文件 a.out 将覆盖已有的 a.out (这是因为可执行文件占据了大量空间， 因此覆盖旧的可执行文件有助于降低存储需求)。 然而， 如果想保留可执行文件， 只需使用 UNIX 的 mv 命令来修改可执行文件的文件名即可。</p>\n<p>在 C++ 中，程序也可以包含多个文件。在这种情况下， 可以通过在命令行上列出全部文件来编译程序:</p>\n<p><code>CC my.C precious.C</code></p>\n<p>如果有多个源代码文件， 则编译器将不会删除目标代码文件。 这样， 如果只修改了 my.C 文件， 则可以用下面的命令重新编译该程序:</p>\n<p><code>CC my.C precious.o</code></p>\n<p>这将重新编译 my.C 文件， 并将它与前面编译的 precious.o 文件链接起来。</p>\n<blockquote>\n<p>在 C++ 中，程序通常由多个源文件组成，每个源文件可以定义不同的类、函数或其他程序结构。将这些源文件编译成目标文件（ <code>.o</code>  文件）后，链接它们是为了生成一个完整的可执行程序</p>\n<ol>\n<li>\n<p><strong>模块化设计</strong></p>\n<ul>\n<li>\n<p><strong>分离功能</strong>：将程序分成多个源文件（如  <code>my.C</code>  和  <code>precious.C</code> ）可以使代码更易于管理和维护。每个文件可以专注于特定的功能或模块。</p>\n</li>\n<li>\n<p><strong>重用性</strong>：如果  <code>precious.C</code>  中的代码在多个项目中使用，可以将其编译为  <code>precious.o</code> ，然后在其他项目中链接这个目标文件，而不需要重复编写相同的代码。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>编译和链接过程</strong></p>\n<ul>\n<li><strong>编译</strong>：当你编译  <code>my.C</code>  和  <code>precious.C</code>  时，编译器会分别生成  <code>my.o</code>  和  <code>precious.o</code> 。这两个目标文件包含了各自源文件中定义的函数和类的机器代码。</li>\n<li><strong>链接</strong>：在链接阶段，链接器会将  <code>my.o</code>  和  <code>precious.o</code>  中的代码结合起来，解决它们之间的引用关系。例如，如果  <code>my.C</code>  中的某个函数调用了  <code>precious.C</code>  中的一个函数，链接器会确保在最终的可执行文件中正确地连接这些调用。</li>\n</ul>\n</li>\n<li>\n<p><strong>依赖关系</strong></p>\n<ul>\n<li><strong>函数和类的调用</strong>：如果  <code>my.C</code>  中的代码依赖于  <code>precious.C</code>  中定义的函数或类，那么在链接时就需要将这两个目标文件链接在一起，以确保所有的引用都能被正确解析。</li>\n<li><strong>共享数据</strong>：如果两个文件之间有共享的数据结构或全局变量，链接过程也会确保这些数据在最终的可执行文件中是可访问的。</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>可能需要显式地指定一些库。例如， 要访问数学库中定义的函数， 必须在命令行中加上 - lm 标记:</p>\n<p><code>CC usingmath.C -lm</code></p>\n</li>\n<li>\n<p>Linux 编译和链接</p>\n<p>Linux 系统中最常用的编译器是 g++， 这是来自 Free Software Foundation 的 GNU C<ins> 编译器。 Linux 的多数版本都包括该编译器， 但并不一定总会安装它。 g</ins> 编译器的工作方式很像标准 UNIX 编译器。 例如， 下面的命令将生成可执行文件 a.out</p>\n<p><code>g++ spiffy.cxx</code></p>\n<p>有些版本可能要求链接 C++ 库:</p>\n<p><code>g++ spiffy.cxx -lg++</code></p>\n<p>要编译多个源文件， 只需将它们全部放到命令行中即可:</p>\n<p><code>g++ my.cxx precious.cxx</code></p>\n<p>这将生成一个名为 a.out 的可执行文件和两个目标代码文件 my.o 和 precious.o。如果接下来修改了其中的某个源代码文件， 如 my.cxx, 则可以使用 my.cxx 和 precious.o 来重新编译 :<br />\n <code>g++ my.cxx precious.o</code></p>\n<p>GNU 编译器可以在很多平台上使用 ， 包括基于 Windows 的 PC 和在各种平台上 运行的 UNIX 系统 。</p>\n</li>\n<li>\n<p>Windows 命令行编译器</p>\n<p>要在 WindowsPC 上编译 C<ins> 程序， 最便宜的方法是下载一个在 Windows 命令提示符模式 (在这种模式下， 将打开一个类似于 MS-DOS 的窗口) 下运行的免费命令行编译器。Cygwin 和 MinGW 都包含编译器 GNU C</ins>， 且可免费下载；它们使用的编译器名为 g++。</p>\n<p>要使用 g++ 编译器， 首先需要打开一个命令提示符窗口。 启动程序 Cygwin 和 MinGW 时， 它们将自动打开一个命令提示符窗口。 要编译名为 great.cpp 的源代码文件， 请在提示符下输入如下命令:<br />\n <code>g++ great.cpp</code> <br />\n 如果程序编译成功， 则得到的可执行文件名为 a.exe。</p>\n</li>\n<li>\n<p>Windows 编译器</p>\n<p>Windows 产品很多且修订频繁，无法对它们分别进行介绍。当前 ，最流行是 Microsoft VisualC<ins>2010。虽然设计和目标不同，但大多数基于 Windows 的 C</ins> 编译器都有一 些相同的功能。</p>\n<p>通常， 必须为程序创建一个项目 ， 并将组成程序的一个或 多个文件添加到该项目中。 每个厂商提供的 IDE (集成开发环境) 都包含用于创建项目的菜单选项 (可能还有自动帮助)。 必须确定的非常重要的一点是， 需要创建的是什么类型的程序。 通常， 编译器提供了很多选择， 如 Windows 应用程序、 MFC Windows 应用程序 、 动态链接库、 ActiveX 控件、 DOS 或字符模式的可执行文件、 静态库或控制台应用程序等 。 其中一些可能既有 32 位版本， 又有 64 位版本。</p>\n<p>一般而言， 应选择包含字样 “控制台 “ 、” 字符模式 ” 或<br />\n “DOS 可执行文件” 等选项。例如，在 Microsoft VisualC++ 2010 中，应选择 Win32 Console Application (控制台应用程序) 选项， 单击 Application Settings (应用程序设置)， 并选择 Empty Project (空项目)。 在 C++ Builder 中， 应从 C++ Builder Projects (C++ Builder 项目) 中选择 ConsoleApplication (控制台应用程序)。</p>\n<p>创建好项目后， 需要对程序进行编译和链接。IDE 通常提供了多个菜单项， 如 Compile (编译)、Build (建立)、 Make (生成)、 BuildAll (全部建立)、Link (链接)、 Execute ( 执行)、 Run ( 运行) 和 Debug (调试)， 不过同一个 IDE 中， 不一定包含所有这些选项。</p>\n<ul>\n<li>Compile 通常意味着对当前打开的文件中的代码进行编译 。</li>\n<li>Build 和 Make 通常意味着编译项目中所有源代码文件的代码。这通常是一个递增过程，也就是说， 如果项目包含 3 个文件， 而只有其中一个文件被修改， 则只重新编译该文件。</li>\n<li>BuildAll 通常意味着重新编译所有的源代码文件。</li>\n<li>Link 意味着 (如前所述) 将编译后的源代码与所需的库代码组合起来。</li>\n<li>Run 或 Execute 意味着运行程序。 通常， 如果您还没有执行前面的步骤， Run 将在运行程序之前完成这些步骤。</li>\n<li>Debug 意味着以步进方式执行程序。</li>\n<li>编译器可能让您选择要生成调试版还是发布版。 调试版包含额外的代码， 这会增大程序、 降低执行速度， 但可提供详细的调试信息。</li>\n</ul>\n<p>如果程序违反了语言规则， 编译器将生成错误消息， 指出存在问题的行。 有时， 真正的问题可能在标识行之前；有时， 一个错误可能引发一连串的错误消息。</p>\n<p>提示：改正错误时，应首先改正第一个错误。如果在标识为有错误的那一行上找不到错误，请查看前一行。</p>\n<p>需要注意的是， 程序能够通过某个编译器的编译并不意味着它是合法的 C<ins> 程序；同样， 程序不能通 过某个编译器的编译也并不意味着它是非法的 C</ins> 程序。与几年前相比，现在的编译器更严格地遵循了 C++ 标准。 另外， 编译器通常提供了可用千控制严格程度的选项。</p>\n<p>提示：有时， 编译器在不完全地构建程序后将出现混乱， 它显示无法改正的、 无意义的错误消息。 在这种情况下， 可以选择 Build All, 重新编译整个程序， 以清除这些错误消息。 遗憾的是， 这种情况和那些更常见的情况 (即错误消息只是看上去无意义， 实际上有意义) 很难区分。</p>\n<p>通常，IDE 允许在辅助窗口中运行程序。 程序执行完毕后， 有些 IDE 将关闭该窗口， 而有些 IDE 不关闭。 如果编译器关闭窗口， 将难以看到程序输出。 为查看输出， 必须在程序的最后加上 一些代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// add this statement</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// and maybe this, too</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>cin.get () 语句读取下一次键击， 因此上述语句让程序等待， 直到按下了 Enter 键 (在按下 Enter 键之前， 键击将不被发送给程序， 因此按其他键都不管用)。&lt;u &gt; 如果程序在其常规输入后留下一个没有被处理的键击，则第二条语句是必需的。 例如， 如果要输入一个数字， 则需要输入该数字， 然后按 Enter 键。 程序将读取该数字， 但 Enter 键不被处理， 这样它将被第一个 cin.get () 读取。&lt;/u&gt;</p>\n<blockquote>\n<p><strong>输入流的工作原理</strong></p>\n<ol>\n<li>\n<p><strong>输入缓冲区：</strong></p>\n<p>当用户在控制台输入数据时，输入的内容会被存储在一个缓冲区中，直到用户按下 Enter 键。此时，整个输入（包括用户输入的字符和 Enter 键）会被送到程序的输入流中。</p>\n</li>\n<li>\n<p><strong>读取输入：</strong></p>\n<p>如果程序使用  <code>cin</code>  来读取输入（例如  <code>cin &gt;&gt; number;</code> ），它会读取用户输入的数字，但不会读取 Enter 键。Enter 键仍然留在输入流中，等待后续的读取操作。</p>\n</li>\n</ol>\n<p><strong>未处理的 Enter 键</strong></p>\n<p>当程序读取完用户输入（例如一个数字）后，输入流中仍然存在一个 Enter 键的字符。这意味着如果程序完毕后 IDE 直接关闭窗口，在此之后如果只有一个输入读取操作（  <code>cin.get()</code> ），程序用这个  <code>cin.get()</code>  读取未处理的 Enter 键后程序完毕，窗口立即关闭。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入一个数字: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用户输入数字并按下 Enter</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你输入的数字是: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 处理遗留的 Enter 键</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"按 Enter 键继续...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取遗留的 Enter 键</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等待用户再次按下 Enter 键</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p>Macintosh 上的 C++</p>\n<p>当前， Apple 随操作系统 MacOSX 提供了开发框架 Xcode, 该框架是免费的， 但通常不会自动安装。要安装它， 可使用操作系统安装盘， 也可从 Apple 网站免费下载 (但需要注意的是， 它超过 4GB)。Xcode 不仅提供了支持多种语言的 IDE，还自带了两个命令行编译器 (g++ 和 clang)，可在 UNXI 模式下运行它们。而要进入 UNIX 模式， 可通过实用程序 Terminal。</p>\n</li>\n</ol>\n<h1 id=\"第2章-开始学习c\"><a class=\"anchor\" href=\"#第2章-开始学习c\">#</a> 第 2 章 开始学习 C++</h1>\n<h2 id=\"21-进入c\"><a class=\"anchor\" href=\"#21-进入c\">#</a> 2.1 进入 C++</h2>\n<p>C++ 对大小写敏感， 也就是说区分大写字符和小写字符。例如，程序使用的是 cout，如果将其替换为 Cout 或 COUT, 程序将无法通过编译，并且编译器将指出使用了未知的标识符</p>\n<p>事实上， C++ 能够使用 printf ()、 scanf () 和其他所有标准 C 输入和输出函数， 只需要包含常规 C 语言的 stdio.h 文件。</p>\n<h3 id=\"211-main函数\"><a class=\"anchor\" href=\"#211-main函数\">#</a> 2.1.1 main () 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  statements</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这几行代码构成了函数定义 (function definition)。 该定义由两部分组成：第一行 int main ( ) 叫函数头 (function heading)， 花括号 ({和}) 中包括的部分叫函数体。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411182154057.png\" alt=\"\" /></p>\n<p>函数头对函数与程序其他部分之间的接口进行了总结。</p>\n<p>为理解源代码， 编译器需要知道一条语句何时结束， 另一条语句何时开始。 有些语言使用语句分隔符。 例如，FORTRAN 通过 &lt;u&gt; 行尾 &lt;/u &gt; 将语句分隔开来，Pascal 使用分号分隔语句。在 Pascal 中， 有些情况下可以省略分号， 例如 END 前的语句后面， 这种情况下， 实际上并没有将两条语句分开。不过 C++ 与 C 一 样， 也使用终止符 (terminator)， 而不是分隔符。 终止符是一 个分号， 它是语句的结束标记， 是语句的组成部分， 而不是语句之间的标记。</p>\n<blockquote>\n<p>&quot;行尾&quot;（end of line，EOL）是指一行代码的结束位置</p>\n<p>在文本文件中，行尾通常由特定的字符或字符序列表示。常见的行尾字符包括：</p>\n<ul>\n<li><strong>换行符（LF）</strong>: 在 Unix 和 Linux 系统中，行尾通常由一个换行符（ <code>\\n</code> ）表示。</li>\n<li><strong>回车符（CR）</strong>: 在旧的 Mac 系统中，行尾由一个回车符（ <code>\\r</code> ）表示。</li>\n<li><strong>回车换行符（CRLF）</strong>: 在 Windows 系统中，行尾由回车符和换行符的组合（ <code>\\r\\n</code> ）表示。</li>\n</ul>\n</blockquote>\n<p>通常，main () 被启动代码调用，而启动代码是由编译器添加到程序中的， 是程序和操作系统之间的桥梁。 事实上，该函数头描述的是 main () 和操作系统之间的接口。</p>\n<p>很多现有的程序都使用经典 C 函数头:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// original C style</span></pre></td></tr></table></figure><p>在 C 语言中， 省略返回类型相当千说函数的类型为 int 。 然而， C++ 逐步淘汰了这种用法。</p>\n<p>也可以使用下面的变体:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// very explicit style</span></pre></td></tr></table></figure><p>在括号中使用关键字 void 明确地指出， 函数不接受任何参数。 在 C++ 中，让括号空着与在括号中使用 void 等效 (在 C 中， 让括号空着意味着对是否接受参数保持沉默)。</p>\n<p>ANSI/ISO C++ 标准对那些抱怨必须在 main () 函数最后包含一 条返回语句过于繁琐的人做出了让步。 如果编译器到达 main () 函数末尾时没有遇到返回语句， 则认为 main () 函数以如下语句结尾:</p>\n<p><code>return 0;</code></p>\n<p>这条隐含的返回语句只适用于 main () 函数，而不适用于其他函数。</p>\n<h3 id=\"213-c预处理器和iostream文件\"><a class=\"anchor\" href=\"#213-c预处理器和iostream文件\">#</a> 2.1.3 C++ 预处理器和 iostream 文件</h3>\n<p>如果程序要使用 C++ 输入或输出工具，请提供这样两行代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可使用其他代码替换第 2 行， 这里使用这行代码旨在简化该程序</p>\n<p>C<ins> 和 C 一样， 也使用一个预处理器， 该程序在进行主编译之前对源文件进行处理 (第 1 章介绍过，有些 C</ins> 实现使用翻译器程序将 C++ 程序转换为 C 程序。 虽然翻译器也是一种预处理器，但这里不讨论这种预处理器，而只讨论这样的预处理器， 即它处理名称以 #开头的编译指令)。 不必执行任何特殊的操作来调用该预处理器， 它会在编译程序时自动运行。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> <span class=\"token comment\">// a PREPROCESSOR direcive</span></span></pre></td></tr></table></figure><p>该编译指令导致预处理器将 iostream 文件的内容添加到程序中。 这是一种典型的预处理器操作：在源代码被编译之前，替换或添加文本。</p>\n<h1 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h1>\n<h2 id=\"附录g-标准模板库方法和函数\"><a class=\"anchor\" href=\"#附录g-标准模板库方法和函数\">#</a> 附录 G 标准模板库方法和函数</h2>\n<h3 id=\"g5-stl函数\"><a class=\"anchor\" href=\"#g5-stl函数\">#</a> G.5 STL 函数</h3>\n<p>STL 算法库 (由头文件 algorithm 和 numeric 支持) 提供了大量基于迭代器的 &lt; u &gt; 非成员模板函数 &lt;/u&gt;。</p>\n<blockquote>\n<p><strong>非成员模板函数</strong>：这些算法函数不是某个类的成员，而是独立的模板函数，可以接受不同类型的迭代器作为参数</p>\n</blockquote>\n<p>正如第 16 章介绍的，选择的 &lt;u&gt; 模板参数名 &lt;/u &gt; 指出了特定参数应模拟的概念。 例如，&lt;u&gt;Forwardlterator&lt;/u&gt; 用于指出，参数至少应模拟正向迭代器的要求；&lt;u&gt;Predicate&lt;/u &gt; 用于指出，参数应是一个接受一个参数并返回 bool 值的函数对象。</p>\n<blockquote>\n<p>模板参数名：在定义这些算法时，使用了一些特定的名称来指示参数的要求。例如：</p>\n<ul>\n<li><strong>ForwardIterator</strong>：这个参数名表示传入的迭代器至少应该具备 “正向迭代器” 的特性，即可以从前向后遍历容器。</li>\n<li><strong>Predicate</strong>：这个参数名表示传入的函数对象应该接受一个参数并返回一个布尔值（ <code>bool</code> ），通常用于判断某个条件是否成立。</li>\n</ul>\n</blockquote>\n<p>C<ins> 标准将算法分成 4 组：非修改式序列操作、修改式序列操作、排序和相关运算符以及数值操作 (C</ins>11 将数值操作从 STL 移到了 numeric 库中， 但这不影响它们的用法)。 序列操作 (sequence operation) 表明，函数将接受两个迭代器作为参数， 它们定义了要操作的区间或序列。 修改式 (mutating) 意味着函数可以修改容器的内容。</p>\n<h4 id=\"g51-非修改式序列操作\"><a class=\"anchor\" href=\"#g51-非修改式序列操作\">#</a> G.5.1 非修改式序列操作</h4>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E7%AC%AC1%E9%98%B6%E6%AE%B5-C++%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/",
            "url": "https://60saint.github.io/cpp/%E7%AC%AC1%E9%98%B6%E6%AE%B5-C++%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/",
            "title": "C++基础阶段综合案例-机房预约系统",
            "date_published": "2024-11-15T12:19:08.391Z",
            "content_html": "<h1 id=\"1-机房预约系统需求\"><a class=\"anchor\" href=\"#1-机房预约系统需求\">#</a> 1、机房预约系统需求</h1>\n<h2 id=\"11-系统简介\"><a class=\"anchor\" href=\"#11-系统简介\">#</a> 1.1 系统简介</h2>\n<p>学校现有几个规格不同的机房，由于使用时经常出现 &quot;撞车&quot; 现象，现开发一套机房预约系统，解决这一问题。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161103839.png\" alt=\"\" /></p>\n<h2 id=\"12-身份简介\"><a class=\"anchor\" href=\"#12-身份简介\">#</a> 1.2 身份简介</h2>\n<p>分别有三种身份使用该程序</p>\n<ul>\n<li><strong>学生代表</strong>：申请使用机房</li>\n<li><strong>教师</strong>：审核学生的预约申请</li>\n<li><strong>管理员</strong>：给学生、教师创建账号</li>\n</ul>\n<h2 id=\"13-机房简介\"><a class=\"anchor\" href=\"#13-机房简介\">#</a> 1.3 机房简介</h2>\n<p>机房总共有 3 间</p>\n<ul>\n<li>1 号机房   --- 最大容量 20 人</li>\n<li>2 号机房   --- 最多容量 50 人</li>\n<li>3 号机房   --- 最多容量 100 人</li>\n</ul>\n<h2 id=\"14-申请简介\"><a class=\"anchor\" href=\"#14-申请简介\">#</a> 1.4 申请简介</h2>\n<ul>\n<li>申请的订单每周由管理员负责清空。</li>\n<li>学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段（上午、下午）</li>\n<li>教师来审核预约，依据实际情况审核预约通过或者不通过</li>\n</ul>\n<h2 id=\"15-系统具体需求\"><a class=\"anchor\" href=\"#15-系统具体需求\">#</a> 1.5 系统具体需求</h2>\n<ul>\n<li>首先进入登录界面，可选登录身份有：\n<ul>\n<li>学生代表</li>\n<li>老师</li>\n<li>管理员</li>\n<li>退出</li>\n</ul>\n</li>\n<li>每个身份都需要进行验证后，进入子菜单\n<ul>\n<li>学生需要输入 ：学号、姓名、登录密码</li>\n<li>老师需要输入：职工号、姓名、登录密码</li>\n<li>管理员需要输入：管理员姓名、登录密码</li>\n</ul>\n</li>\n<li>学生具体功能\n<ul>\n<li>申请预约    ---   预约机房</li>\n<li>查看自身的预约    ---  查看自己的预约状态</li>\n<li>查看所有预约   ---   查看全部预约信息以及预约状态</li>\n<li>取消预约    ---   取消自身的预约，预约成功或审核中的预约均可取消</li>\n<li>注销登录    ---   退出登录</li>\n</ul>\n</li>\n<li>教师具体功能\n<ul>\n<li>查看所有预约   ---   查看全部预约信息以及预约状态</li>\n<li>审核预约    ---   对学生的预约进行审核</li>\n<li>注销登录    ---   退出登录</li>\n</ul>\n</li>\n<li>管理员具体功能\n<ul>\n<li>添加账号    ---   添加学生或教师的账号，需要检测学生编号或教师职工号是否重复</li>\n<li>查看账号    ---   可以选择查看学生或教师的全部信息</li>\n<li>查看机房    ---   查看所有机房的信息</li>\n<li>清空预约    ---   清空所有预约记录</li>\n<li>注销登录    ---   退出登录</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161105998.png\" alt=\"\" /></p>\n<h1 id=\"2-创建项目\"><a class=\"anchor\" href=\"#2-创建项目\">#</a> 2、创建项目</h1>\n<p>创建项目步骤如下：</p>\n<ul>\n<li>创建新项目</li>\n<li>添加文件</li>\n</ul>\n<h1 id=\"3-创建主菜单\"><a class=\"anchor\" href=\"#3-创建主菜单\">#</a> 3、创建主菜单</h1>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>设计主菜单，与用户进行交互</li>\n</ul>\n<h2 id=\"31-菜单实现\"><a class=\"anchor\" href=\"#31-菜单实现\">#</a> 3.1 菜单实现</h2>\n<ul>\n<li>在主函数 main 中添加菜单提示，代码如下：</li>\n</ul>\n<pre><code class=\"language-C++\">int main() &#123;\n\tcout &lt;&lt; &quot;======================  欢迎来到传智播客机房预约系统  =====================&quot; \n         &lt;&lt; endl;\n\tcout &lt;&lt; endl &lt;&lt; &quot;请输入您的身份&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;\\t\\t -------------------------------\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|          1.学生代表           |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|          2.老    师           |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|          3.管 理 员           |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|          0.退    出           |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n\tcout &lt;&lt; &quot;\\t\\t -------------------------------\\n&quot;;\n\tcout &lt;&lt; &quot;输入您的选择: &quot;;\n\n\tsystem(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"32-搭建接口\"><a class=\"anchor\" href=\"#32-搭建接口\">#</a> 3.2 搭建接口</h2>\n<ul>\n<li>接受用户的选择，搭建接口</li>\n<li>在 main 中添加代码</li>\n</ul>\n<pre><code class=\"language-C++\">int main() &#123;\n  int select = 0;  // 用于接收用户的选择\n  while (true) &#123;\n    cout &lt;&lt; &quot;======================  欢迎来到传智播客机房预约系统  =====================&quot;\n         &lt;&lt; endl;\n    cout &lt;&lt; endl\n         &lt;&lt; &quot;请输入您的身份&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;\\t\\t -------------------------------\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|          1.学生代表           |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|          2.老    师           |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|          3.管 理 员           |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|          0.退    出           |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t|                               |\\n&quot;;\n    cout &lt;&lt; &quot;\\t\\t -------------------------------\\n&quot;;\n    cout &lt;&lt; &quot;输入您的选择: &quot;;\n\n    cin &gt;&gt; select;     // 接收用户选择\n    switch (select) &#123;  // 根据用户选择实现不同接口\n      case 1:          // 学生身份\n        break;\n      case 2:  // 老师身份\n        break;\n      case 3:  // 管理员身份\n        break;\n      case 0:  // 退出系统\n        break;\n      default:\n        cout &lt;&lt; &quot;输入有误，请重新选择！&quot; &lt;&lt; endl;\n        system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n        system(&quot;clear&quot;);\n        break;\n    &#125;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  return 0;\n&#125;\n\n</code></pre>\n<p>测试，输入 0、1、2、3 会重新回到界面，输入其他提示输入有误，清屏后重新选择</p>\n<p>至此，界面搭建完毕</p>\n<h1 id=\"4-退出功能实现\"><a class=\"anchor\" href=\"#4-退出功能实现\">#</a> 4、退出功能实现</h1>\n<h2 id=\"41-退出功能实现\"><a class=\"anchor\" href=\"#41-退出功能实现\">#</a> 4.1 退出功能实现</h2>\n<p>在 main 函数分支 0 选项中，添加退出程序的代码：</p>\n<pre><code class=\"language-C++\">case 0:  // 退出系统\n  cout &lt;&lt; &quot;欢迎下一次使用&quot; &lt;&lt; endl;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  return 0;\n  break;\n</code></pre>\n<h2 id=\"42-测试退出功能\"><a class=\"anchor\" href=\"#42-测试退出功能\">#</a> 4.2 测试退出功能</h2>\n<p>运行程序，效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161140494.png\" alt=\"\" /></p>\n<p>至此，退出程序功能实现</p>\n<h2 id=\"5-创建身份类\"><a class=\"anchor\" href=\"#5-创建身份类\">#</a> 5、创建身份类</h2>\n<h3 id=\"51-身份的基类\"><a class=\"anchor\" href=\"#51-身份的基类\">#</a> 5.1 身份的基类</h3>\n<ul>\n<li>\n<p>在整个系统中，有三种身份，分别为：学生代表、老师以及管理员</p>\n</li>\n<li>\n<p>三种身份有其共性也有其特性，因此我们可以将三种身份抽象出一个身份基类<strong> Identity</strong></p>\n<blockquote>\n<p>共性是在登录的时候他们都要输入自己的用户名和密码。特性是学生有学号，老师有职工号，在验证的时候这些都属于特性</p>\n</blockquote>\n</li>\n<li>\n<p>在头文件下创建 identity.h 文件</p>\n</li>\n</ul>\n<p>identity.h 中添加如下代码：</p>\n<pre><code class=\"language-C++\">#pragma once  // 防止头文件重复包含\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 身份抽象基类\nclass Identity &#123;\n public:\n  string m_Name;  // 用户名\n  string m_Pwd;   // 密码\n\n  // 操作菜单，纯虚函数\n  virtual void operMenu() = 0;\n&#125;;\n</code></pre>\n<h2 id=\"52-学生类\"><a class=\"anchor\" href=\"#52-学生类\">#</a> 5.2 学生类</h2>\n<h3 id=\"521-功能分析\"><a class=\"anchor\" href=\"#521-功能分析\">#</a> 5.2.1 功能分析</h3>\n<ul>\n<li>\n<p>学生类主要功能是可以通过类中成员函数，实现预约实验室操作</p>\n</li>\n<li>\n<p>学生类中主要功能有：</p>\n<ul>\n<li>显示学生操作的菜单界面</li>\n<li>申请预约</li>\n<li>查看自身预约</li>\n<li>查看所有预约</li>\n<li>取消预约</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"522-类的创建\"><a class=\"anchor\" href=\"#522-类的创建\">#</a> 5.2.2 类的创建</h3>\n<ul>\n<li>在头文件以及源文件下创建 student.h 和 student.cpp 文件</li>\n</ul>\n<p>student.h 中添加如下代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;identity.h&quot;\n\n// 学生类\nclass Student : public Identity &#123;\n public:\n  Student();\n  // 有参构造参数：学号、姓名、密码\n  Student(int id, string name, string pwd);\n\n  // 菜单界面\n  virtual void operMenu();\n  // 学生的学号\n  int m_Id;\n  // 申请预约\n  void applyOrder();\n  // 查看自身预约\n  void showMyOrder();\n  // 查看所有预约\n  void showAllOrder();\n  // 取消预约\n  void cancelOrder();\n&#125;;\n</code></pre>\n<p>student.cpp 中添加如下代码：</p>\n<pre><code class=\"language-C++\">#include &quot;student.h&quot;\n\nStudent::Student() &#123;&#125;\n// 有参构造参数：学号、姓名、密码\nStudent::Student(int id, string name, string pwd) &#123;&#125;\n\n// 菜单界面\nvoid Student::operMenu() &#123;&#125;\n// 申请预约\nvoid Student::applyOrder() &#123;&#125;\n// 查看自身预约\nvoid Student::showMyOrder() &#123;&#125;\n// 查看所有预约\nvoid Student::showAllOrder() &#123;&#125;\n// 取消预约\nvoid Student::cancelOrder() &#123;&#125;\n</code></pre>\n<h2 id=\"53-老师类\"><a class=\"anchor\" href=\"#53-老师类\">#</a> 5.3 老师类</h2>\n<h3 id=\"531-功能分析\"><a class=\"anchor\" href=\"#531-功能分析\">#</a> 5.3.1 功能分析</h3>\n<ul>\n<li>\n<p>教师类主要功能是查看学生的预约，并进行审核</p>\n</li>\n<li>\n<p>教师类中主要功能有：</p>\n<ul>\n<li>\n<p>显示教师操作的菜单界面</p>\n</li>\n<li>\n<p>查看所有预约</p>\n</li>\n<li>\n<p>审核预约</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"532-类的创建\"><a class=\"anchor\" href=\"#532-类的创建\">#</a> 5.3.2 类的创建</h3>\n<ul>\n<li>在头文件以及源文件下创建 teacher.h 和 teacher.cpp 文件</li>\n</ul>\n<p>teacher.h 中添加如下代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;identity.h&quot;\n\n// 教师类设计\nclass Teacher : public Identity &#123;\n public:\n  Teacher();\n  Teacher(int empId, string name, string pwd);\n\n  int m_EmpId;  // 职工号\n\n  // 菜单界面\n  virtual void operMenu();\n  // 查看所有预约\n  void showAllOrder();\n  // 审核预约\n  void validOrder();\n&#125;;\n</code></pre>\n<ul>\n<li>teacher.cpp 中添加如下代码:</li>\n</ul>\n<pre><code class=\"language-C++\">#include &quot;teacher.h&quot;\n\nTeacher::Teacher() &#123;&#125;\nTeacher::Teacher(int empId, string name, string pwd) &#123;&#125;\n\n// 菜单界面\nvoid Teacher::operMenu() &#123;&#125;\n// 查看所有预约\nvoid Teacher::showAllOrder() &#123;&#125;\n// 审核预约\nvoid Teacher::validOrder() &#123;&#125;\n</code></pre>\n<h2 id=\"54-管理员类\"><a class=\"anchor\" href=\"#54-管理员类\">#</a> 5.4 管理员类</h2>\n<h3 id=\"541-功能分析\"><a class=\"anchor\" href=\"#541-功能分析\">#</a> 5.4.1 功能分析</h3>\n<ul>\n<li>\n<p>管理员类主要功能是对学生和老师账户进行管理，查看机房信息以及清空预约记录</p>\n</li>\n<li>\n<p>管理员类中主要功能有：</p>\n<ul>\n<li>\n<p>显示管理员操作的菜单界面</p>\n</li>\n<li>\n<p>添加账号</p>\n</li>\n<li>\n<p>查看账号</p>\n</li>\n<li>\n<p>查看机房信息</p>\n</li>\n<li>\n<p>清空预约记录</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"542-类的创建\"><a class=\"anchor\" href=\"#542-类的创建\">#</a> 5.4.2 类的创建</h3>\n<ul>\n<li>在头文件以及源文件下创建 manager.h 和 manager.cpp 文件</li>\n</ul>\n<p>manager.h 中添加如下代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;identity.h&quot;\n\n// 管理员类设计\nclass Manager : public Identity &#123;\n public:\n  Manager();\n  Manager(string name, string pwd);\n\n  // 菜单界面\n  virtual void operMenu();\n  // 添加账号\n  void addPerson();\n  // 查看账号\n  void showPerson();\n  // 查看机房信息\n  void showComputer();\n  // 清空预约记录\n  void cleanFile();\n&#125;;\n</code></pre>\n<p>manager.cpp 中添加如下代码:</p>\n<pre><code class=\"language-C++\">#include &quot;manager.h&quot;\n\nManager::Manager() &#123;&#125;\nManager::Manager(string name, string pwd) &#123;&#125;\n\n// 菜单界面\nvoid Manager::operMenu() &#123;&#125;\n// 添加账号\nvoid Manager::addPerson() &#123;&#125;\n// 查看账号\nvoid Manager::showPerson() &#123;&#125;\n// 查看机房信息\nvoid Manager::showComputer() &#123;&#125;\n// 清空预约记录\nvoid Manager::cleanFile() &#123;&#125;\n</code></pre>\n<p>至此，所有身份类创建完毕</p>\n<h1 id=\"6-登录模块\"><a class=\"anchor\" href=\"#6-登录模块\">#</a> 6、 登录模块</h1>\n<h2 id=\"61-全局文件添加\"><a class=\"anchor\" href=\"#61-全局文件添加\">#</a> 6.1 全局文件添加</h2>\n<p>功能描述：</p>\n<ul>\n<li>不同的身份可能会用到不同的文件操作，我们可以将所有的文件名定义到一个全局的文件中</li>\n<li>在头文件中添加 <strong>globalFile.h</strong> 文件</li>\n<li>并添加如下代码：</li>\n</ul>\n<pre><code class=\"language-C++\">#pragma once\n\n// 管理员文件\n#define ADMIN_FILE &quot;admin.txt&quot;\n// 学生文件\n#define STUDENT_FILE &quot;student.txt&quot;\n// 教师文件\n#define TEACHER_FILE &quot;teacher.txt&quot;\n// 机房信息文件\n#define COMPUTER_FILE &quot;computerRoom.txt&quot;\n// 订单文件\n#define ORDER_FILE &quot;order.txt&quot;\n</code></pre>\n<p>并且在同级目录下，创建这几个.txt 文件</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161614565.png\" alt=\"\" /></p>\n<h2 id=\"62-登录函数封装\"><a class=\"anchor\" href=\"#62-登录函数封装\">#</a> 6.2 登录函数封装</h2>\n<p>功能描述：</p>\n<ul>\n<li>根据用户的选择，进入不同的身份登录</li>\n</ul>\n<p>main.cpp 文件中添加全局函数  <code>void login(string fileName, int type)</code></p>\n<p>参数：</p>\n<ul>\n<li>fileName  --- 操作的文件名</li>\n<li>type      ---  登录的身份  （1 代表学生、2 代表老师、3 代表管理员）</li>\n</ul>\n<p>Login 中添加如下代码：</p>\n<pre><code class=\"language-C++\">#include &quot;globalFile.h&quot;\n#include &quot;identity.h&quot;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\n// 登录功能：参数1.操作文件名，参数2.操作身份类型\nvoid login(string fileName, int type) &#123;\n  Identity* person = NULL;  // 父类指针，用于指向子类对象\n\n  // 读文件\n  ifstream ifs;\n  ifs.open(fileName, ios::in);\n  // 判断文件是否存在\n  if (!ifs.is_open()) &#123;\n    cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;\n    ifs.close();\n    return;\n  &#125;\n  // 准备接收用户的信息\n  int id = 0;\n  string name;\n  string pwd;\n  // 判断身份\n  if (type == 1) &#123;  // 学生身份\n    cout &lt;&lt; &quot;请输入你的学号：&quot; &lt;&lt; endl;\n    cin &gt;&gt; id;\n  &#125; else if (type == 2) &#123;\n    cout &lt;&lt; &quot;请输入您的职工号：&quot; &lt;&lt; endl;\n    cin &gt;&gt; id;\n  &#125;\n  cout &lt;&lt; &quot;请输入用户名：&quot; &lt;&lt; endl;\n  cin &gt;&gt; name;\n  cout &lt;&lt; &quot;请输入密码：&quot; &lt;&lt; endl;\n  cin &gt;&gt; pwd;\n  if (type == 1) &#123;\n    // 学生身份验证\n  &#125; else if (type == 2) &#123;\n    // 教师身份验证\n  &#125; else if (type == 3) &#123;\n    // 管理员身份验证\n  &#125;\n  cout &lt;&lt; &quot;验证登录失败！&quot; &lt;&lt; endl;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n  return;\n&#125;\n</code></pre>\n<ul>\n<li>\n<p>在 main 函数的不同分支中，填入不同的登录接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>          <span class=\"token comment\">// 学生身份</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>STUDENT_FILE<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 老师身份</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>TEACHER_FILE<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 管理员身份</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>ADMIN_FILE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"63-学生登录实现\"><a class=\"anchor\" href=\"#63-学生登录实现\">#</a> 6.3 学生登录实现</h2>\n<p>在 student.txt 文件中添加两条学生信息，用于测试</p>\n<p>添加信息:</p>\n<pre><code class=\"language-c++\">1 张三 123\n2 李四 123456\n</code></pre>\n<p>其中：</p>\n<ul>\n<li>第一列  代表  <strong>学号</strong></li>\n<li>第二列  代表  <strong>学生姓名</strong></li>\n<li>第三列  代表  <strong>密码</strong></li>\n</ul>\n<p>效果图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161706958.png\" alt=\"\" /></p>\n<p>在 login 函数的学生分支中加入如下代码，验证学生身份</p>\n<pre><code class=\"language-C++\">if (type == 1) &#123;\n  // 学生身份验证\n  int fId;       // 从文件中读取的id号\n  string fName;  // 从文件中获取的姓名\n  string fPwd;   // 从文件中获取密码\n  while (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd) &#123;\n    // 与用户输入的信息做对比\n    if (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd) &#123;\n      cout &lt;&lt; &quot;学生验证登录成功&quot; &lt;&lt; endl;\n      system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n      system(&quot;clear&quot;);\n      person = new Student(id, name, pwd);\n      // 进入学生身份的子菜单\n\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"64-教师登录实现\"><a class=\"anchor\" href=\"#64-教师登录实现\">#</a> 6.4 教师登录实现</h2>\n<p>在 teacher.txt 文件中添加一条老师信息，用于测试</p>\n<p>添加信息:</p>\n<pre><code class=\"language-c++\">1 老王 123\n</code></pre>\n<p>其中：</p>\n<ul>\n<li>第一列  代表  <strong>教师职工编号</strong></li>\n<li>第二列  代表  <strong>教师姓名</strong></li>\n<li>第三列  代表  <strong>密码</strong></li>\n</ul>\n<p>效果图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161715315.png\" alt=\"\" /></p>\n<p>在 login 函数的教师分支中加入如下代码，验证教师身份</p>\n<pre><code class=\"language-c++\">else if (type == 2) &#123;\n  // 教师身份验证\n  int fId;       // 从文件中获取的id号\n  string fName;  // 从文件中获取的姓名\n  string fPwd;   // 从文件中获取的密码\n  while (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd) &#123;\n    if (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd) &#123;\n      cout &lt;&lt; &quot;教师验证登录成功&quot; &lt;&lt; endl;\n      system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n      system(&quot;clear&quot;);\n      person = new Teacher(id, name, pwd);\n      // 进入教师子菜单\n\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"65-管理员登录实现\"><a class=\"anchor\" href=\"#65-管理员登录实现\">#</a> 6.5 管理员登录实现</h2>\n<p>在 admin.txt 文件中添加一条管理员信息，由于我们只有一条管理员，因此本案例中没有添加管理员的功能</p>\n<p>添加信息:</p>\n<pre><code class=\"language-C++\">admin 123\n</code></pre>\n<p>其中： <code>admin</code>  代表管理员用户名， <code>123</code>  代表管理员密码</p>\n<p>效果图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161721852.png\" alt=\"\" /></p>\n<p>在 login 函数的管理员分支中加入如下代码，验证管理员身份</p>\n<pre><code class=\"language-C++\">else if (type == 3) &#123;\n  // 管理员身份验证\n  string fName;  // 从文件中获取的姓名\n  string fPwd;   // 从文件中获取密码\n  while (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd) &#123;\n    if (name == fName &amp;&amp; pwd == fPwd) &#123;\n      cout &lt;&lt; &quot;管理员验证登录成功！&quot; &lt;&lt; endl;\n      system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n      system(&quot;clear&quot;);\n      person = new Manager(name, pwd);\n\n      // 进入管理员子菜单界面\n\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>至此，所有身份的登录功能全部实现！</p>\n<h1 id=\"7-管理员模块\"><a class=\"anchor\" href=\"#7-管理员模块\">#</a> 7、管理员模块</h1>\n<h2 id=\"71-管理员登录和注销\"><a class=\"anchor\" href=\"#71-管理员登录和注销\">#</a> 7.1 管理员登录和注销</h2>\n<h3 id=\"711-构造函数\"><a class=\"anchor\" href=\"#711-构造函数\">#</a> 7.1.1 构造函数</h3>\n<p>在 Manager 类的构造函数中，初始化管理员信息，代码如下：</p>\n<pre><code class=\"language-C++\">Manager::Manager(string name, string pwd) &#123;\n  // 初始化管理员信息\n  this-&gt;m_Name = name;\n  this-&gt;m_Pwd = pwd;  // 现阶段Manager类中的m_Pwd没被用到，但后续可能会增加修改密码的需求，所以还是一并初始化比较好\n&#125;\n</code></pre>\n<h3 id=\"712-管理员子菜单\"><a class=\"anchor\" href=\"#712-管理员子菜单\">#</a> 7.1.2 管理员子菜单</h3>\n<ul>\n<li>main.cpp 中，当用户登录的是管理员，添加管理员菜单接口</li>\n<li>将不同的分支提供出来\n<ul>\n<li>添加账号</li>\n<li>查看账号</li>\n<li>查看机房</li>\n<li>清空预约</li>\n<li>注销登录</li>\n</ul>\n</li>\n<li>实现注销功能</li>\n</ul>\n<p>添加全局函数  <code>void managerMenu(Identity*&amp; manager)</code> ，代码如下：</p>\n<pre><code class=\"language-C++\">// 进入管理员子菜单界面\nvoid managerMenu(Identity*&amp; manager) &#123;\n  while (true) &#123;\n    // 调用管理员子菜单\n    manager-&gt;operMenu();  // 利用多态。父类指针调用子类接口\n\n    // 因为父类指针只能调用公共的重写的内容，要调用子类的内容还要转回去\n    // 将父类的指针转为子类指针，调用子类里其他特有接口\n    Manager* man = (Manager*)manager;\n\n    int select = 0;\n    cin &gt;&gt; select;\n    if (select == 1) &#123;  // 添加账号\n      cout &lt;&lt; &quot;添加账号&quot; &lt;&lt; endl;\n      man-&gt;addPerson();\n    &#125; else if (select == 2) &#123;  // 查看账号\n      cout &lt;&lt; &quot;查看账号&quot; &lt;&lt; endl;\n      man-&gt;showPerson();\n    &#125; else if (select == 3) &#123;  // 查看机房\n      cout &lt;&lt; &quot;查看机房&quot; &lt;&lt; endl;\n      man-&gt;showComputer();\n    &#125; else if (select == 4) &#123;  // 清空预约\n      cout &lt;&lt; &quot;清空预约&quot; &lt;&lt; endl;\n      man-&gt;cleanFile();\n    &#125; else &#123;           // 注销\n      delete manager;  // 销毁掉堆区对象\n      cout &lt;&lt; &quot;注销成功&quot; &lt;&lt; endl;\n      system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n      system(&quot;clear&quot;);\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>void managerMenu (Identity*&amp; manager) 的形参 <code>Identity*&amp; manager</code>  是一个引用指针的声明</p>\n<ol>\n<li>\n<p><strong>引用指针</strong>： <code>Identity*&amp;</code>  表示  <code>manager</code>  是一个指向  <code>Identity</code>  类型的指针的引用。这意味着  <code>manager</code>  本身是一个指针，但它是通过引用来传递的。任何对  <code>manager</code>  的修改都会影响到原始指针。</p>\n</li>\n<li>\n<p><strong>用途</strong>：使用引用指针的主要目的是为了能够在函数内部修改指针的指向，而不需要返回新的指针。例如，如果在  <code>managerMenu</code>  函数中重新分配  <code>manager</code>  指向一个新的  <code>Identity</code>  对象，这种修改会反映到调用该函数的上下文中。</p>\n</li>\n<li>\n<p><strong>示例</strong>：假设你在  <code>managerMenu</code>  函数中想要将  <code>manager</code>  指向一个新的  <code>Manager</code>  对象，你可以这样做：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">managerMenu</span><span class=\"token punctuation\">(</span>Identity<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> manager<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    manager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Manager</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改 manager 的指向</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>在 login 函数中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Manager</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> pwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 进入管理员子菜单界面</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">managerMenu</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>若 managerMenu 函数的形参类型为 <code>Identity*</code> ，那么 <code>Identity* manager = person</code>  相当于拷贝构造出一个新 Identity 对象，在 managerMenu 函数内修改 manager 指向不会影响外层 login 函数的 person 指向</p>\n</blockquote>\n<h3 id=\"713-菜单功能实现\"><a class=\"anchor\" href=\"#713-菜单功能实现\">#</a> 7.1.3 菜单功能实现</h3>\n<p>在实现成员函数 <code>void Manager::operMenu()</code>  代码如下：</p>\n<pre><code class=\"language-c++\">// 菜单界面\nvoid Manager::operMenu() &#123;\n  cout &lt;&lt; &quot;欢迎管理员：&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;登录！&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;\\t\\t ---------------------------------\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          1.添加账号            |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          2.查看账号            |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          3.查看机房            |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          4.清空预约            |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          0.注销登录            |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t ---------------------------------\\n&quot;;\n  cout &lt;&lt; &quot;请选择您的操作： &quot; &lt;&lt; endl;\n&#125;\n</code></pre>\n<h3 id=\"714-接口对接\"><a class=\"anchor\" href=\"#714-接口对接\">#</a> 7.1.4 接口对接</h3>\n<ul>\n<li>\n<p>管理员成功登录后，调用管理员子菜单界面</p>\n</li>\n<li>\n<p>在管理员登录验证分支中，添加代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 进入管理员子菜单界面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">managerMenu</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>添加效果如：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161832198.png\" alt=\"\" /></p>\n<p>至此，管理员身份可以成功登录以及注销</p>\n<h2 id=\"72-添加账号\"><a class=\"anchor\" href=\"#72-添加账号\">#</a> 7.2 添加账号</h2>\n<p>功能描述：</p>\n<ul>\n<li>给学生或教师添加新的账号</li>\n</ul>\n<p>功能要求：</p>\n<ul>\n<li>添加时学生学号不能重复、教师职工号不能重复</li>\n</ul>\n<h3 id=\"721-添加功能实现\"><a class=\"anchor\" href=\"#721-添加功能实现\">#</a> 7.2.1 添加功能实现</h3>\n<p>在 Manager 的<strong> addPerson</strong> 成员函数中，实现添加新账号功能，代码如下：</p>\n<pre><code class=\"language-C++\">// 添加账号\nvoid Manager::addPerson() &#123;\n  cout &lt;&lt; &quot;请输入添加账号类型&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;1、添加学生&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;2、添加老师&quot; &lt;&lt; endl;\n\n  string fileName;  // 操作的文件名\n  string tip;       // 提示id号\n  ofstream ofs;     // 文件操作对象\n\n  int select = 0;\n  cin &gt;&gt; select;\n  if (select == 1) &#123;\n    // 添加的是学生\n    fileName = STUDENT_FILE;\n    tip = &quot;请输入学号：&quot;;\n  &#125; else &#123;\n    fileName = TEACHER_FILE;\n    tip = &quot;请输入职工编号：&quot;;\n  &#125;\n\n  ofs.open(fileName, ios::out | ios::app);  // 利用追加的方式写文件\n\n  int id;       // 学号 / 职工号\n  string name;  // 姓名\n  string pwd;   // 密码\n  cout &lt;&lt; tip &lt;&lt; endl;\n  cin &gt;&gt; id;\n  cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;\n  cin &gt;&gt; name;\n  cout &lt;&lt; &quot;请输入密码：&quot; &lt;&lt; endl;\n  cin &gt;&gt; pwd;\n\n  // 向文件中添加数据\n  ofs &lt;&lt; id &lt;&lt; &quot; &quot; &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; pwd &lt;&lt; endl;\n  cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; endl;\n  ofs.close();\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<p>测试添加学生：</p>\n<p>成功在学生文件中添加了一条信息</p>\n<p>测试添加教师：</p>\n<p>成功在教师文件中添加了一条信息</p>\n<h3 id=\"722-去重操作\"><a class=\"anchor\" href=\"#722-去重操作\">#</a> 7.2.2 去重操作</h3>\n<p>功能描述：添加新账号时，如果是重复的学生编号，或是重复的教师职工编号，提示有误</p>\n<h4 id=\"7221-读取信息\"><a class=\"anchor\" href=\"#7221-读取信息\">#</a> 7.2.2.1 读取信息</h4>\n<ul>\n<li>要去除重复的账号，首先要先将学生和教师的账号信息获取到程序中，方可检测</li>\n<li>在 manager.h 中，添加两个容器，用于存放学生和教师的信息</li>\n<li>添加一个新的成员函数   <code>void initVector()</code>  初始化容器</li>\n</ul>\n<pre><code class=\"language-C++\">// 初始化容器\nvoid initVector();\nvector&lt;Student&gt; vStu;  // 从student.txt读出的所有学生的容器\nvector&lt;Teacher&gt; vTea;  // 从teacher.txt读出的所有老师的容器\n</code></pre>\n<p>在 Manager 的有参构造函数中，获取目前的学生和教师信息</p>\n<p>代码如下：</p>\n<pre><code class=\"language-C++\">// 初始化容器\nvoid Manager::initVector() &#123;\n  vStu.clear();\n  vTea.clear();\n  // 先确保这两个容器清空状态，然后再从文件中获取这些信息\n  // 读取信息：学生\n  ifstream ifs;\n  ifs.open(STUDENT_FILE, ios::in);\n  if (!ifs.is_open()) &#123;\n    cout &lt;&lt; &quot;文件读取失败&quot; &lt;&lt; endl;\n    return;\n  &#125;\n  Student s;\n  while (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp; ifs &gt;&gt; s.m_Pwd) &#123;\n    vStu.push_back(s);\n  &#125;\n  cout &lt;&lt; &quot;当前学生数量为：&quot; &lt;&lt; vStu.size() &lt;&lt; endl;\n  ifs.close();\n\n  // 读取信息：老师\n  ifs.open(TEACHER_FILE, ios::in);\n  Teacher t;\n  while (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp; ifs &gt;&gt; t.m_Pwd) &#123;\n    vTea.push_back(t);\n  &#125;\n  cout &lt;&lt; &quot;当前老师数量为：&quot; &lt;&lt; vTea.size() &lt;&lt; endl;\n  ifs.close();\n&#125;\n</code></pre>\n<p>在有参构造函数中，调用初始化容器函数</p>\n<pre><code class=\"language-C++\">Manager::Manager(string name, string pwd) &#123;\n  this-&gt;m_Name = name;\n  this-&gt;m_Pwd = pwd;\n\n  // 初始化容器，获取到所有文件中学生、老师信息\n  this-&gt;initVector();\n&#125;\n</code></pre>\n<p>测试，运行代码可以看到测试代码获取当前学生和教师数量</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161903169.png\" alt=\"\" /></p>\n<h4 id=\"7222-去重函数封装\"><a class=\"anchor\" href=\"#7222-去重函数封装\">#</a> 7.2.2.2 去重函数封装</h4>\n<p>在 manager.h 文件中添加成员函数 <code> bool checkRepeat(int id, int type);</code></p>\n<pre><code class=\"language-C++\">// 检测重复：参数1.待检测的是否与文件记录有重复的学号 / 职工号，参数2.检测类型\nbool checkRepeat(int id, int type);\n</code></pre>\n<p>在 manager.cpp 文件中实现成员函数   <code> bool checkRepeat(int id, int type);</code></p>\n<pre><code class=\"language-C++\">// 检测重复：参数1.待检测的是否与文件记录有重复的学号 / 职工号，参数2.检测类型\nbool Manager::checkRepeat(int id, int type) &#123;\n  if (type == 1) &#123;\n    // 检测学生\n    for (vector&lt;Student&gt;::iterator it = vStu.begin(); it != vStu.end(); it++) &#123;\n      if (id == it-&gt;m_Id) &#123;\n        return true;\n      &#125;\n    &#125;\n  &#125; else &#123;\n    // 检测老师\n    for (vector&lt;Teacher&gt;::iterator it = vTea.begin(); it != vTea.end(); it++) &#123;\n      if (id == it-&gt;m_EmpId) &#123;\n        return true;\n      &#125;\n    &#125;\n  &#125;\n  return false;\n&#125;\n</code></pre>\n<h4 id=\"7223-添加去重操作\"><a class=\"anchor\" href=\"#7223-添加去重操作\">#</a> 7.2.2.3 添加去重操作</h4>\n<p>在添加学生编号或者教师职工号时，检测是否有重复，代码如下：</p>\n<pre><code class=\"language-C++\">string errorTip;  // 重复错误提示\nofstream ofs;     // 文件操作对象\n\nint select = 0;\ncin &gt;&gt; select;\nif (select == 1) &#123;\n  // 添加的是学生\n  fileName = STUDENT_FILE;\n  tip = &quot;请输入学号：&quot;;\n  errorTip = &quot;学号重复，请重新输入&quot;;\n&#125; else &#123;\n  fileName = TEACHER_FILE;\n  tip = &quot;请输入职工编号：&quot;;\n  errorTip = &quot;职工号重复，请重新输入&quot;;\n&#125;\n\nofs.open(fileName, ios::out | ios::app);  // 利用追加的方式写文件\n\nint id;       // 学号 / 职工号\nstring name;  // 姓名\nstring pwd;   // 密码\n\ncout &lt;&lt; tip &lt;&lt; endl;\nwhile (true) &#123;\n  cin &gt;&gt; id;\n  bool ret = checkRepeat(id, select);\n  if (ret) &#123;  // 有重复\n    cout &lt;&lt; errorTip &lt;&lt; endl;\n  &#125; else &#123;\n    break;\n  &#125;\n&#125;\n</code></pre>\n<p>代码位置如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161925633.png\" alt=\"\" /></p>\n<h4 id=\"7224-bug解决\"><a class=\"anchor\" href=\"#7224-bug解决\">#</a> 7.2.2.4 bug 解决</h4>\n<p>bug 描述：</p>\n<ul>\n<li>虽然可以检测重复的账号，但是刚添加的账号由于没有更新到容器中，因此不会做检测</li>\n<li>导致刚加入的账号的学生号或者职工编号，再次添加时依然可以重复</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>在每次添加新账号时，重新初始化容器</li>\n</ul>\n<p>在添加完毕后，加入代码：</p>\n<pre><code class=\"language-C++\">// 调用初始化容器的接口，重新获取文件中的数据\nthis-&gt;initVector();\n</code></pre>\n<p>位置如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411161930542.png\" alt=\"\" /></p>\n<p>再次测试，刚加入的账号不会重复添加了！</p>\n<h2 id=\"73-显示账号\"><a class=\"anchor\" href=\"#73-显示账号\">#</a> 7.3 显示账号</h2>\n<p>功能描述：显示学生信息或教师信息</p>\n<h3 id=\"731-显示功能实现\"><a class=\"anchor\" href=\"#731-显示功能实现\">#</a> 7.3.1 显示功能实现</h3>\n<p>在 Manager 的<strong> showPerson</strong> 成员函数中，实现显示账号功能，代码如下：</p>\n<pre><code class=\"language-C++\">void printStudent(Student&amp; s) &#123;\n  cout &lt;&lt; &quot;学号：&quot; &lt;&lt; s.m_Id &lt;&lt; &quot; 姓名：&quot; &lt;&lt; s.m_Name &lt;&lt; &quot; 密码：&quot; &lt;&lt; s.m_Pwd &lt;&lt; endl;\n&#125;\nvoid printTeacher(Teacher&amp; t) &#123;\n  cout &lt;&lt; &quot;职工号：&quot; &lt;&lt; t.m_EmpId &lt;&lt; &quot; 姓名：&quot; &lt;&lt; t.m_Name &lt;&lt; &quot; 密码：&quot; &lt;&lt; t.m_Pwd &lt;&lt; endl;\n&#125;\n// 查看账号\nvoid Manager::showPerson() &#123;\n  cout &lt;&lt; &quot;请选择查看内容：&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;1、查看所有学生&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;2、查看所有老师&quot; &lt;&lt; endl;\n\n  int select = 0;\n  cin &gt;&gt; select;\n  if (select == 1) &#123;\n    // 查看学生\n    cout &lt;&lt; &quot;所有学生信息如下：&quot; &lt;&lt; endl;\n    for_each(vStu.begin(), vStu.end(), printStudent);\n  &#125; else &#123;\n    // 查看老师\n    for_each(vTea.begin(), vTea.end(), printTeacher);\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h3 id=\"732-测试\"><a class=\"anchor\" href=\"#732-测试\">#</a> 7.3.2 测试</h3>\n<p>测试查看学生效果</p>\n<p>测试查看教师效果</p>\n<p>至此，显示账号功能实现完毕</p>\n<h2 id=\"74-查看机房\"><a class=\"anchor\" href=\"#74-查看机房\">#</a> 7.4 查看机房</h2>\n<h3 id=\"741-添加机房信息\"><a class=\"anchor\" href=\"#741-添加机房信息\">#</a> 7.4.1 添加机房信息</h3>\n<p>案例需求中，机房一共有三个，其中 1 号机房容量 20 台机器，2 号 50 台，3 号 100 台</p>\n<p>我们可以将信息录入到 computerRoom.txt 中</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1 20</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2 50</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3 100</pre></td></tr></table></figure><h3 id=\"742-机房类创建\"><a class=\"anchor\" href=\"#742-机房类创建\">#</a> 7.4.2 机房类创建</h3>\n<p>在头文件下，创建新的文件 computerRoom.h</p>\n<p>并添加如下代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 机房类\nclass ComputerRoom &#123;\n public:\n  int m_ComId;   // 机房id号\n  int m_MaxNum;  // 机房最大容量\n&#125;;\n</code></pre>\n<h3 id=\"743-初始化机房信息\"><a class=\"anchor\" href=\"#743-初始化机房信息\">#</a> 7.4.3 初始化机房信息</h3>\n<p>在 Manager 管理员类下，添加机房的容器，用于保存机房信息</p>\n<pre><code class=\"language-C++\">// 从computerRoom.txt文件中获取的机房信息\nvector&lt;ComputerRoom&gt; vCom;\n</code></pre>\n<p>在 Manager 有参构造函数中，追加如下代码，初始化机房信息</p>\n<pre><code class=\"language-C++\">// 初始化机房信息\nifstream ifs;\nifs.open(COMPUTER_FILE, ios::in);\nComputerRoom com;\nwhile (ifs &gt;&gt; com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_MaxNum) &#123;\n  this-&gt;vCom.push_back(com);\n&#125;\nifs.close();\ncout &lt;&lt; &quot;机房的数量为：&quot; &lt;&lt; vCom.size() &lt;&lt; endl;\n</code></pre>\n<p>因为机房信息目前版本不会有所改动，如果后期有修改功能，最好封装到一个函数中，方便维护</p>\n<h3 id=\"744-显示机房信息\"><a class=\"anchor\" href=\"#744-显示机房信息\">#</a> 7.4.4 显示机房信息</h3>\n<p>在 Manager 类的 showComputer 成员函数中添加如下代码：</p>\n<pre><code class=\"language-C++\">// 查看机房信息\nvoid Manager::showComputer() &#123;\n  cout &lt;&lt; &quot;机房的信息如下：&quot; &lt;&lt; endl;\n  for (vector&lt;ComputerRoom&gt;::iterator it = vCom.begin(); it != vCom.end(); it++) &#123;\n    cout &lt;&lt; &quot;机房编号：&quot; &lt;&lt; it-&gt;m_ComId &lt;&lt; &quot; 机房最大容量：&quot; &lt;&lt; it-&gt;m_MaxNum &lt;&lt; endl;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"75-清空预约\"><a class=\"anchor\" href=\"#75-清空预约\">#</a> 7.5 清空预约</h2>\n<p>功能描述：</p>\n<p>清空生成的 <code>order.txt</code>  预约文件</p>\n<h3 id=\"751-清空功能实现\"><a class=\"anchor\" href=\"#751-清空功能实现\">#</a> 7.5.1 清空功能实现</h3>\n<p>在 Manager 的 cleanFile 成员函数中添加如下代码：</p>\n<pre><code class=\"language-C++\">// 清空预约记录\nvoid Manager::cleanFile() &#123;\n  ofstream ofs(ORDER_FILE, ios::trunc);\n  ofs.close();\n\n  cout &lt;&lt; &quot;清空成功！&quot; &lt;&lt; endl;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<p>测试清空，可以随意写入一些信息在 order.txt 中，然后调用 cleanFile 清空文件接口，查看是否清空干净</p>\n<h1 id=\"8-学生模块\"><a class=\"anchor\" href=\"#8-学生模块\">#</a> 8、学生模块</h1>\n<h2 id=\"81-学生登录和注销\"><a class=\"anchor\" href=\"#81-学生登录和注销\">#</a> 8.1 学生登录和注销</h2>\n<h3 id=\"811-构造函数\"><a class=\"anchor\" href=\"#811-构造函数\">#</a> 8.1.1 构造函数</h3>\n<p>在 Student 类的构造函数中，初始化学生信息，代码如下：</p>\n<pre><code class=\"language-c++\">// 有参构造参数：学号、姓名、密码\nStudent::Student(int id, string name, string pwd) &#123;\n  this-&gt;m_Id = id;\n  this-&gt;m_Name = name;\n  this-&gt;m_Pwd = pwd;\n&#125;\n</code></pre>\n<h3 id=\"812-管理员子菜单\"><a class=\"anchor\" href=\"#812-管理员子菜单\">#</a> 8.1.2 管理员子菜单</h3>\n<ul>\n<li>在机房预约系统.cpp 中，当用户登录的是学生，添加学生菜单接口</li>\n<li>将不同的分支提供出来\n<ul>\n<li>申请预约</li>\n<li>查看我的预约</li>\n<li>查看所有预约</li>\n<li>取消预约</li>\n<li>注销登录</li>\n</ul>\n</li>\n<li>实现注销功能</li>\n</ul>\n<p>添加全局函数  <code>void studentMenu(Identity*&amp; manager)</code>  代码如下：</p>\n<pre><code class=\"language-C++\">// 进入学生子菜单界面\nvoid studentMenu(Identity*&amp; student) &#123;\n  while (true) &#123;\n    // 调用学生子菜单\n    student-&gt;operMenu();\n\n    Student* stu = (Student*)student;\n\n    int select = 0;\n    cin &gt;&gt; select;      // 接收用户选择\n    if (select == 1) &#123;  // 申请预约\n      stu-&gt;applyOrder();\n    &#125; else if (select == 2) &#123;  // 查看自身预约\n      stu-&gt;showMyOrder();\n    &#125; else if (select == 3) &#123;  // 查看所有人预约\n      stu-&gt;showAllOrder();\n    &#125; else if (select == 4) &#123;  // 取消预约\n      stu-&gt;cancelOrder();\n    &#125; else &#123;\n      // 注销登录\n      delete student;  // 只用释放传进来的student = person = new Student(id, name, pwd);因为这个对象开辟在堆区。不用再单独放stu，因为这个指针和student指向同一块堆区内存\n      cout &lt;&lt; &quot;注销成功&quot; &lt;&lt; endl;\n      system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n      system(&quot;clear&quot;);\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"813-菜单功能实现\"><a class=\"anchor\" href=\"#813-菜单功能实现\">#</a> 8.1.3 菜单功能实现</h3>\n<ul>\n<li>在实现成员函数 <code>void Student::operMenu()</code>  代码如下：</li>\n</ul>\n<pre><code class=\"language-c++\">// 菜单界面\nvoid Student::operMenu() &#123;\n  cout &lt;&lt; &quot;欢迎学生代表：&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;登录！&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;\\t\\t ----------------------------------\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          1.申请预约              |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          2.查看我的预约          |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          3.查看所有预约          |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          4.取消预约              |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          0.注销登录              |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t ----------------------------------\\n&quot;;\n  cout &lt;&lt; &quot;请选择您的操作： &quot; &lt;&lt; endl;\n&#125;\n</code></pre>\n<h3 id=\"814-接口对接\"><a class=\"anchor\" href=\"#814-接口对接\">#</a> 8.1.4 接口对接</h3>\n<ul>\n<li>学生成功登录后，调用学生的子菜单界面</li>\n<li>在学生登录分支中，添加代码：</li>\n</ul>\n<pre><code class=\"language-c++\">// 进入学生身份的子菜单\nstudentMenu(person);\n</code></pre>\n<p>添加效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411162021107.png\" alt=\"\" /></p>\n<p>测试对接</p>\n<p>登录验证通过</p>\n<p>学生子菜单</p>\n<p>注销登录</p>\n<h2 id=\"82-申请预约\"><a class=\"anchor\" href=\"#82-申请预约\">#</a> 8.2 申请预约</h2>\n<h3 id=\"821-获取机房信息\"><a class=\"anchor\" href=\"#821-获取机房信息\">#</a> 8.2.1 获取机房信息</h3>\n<ul>\n<li>在申请预约时，学生可以看到机房的信息，因此我们需要让学生获取到机房的信息</li>\n</ul>\n<p>在 student.h 中添加新的成员函数如下：</p>\n<pre><code class=\"language-C++\">vector&lt;ComputerRoom&gt; vCom;  // 机房容器\n</code></pre>\n<p>在学生的有参构造函数中追加如下代码：</p>\n<pre><code class=\"language-C++\">// 初始化机房信息\nifstream ifs;\nifs.open(COMPUTER_FILE, ios::in);\nComputerRoom com;\nwhile (ifs &gt;&gt; com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_MaxNum) &#123;\n  vCom.push_back(com);  // 将读取的信息放入到容器中\n&#125;\nifs.close();\n</code></pre>\n<p>追加位置如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411162053430.png\" alt=\"\" /></p>\n<p>至此，vCom 容器中保存了所有机房的信息</p>\n<h3 id=\"822-预约功能实现\"><a class=\"anchor\" href=\"#822-预约功能实现\">#</a> 8.2.2 预约功能实现</h3>\n<p>在 student.cpp 中实现成员函数  <code>void Student::applyOrder()</code></p>\n<pre><code class=\"language-C++\">// 申请预约\nvoid Student::applyOrder() &#123;\n  int date = 0;      // 日期（周一到周五）\n  int interval = 0;  // 时间段（上午还是下午）\n  int room;          // 机房编号\n\n  cout &lt;&lt; &quot;机房开放时间为周一至周五！&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;请输入申请预约的时间&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;1、周一&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;2、周二&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;3、周三&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;4、周四&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;5、周五&quot; &lt;&lt; endl;\n  while (true) &#123;\n    cin &gt;&gt; date;\n    if (date &gt;= 1 &amp;&amp; date &lt;= 5) &#123;\n      break;\n    &#125;\n    cout &lt;&lt; &quot;输入有误，请重新输入&quot; &lt;&lt; endl;\n  &#125;\n\n  cout &lt;&lt; &quot;请输入申请预约的时间段：&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;1、上午&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;2、下午&quot; &lt;&lt; endl;\n  while (true) &#123;\n    cin &gt;&gt; interval;\n    if (interval &gt;= 1 &amp;&amp; interval &lt;= 2) &#123;\n      break;\n    &#125;\n    cout &lt;&lt; &quot;输入有误，请重新输入&quot; &lt;&lt; endl;\n  &#125;\n\n  cout &lt;&lt; &quot;请选择机房：&quot; &lt;&lt; endl;\n  for (size_t i = 0; i &lt; vCom.size(); i++) &#123;\n    cout &lt;&lt; vCom[i].m_ComId &lt;&lt; &quot;号机房容量为：&quot; &lt;&lt; vCom[i].m_MaxNum &lt;&lt; endl;\n  &#125;\n  while (true) &#123;\n    cin &gt;&gt; room;\n    if (room &gt;= 1 &amp;&amp; room &lt;= 3) &#123;\n      break;\n    &#125;\n    cout &lt;&lt; &quot;输入有误，请重新输入&quot; &lt;&lt; endl;\n  &#125;\n\n  cout &lt;&lt; &quot;预约成功！审核中&quot; &lt;&lt; endl;\n\n  ofstream ofs;\n  ofs.open(ORDER_FILE, ios::app);\n  ofs &lt;&lt; &quot;date:&quot; &lt;&lt; date &lt;&lt; &quot; &quot;;\n  ofs &lt;&lt; &quot;interval:&quot; &lt;&lt; interval &lt;&lt; &quot; &quot;;\n  ofs &lt;&lt; &quot;stuId:&quot; &lt;&lt; this-&gt;m_Id &lt;&lt; &quot; &quot;;\n  ofs &lt;&lt; &quot;stuName:&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; &quot;;\n  ofs &lt;&lt; &quot;roomId:&quot; &lt;&lt; room &lt;&lt; &quot; &quot;;\n  ofs &lt;&lt; &quot;status:&quot; &lt;&lt; 1 &lt;&lt; endl;\n  ofs.close();\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<p>运行程序，测试代码:</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411162055435.png\" alt=\"\" /></p>\n<p>在 order.txt 文件中生成如下内容：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411162055587.png\" alt=\"\" /></p>\n<h2 id=\"83-显示预约\"><a class=\"anchor\" href=\"#83-显示预约\">#</a> 8.3 显示预约</h2>\n<h3 id=\"831-创建预约类\"><a class=\"anchor\" href=\"#831-创建预约类\">#</a> 8.3.1 创建预约类</h3>\n<p>功能描述：显示预约记录时，需要从文件中获取到所有记录，用来显示，创建预约的类来管理记录以及更新</p>\n<p>在头文件以及源文件下分别创建<strong> orderFile.h</strong> 和 <strong>orderFile.cpp</strong> 文件</p>\n<p>orderFile.h 中添加如下代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;fstream&gt;\n#include &lt;map&gt;\n\n#include &quot;globalFile.h&quot;\n\nclass OrderFile &#123;\n public:\n  OrderFile();\n\n  // 更新预约记录\n  void updateOrder();\n  // 记录预约条数\n  int m_Size;\n  // 记录所有预约信息的容器，key为记录条数，value为映射容器。映射容器中的每个元素的键为date、interval、stuName等，值为1、2、zhangsan等具体值\n  map&lt;int, map&lt;string, string&gt;&gt; m_orderData;\n&#125;;\n</code></pre>\n<p><strong>构造函数</strong>中获取所有 ORDER_FILE 文件中的信息，并存放在容器中，添加如下代码：</p>\n<pre><code class=\"language-C++\">OrderFile::OrderFile() &#123;\n  ifstream ifs;\n  ifs.open(ORDER_FILE, ios::in);\n\n  string date;      // 日期\n  string interval;  // 时间段\n  string stuId;     // 学生编号\n  string stuName;   // 学生姓名\n  string roomId;    // 机房编号\n  string status;    // 预约状态\n\n  this-&gt;m_Size = 0;  // 记录条数\n\n  while (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt; stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp; ifs &gt;&gt; status) &#123;\n    string key;\n    string value;\n    map&lt;string, string&gt; m;\n\n    // date = &quot;date:1&quot;\n    int pos = date.find(&quot;:&quot;);  // 4\n    if (pos != -1) &#123;\n      key = date.substr(0, pos);\n      value = date.substr(pos + 1, date.size() - pos - 1);  // sieze = 6, pos = 4\n    &#125;\n    m.insert(make_pair(key, value));\n\n    // 截取时间段\n    pos = interval.find(&quot;:&quot;);\n    if (pos != -1) &#123;\n      key = interval.substr(0, pos);\n      value = interval.substr(pos + 1, interval.size() - pos - 1);\n    &#125;\n    m.insert(make_pair(key, value));\n\n    // 截取学号\n    pos = stuId.find(&quot;:&quot;);\n    if (pos != -1) &#123;\n      key = stuId.substr(0, pos);\n      value = stuId.substr(pos + 1, stuId.size() - pos - 1);\n    &#125;\n    m.insert(make_pair(key, value));\n\n    // 截取姓名\n    pos = stuName.find(&quot;:&quot;);\n    if (pos != -1) &#123;\n      key = stuName.substr(0, pos);\n      value = stuName.substr(pos + 1, stuName.size() - pos - 1);\n    &#125;\n    m.insert(make_pair(key, value));\n\n    // 截取机房编号\n    pos = roomId.find(&quot;:&quot;);\n    if (pos != -1) &#123;\n      key = roomId.substr(0, pos);\n      value = roomId.substr(pos + 1, roomId.size() - pos - 1);\n    &#125;\n    m.insert(make_pair(key, value));\n\n    // 截取预约状态\n    pos = status.find(&quot;:&quot;);\n    if (pos != -1) &#123;\n      key = status.substr(0, pos);\n      value = status.substr(pos + 1, status.size() - pos - 1);\n    &#125;\n    m.insert(make_pair(key, value));\n\n    // 将小map容器放入到大的map容器中\n    this-&gt;m_orderData.insert(make_pair(this-&gt;m_Size, m));\n    this-&gt;m_Size++;\n  &#125;\n\n  ifs.close();\n\n  // 测试最大map容器\n  // for (map&lt;int, map&lt;string, string&gt;&gt;::iterator it = this-&gt;m_orderData.begin(); it != this-&gt;m_orderData.end(); it++) &#123;\n  //   cout &lt;&lt; &quot;条数为：&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; endl;\n  //   for (map&lt;string, string&gt;::iterator mit = (*it).second.begin(); mit != it-&gt;second.end(); mit++) &#123;\n  //     cout &lt;&lt; &quot; key = &quot; &lt;&lt; mit-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; mit-&gt;second &lt;&lt; &quot; &quot;;\n  //   &#125;\n  //   cout &lt;&lt; endl;\n  // &#125;\n&#125;\n</code></pre>\n<p>假设 m_orderData 中的任何一个数据有更改，都需要把更改后的新 m_orderData 重新写入 ORDER_FILE 文件。更新预约记录的成员函数 updateOrder 代码如下：</p>\n<pre><code class=\"language-C++\">// 更新预约记录\nvoid OrderFile::updateOrder() &#123;\n  if (this-&gt;m_Size == 0) &#123;\n    return;  // 预约记录0条，直接return\n  &#125;\n  ofstream ofs(ORDER_FILE, ios::out | ios::trunc);\n  for (int i = 0; i &lt; this-&gt;m_Size; i++) &#123;\n    ofs &lt;&lt; &quot;date:&quot; &lt;&lt; this-&gt;m_orderData[i][&quot;date&quot;] &lt;&lt; &quot; &quot;;\n    ofs &lt;&lt; &quot;interval:&quot; &lt;&lt; this-&gt;m_orderData[i][&quot;interval&quot;] &lt;&lt; &quot; &quot;;\n    ofs &lt;&lt; &quot;stuId:&quot; &lt;&lt; this-&gt;m_orderData[i][&quot;stuId&quot;] &lt;&lt; &quot; &quot;;\n    ofs &lt;&lt; &quot;stuName:&quot; &lt;&lt; this-&gt;m_orderData[i][&quot;stuName&quot;] &lt;&lt; &quot; &quot;;\n    ofs &lt;&lt; &quot;roomId:&quot; &lt;&lt; this-&gt;m_orderData[i][&quot;roomId&quot;] &lt;&lt; &quot; &quot;;\n    ofs &lt;&lt; &quot;status:&quot; &lt;&lt; this-&gt;m_orderData[i][&quot;status&quot;] &lt;&lt; endl;\n  &#125;\n  ofs.close();\n&#125;\n</code></pre>\n<h3 id=\"832-显示自身预约\"><a class=\"anchor\" href=\"#832-显示自身预约\">#</a> 8.3.2 显示自身预约</h3>\n<p>首先我们先添加几条预约记录，可以用程序添加或者直接修改 order.txt 文件</p>\n<p>order.txt 文件内容如下： 比如我们有两名同学分别产生了 2 条预约记录</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>date:1 interval:2 stuId:1 stuName:zhangsan roomId:3 status:1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>date:4 interval:1 stuId:3 stuName:wangwu roomId:2 status:1</pre></td></tr></table></figure><p>在 Student 类的 <code>void Student::showMyOrder()</code>  成员函数中，添加如下代码</p>\n<pre><code class=\"language-C++\">// 查看自身预约\nvoid Student::showMyOrder() &#123;\n  OrderFile of;  // 创建OrderFile对象，会调用OrderFile构造函数\n  if (of.m_Size == 0) &#123;\n    cout &lt;&lt; &quot;无预约记录！&quot; &lt;&lt; endl;\n    system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n    system(&quot;clear&quot;);\n    return;\n  &#125;\n  for (int i = 0; i &lt; of.m_Size; i++) &#123;\n    // string转int：先用.c_str()方法把of.m_orderData[i][&quot;stuId&quot;]这个字符串转成C语言风格的字符串，即const char*，再用atoi方法把const char*转为int\n    if (this-&gt;m_Id == atoi(of.m_orderData[i][&quot;stuId&quot;].c_str())) &#123;  // 找到自身预约\n      cout &lt;&lt; &quot;预约日期：周&quot; &lt;&lt; of.m_orderData[i][&quot;date&quot;];\n      cout &lt;&lt; &quot; 时间段：&quot; &lt;&lt; ((of.m_orderData[i][&quot;interval&quot;] == &quot;1&quot;) ? &quot;上午&quot; : &quot;下午&quot;);\n      cout &lt;&lt; &quot; 机房号：&quot; &lt;&lt; of.m_orderData[i][&quot;roomId&quot;];\n      string status = &quot; 状态：&quot;;  // 1审核中，2已预约，-1预约失败，0取消预约\n      if (of.m_orderData[i][&quot;status&quot;] == &quot;1&quot;) &#123;\n        status += &quot;审核中&quot;;\n      &#125; else if (of.m_orderData[i][&quot;status&quot;] == &quot;2&quot;) &#123;\n        status += &quot;预约成功&quot;;\n      &#125; else if (of.m_orderData[i][&quot;status&quot;] == &quot;-1&quot;) &#123;\n        status += &quot;预约失败&quot;;\n      &#125; else &#123;\n        status += &quot;预约已取消&quot;;\n      &#125;\n      cout &lt;&lt; status &lt;&lt; endl;\n    &#125;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h3 id=\"833-显示所有预约\"><a class=\"anchor\" href=\"#833-显示所有预约\">#</a> 8.3.3 显示所有预约</h3>\n<p>在 Student 类的 <code>void Student::showAllOrder()</code>  成员函数中，添加如下代码</p>\n<pre><code class=\"language-C++\">// 查看所有预约\nvoid Student::showAllOrder() &#123;\n  OrderFile of;\n  if (of.m_Size == 0) &#123;\n    cout &lt;&lt; &quot;无预约记录&quot; &lt;&lt; endl;\n    system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n    system(&quot;clear&quot;);\n    return;\n  &#125;\n  for (int i = 0; i &lt; of.m_Size; i++) &#123;\n    cout &lt;&lt; i + 1 &lt;&lt; &quot;、&quot;;\n    cout &lt;&lt; &quot;预约日期：周&quot; &lt;&lt; of.m_orderData[i][&quot;date&quot;];\n    cout &lt;&lt; &quot; 时间段：&quot; &lt;&lt; (of.m_orderData[i][&quot;interval&quot;] == &quot;1&quot; ? &quot;上午&quot; : &quot;下午&quot;);\n    cout &lt;&lt; &quot; 学号：&quot; &lt;&lt; of.m_orderData[i][&quot;stuId&quot;];\n    cout &lt;&lt; &quot; 姓名：&quot; &lt;&lt; of.m_orderData[i][&quot;stuName&quot;];\n    cout &lt;&lt; &quot; 机房编号：&quot; &lt;&lt; of.m_orderData[i][&quot;roomId&quot;];\n    string status = &quot; 状态：&quot;;  // 1审核中，2已预约，-1预约失败，0取消预约\n    if (of.m_orderData[i][&quot;status&quot;] == &quot;1&quot;) &#123;\n      status += &quot;审核中&quot;;\n    &#125; else if (of.m_orderData[i][&quot;status&quot;] == &quot;2&quot;) &#123;\n      status += &quot;预约成功&quot;;\n    &#125; else if (of.m_orderData[i][&quot;status&quot;] == &quot;-1&quot;) &#123;\n      status += &quot;预约失败，审核未通过&quot;;\n    &#125; else &#123;\n      status += &quot;预约已取消&quot;;\n    &#125;\n    cout &lt;&lt; status &lt;&lt; endl;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<p>测试效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411162231095.png\" alt=\"\" /></p>\n<h2 id=\"84-取消预约\"><a class=\"anchor\" href=\"#84-取消预约\">#</a> 8.4 取消预约</h2>\n<p>在 Student 类的 <code>void Student::cancelOrder()</code>  成员函数中，添加如下代码</p>\n<pre><code class=\"language-C++\">// 取消预约\nvoid Student::cancelOrder() &#123;\n  OrderFile of;\n  if (of.m_Size == 0) &#123;\n    cout &lt;&lt; &quot;无预约记录&quot; &lt;&lt; endl;\n    system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n    system(&quot;clear&quot;);\n    return;\n  &#125;\n  cout &lt;&lt; &quot;审核中或预约成功的记录可以取消，请输入取消的记录&quot; &lt;&lt; endl;\n  vector&lt;int&gt; v;  // 存放所有可以取消预约的记录在最大容器中的实际下标编号\n  int index = 1;\n  for (int i = 0; i &lt; of.m_Size; i++) &#123;\n    // 先判断是自身学号\n    if (this-&gt;m_Id == atoi(of.m_orderData[i][&quot;stuId&quot;].c_str())) &#123;\n      // 再筛选状态，审核中或预约成功\n      if (of.m_orderData[i][&quot;status&quot;] == &quot;1&quot; || of.m_orderData[i][&quot;status&quot;] == &quot;2&quot;) &#123;\n        v.push_back(i);\n        cout &lt;&lt; index++ &lt;&lt; &quot;、&quot;;\n        cout &lt;&lt; &quot;预约日期：周&quot; &lt;&lt; of.m_orderData[i][&quot;date&quot;];\n        cout &lt;&lt; &quot; 时间段：&quot; &lt;&lt; (of.m_orderData[i][&quot;interval&quot;] == &quot;1&quot; ? &quot;上午&quot; : &quot;下午&quot;);\n        cout &lt;&lt; &quot; 机房编号：&quot; &lt;&lt; of.m_orderData[i][&quot;roomId&quot;];\n        string status = &quot; 状态：&quot;;\n        if (of.m_orderData[i][&quot;status&quot;] == &quot;1&quot;) &#123;\n          status += &quot;审核中&quot;;\n        &#125; else if (of.m_orderData[i][&quot;status&quot;] == &quot;2&quot;) &#123;\n          status += &quot;预约成功&quot;;\n        &#125;\n        cout &lt;&lt; status &lt;&lt; endl;\n      &#125;\n    &#125;\n  &#125;\n\n  cout &lt;&lt; &quot;请输入取消的记录，0代表返回&quot; &lt;&lt; endl;\n  int select = 0;\n  while (true) &#123;\n    cin &gt;&gt; select;\n    if (select &gt;= 0 &amp;&amp; select &lt;= (int)(v.size())) &#123;\n      if (select == 0) &#123;\n        break;\n      &#125; else &#123;\n        of.m_orderData[v[select - 1]][&quot;status&quot;] = &quot;0&quot;;\n        of.updateOrder();\n        cout &lt;&lt; &quot;已取消预约&quot; &lt;&lt; endl;\n        break;\n      &#125;\n    &#125;\n    cout &lt;&lt; &quot;输入有误，请重新输入&quot; &lt;&lt; endl;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<p>测试取消预约</p>\n<p>再次查看个人预约记录</p>\n<p>查看所有预约</p>\n<p>查看 order.txt 预约文件</p>\n<p>至此，学生模块功能全部实现</p>\n<h1 id=\"9-教师模块\"><a class=\"anchor\" href=\"#9-教师模块\">#</a> 9、教师模块</h1>\n<h2 id=\"91-教师登录和注销\"><a class=\"anchor\" href=\"#91-教师登录和注销\">#</a> 9.1 教师登录和注销</h2>\n<h3 id=\"911-构造函数\"><a class=\"anchor\" href=\"#911-构造函数\">#</a> 9.1.1 构造函数</h3>\n<p>在 Teacher 类的构造函数中，初始化教师信息，代码如下：</p>\n<pre><code class=\"language-c++\">Teacher::Teacher(int empId, string name, string pwd) &#123;\n  this-&gt;m_EmpId = empId;\n  this-&gt;m_Name = name;\n  this-&gt;m_Pwd = pwd;\n&#125;\n</code></pre>\n<h3 id=\"912-教师子菜单\"><a class=\"anchor\" href=\"#912-教师子菜单\">#</a> 9.1.2 教师子菜单</h3>\n<ul>\n<li>main.cpp 中，当用户登录的是教师，添加教师菜单接口</li>\n<li>将不同的分支提供出来\n<ul>\n<li>查看所有预约</li>\n<li>审核预约</li>\n<li>注销登录</li>\n</ul>\n</li>\n<li>实现注销功能</li>\n</ul>\n<p>添加全局函数  <code>void TeacherMenu(Person*&amp; manager)</code>  代码如下：</p>\n<pre><code class=\"language-c++\">// 进入教师子菜单界面\nvoid teacherMenu(Identity*&amp; teacher) &#123;\n  while (true) &#123;\n    // 调用子菜单界面\n    teacher-&gt;operMenu();\n\n    Teacher* tea = (Teacher*)teacher;\n    int select = 0;  // 接收用户选择\n    cin &gt;&gt; select;\n    if (select == 1) &#123;  // 查看所有预约\n      tea-&gt;showAllOrder();\n    &#125; else if (select == 2) &#123;  // 审核预约\n      tea-&gt;validOrder();\n    &#125; else &#123;\n      delete teacher;\n      cout &lt;&lt; &quot;注销成功&quot; &lt;&lt; endl;\n      system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n      system(&quot;clear&quot;);\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"913-菜单功能实现\"><a class=\"anchor\" href=\"#913-菜单功能实现\">#</a> 9.1.3 菜单功能实现</h3>\n<p>在实现成员函数 <code>void Teacher::operMenu()</code>  代码如下：</p>\n<pre><code class=\"language-c++\">// 菜单界面\nvoid Teacher::operMenu() &#123;\n  cout &lt;&lt; &quot;欢迎教师：&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;登录！&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;\\t\\t ----------------------------------\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          1.查看所有预约          |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          2.审核预约              |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|          0.注销登录              |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t|                                  |\\n&quot;;\n  cout &lt;&lt; &quot;\\t\\t ----------------------------------\\n&quot;;\n  cout &lt;&lt; &quot;请选择您的操作： &quot; &lt;&lt; endl;\n&#125;\n</code></pre>\n<h3 id=\"914-接口对接\"><a class=\"anchor\" href=\"#914-接口对接\">#</a> 9.1.4 接口对接</h3>\n<ul>\n<li>\n<p>教师成功登录后，调用教师的子菜单界面</p>\n</li>\n<li>\n<p>在教师登录分支中，添加代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 进入教师子菜单</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">teacherMenu</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>添加效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411162308395.png\" alt=\"\" /></p>\n<p>测试对接</p>\n<p>登录验证通过</p>\n<p>教师子菜单</p>\n<p>注销登录</p>\n<h2 id=\"92-查看所有预约\"><a class=\"anchor\" href=\"#92-查看所有预约\">#</a> 9.2 查看所有预约</h2>\n<h3 id=\"921-所有预约功能实现\"><a class=\"anchor\" href=\"#921-所有预约功能实现\">#</a> 9.2.1 所有预约功能实现</h3>\n<p>该功能与学生身份的查看所有预约功能相似，用于显示所有预约记录</p>\n<p>在 Teacher.cpp 中实现成员函数  <code>void Teacher::showAllOrder()</code></p>\n<pre><code class=\"language-C++\">// 查看所有预约\nvoid Teacher::showAllOrder() &#123;\n  OrderFile of;\n  if (of.m_Size == 0) &#123;\n    cout &lt;&lt; &quot;无预约记录&quot; &lt;&lt; endl;\n    system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n    system(&quot;clear&quot;);\n    return;\n  &#125;\n  for (int i = 0; i &lt; of.m_Size; i++) &#123;\n    cout &lt;&lt; i + 1 &lt;&lt; &quot;、&quot;;\n    cout &lt;&lt; &quot;预约日期：周&quot; &lt;&lt; of.m_orderData[i][&quot;date&quot;];\n    cout &lt;&lt; &quot; 时间段：&quot; &lt;&lt; (of.m_orderData[i][&quot;interval&quot;] == &quot;1&quot; ? &quot;上午&quot; : &quot;下午&quot;);\n    cout &lt;&lt; &quot; 学号：&quot; &lt;&lt; of.m_orderData[i][&quot;stuId&quot;];\n    cout &lt;&lt; &quot; 姓名：&quot; &lt;&lt; of.m_orderData[i][&quot;stuName&quot;];\n    cout &lt;&lt; &quot; 机房编号：&quot; &lt;&lt; of.m_orderData[i][&quot;roomId&quot;];\n    string status = &quot; 状态：&quot;;  // 1审核中，2已预约，-1预约失败，0取消预约\n    if (of.m_orderData[i][&quot;status&quot;] == &quot;1&quot;) &#123;\n      status += &quot;审核中&quot;;\n    &#125; else if (of.m_orderData[i][&quot;status&quot;] == &quot;2&quot;) &#123;\n      status += &quot;预约成功&quot;;\n    &#125; else if (of.m_orderData[i][&quot;status&quot;] == &quot;-1&quot;) &#123;\n      status += &quot;预约失败，审核未通过&quot;;\n    &#125; else &#123;\n      status += &quot;预约已取消&quot;;\n    &#125;\n    cout &lt;&lt; status &lt;&lt; endl;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h3 id=\"922-测试功能\"><a class=\"anchor\" href=\"#922-测试功能\">#</a> 9.2.2 测试功能</h3>\n<p>运行测试教师身份的查看所有预约功能</p>\n<h2 id=\"93-审核预约\"><a class=\"anchor\" href=\"#93-审核预约\">#</a> 9.3 审核预约</h2>\n<h3 id=\"931-审核功能实现\"><a class=\"anchor\" href=\"#931-审核功能实现\">#</a> 9.3.1 审核功能实现</h3>\n<p>功能描述：教师审核学生的预约，依据实际情况审核预约</p>\n<p>在 Teacher.cpp 中实现成员函数  <code>void Teacher::validOrder()</code></p>\n<p>代码如下：</p>\n<pre><code class=\"language-C++\">// 审核预约\nvoid Teacher::validOrder() &#123;\n  OrderFile of;\n  if (of.m_Size == 0) &#123;\n    cout &lt;&lt; &quot;无预约记录&quot; &lt;&lt; endl;\n    system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n    system(&quot;clear&quot;);\n    return;\n  &#125;\n\n  vector&lt;int&gt; v;\n  int index = 0;\n  cout &lt;&lt; &quot;待审核的预约记录如下：&quot; &lt;&lt; endl;\n  for (int i = 0; i &lt; of.m_Size; i++) &#123;\n    if (of.m_orderData[i][&quot;status&quot;] == &quot;1&quot;) &#123;\n      v.push_back(i);\n      cout &lt;&lt; ++index &lt;&lt; &quot;、&quot;;\n      cout &lt;&lt; &quot;预约日期：周&quot; &lt;&lt; of.m_orderData[i][&quot;date&quot;];\n      cout &lt;&lt; &quot; 时间段：&quot; &lt;&lt; (of.m_orderData[i][&quot;interval&quot;] == &quot;1&quot; ? &quot;上午&quot; : &quot;下午&quot;);\n      cout &lt;&lt; &quot; 学生编号：&quot; &lt;&lt; of.m_orderData[i][&quot;stuId&quot;];\n      cout &lt;&lt; &quot; 学生姓名：&quot; &lt;&lt; of.m_orderData[i][&quot;stuName&quot;];\n      cout &lt;&lt; &quot; 机房编号：&quot; &lt;&lt; of.m_orderData[i][&quot;roomId&quot;];\n      string status = &quot; 状态：审核中&quot;;\n      cout &lt;&lt; status &lt;&lt; endl;\n    &#125;\n  &#125;\n\n  cout &lt;&lt; &quot;请输入审核的预约记录，0代表返回&quot; &lt;&lt; endl;\n  int select = 0;  // 接收用户选择的预约记录\n  int ret = 0;     // 预约结果\n\n  while (true) &#123;\n    cin &gt;&gt; select;\n    if (select &gt;= 0 &amp;&amp; select &lt;= int(v.size())) &#123;\n      if (select == 0) &#123;\n        break;\n      &#125; else &#123;\n        cout &lt;&lt; &quot;请输入审核结果&quot; &lt;&lt; endl;\n        cout &lt;&lt; &quot;1、通过&quot; &lt;&lt; endl;\n        cout &lt;&lt; &quot;2、不通过&quot; &lt;&lt; endl;\n        cin &gt;&gt; ret;\n        if (ret == 1) &#123;\n          // 通过的情况\n          of.m_orderData[v[select - 1]][&quot;status&quot;] = &quot;2&quot;;\n        &#125; else &#123;\n          // 不通过的情况\n          of.m_orderData[v[select - 1]][&quot;status&quot;] = &quot;-1&quot;;\n        &#125;\n        of.updateOrder();  // 根据现在的m_orderData，更新order.txt文件中的预约记录\n        cout &lt;&lt; &quot;审核完毕&quot; &lt;&lt; endl;\n        break;\n      &#125;\n    &#125;\n    cout &lt;&lt; &quot;输入有误，请重新输入！&quot; &lt;&lt; endl;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h3 id=\"932-测试审核预约\"><a class=\"anchor\" href=\"#932-测试审核预约\">#</a> 9.3.2 测试审核预约</h3>\n<p>测试 - 审核通过</p>\n<p>审核通过情况</p>\n<p>测试 - 审核未通过</p>\n<p>审核未通过情况</p>\n<p>学生身份下查看记录</p>\n<p>审核预约成功！</p>\n<p>至此本案例制作完毕！   <code>^_^</code></p>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E4%B8%89.%E5%AE%9E%E6%88%98-%E5%9F%BA%E4%BA%8ESTL%E7%9A%84%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://60saint.github.io/cpp/%E4%B8%89.%E5%AE%9E%E6%88%98-%E5%9F%BA%E4%BA%8ESTL%E7%9A%84%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "三.实战-基于STL的演讲比赛流程管理系统",
            "date_published": "2024-11-15T03:37:41.411Z",
            "content_html": "<h1 id=\"1-演讲比赛程序需求\"><a class=\"anchor\" href=\"#1-演讲比赛程序需求\">#</a> 1、演讲比赛程序需求</h1>\n<h2 id=\"11-比赛规则\"><a class=\"anchor\" href=\"#11-比赛规则\">#</a> 1.1 比赛规则</h2>\n<ul>\n<li>学校举行一场演讲比赛，共有<strong> 12 个人</strong>参加。<strong>比赛共两轮</strong>，第一轮为淘汰赛，第二轮为决赛。</li>\n<li>比赛方式：<strong>分组比赛，每组 6 个人</strong>；选手每次要随机分组，进行比赛</li>\n<li>每名选手都有对应的<strong>编号</strong>，如 10001 ~ 10012</li>\n<li>第一轮分为两个小组，每组 6 个人。 整体按照选手编号进行<strong>抽签</strong>后顺序演讲。</li>\n<li>十个评委分别给每名选手打分，去除最高分和最低分，求的平均分为本轮选手的成绩</li>\n<li>当小组演讲完后，淘汰组内排名最后的三个选手，<strong>前三名晋级</strong>，进入下一轮的比赛。</li>\n<li>第二轮为决赛，<strong>前三名胜出</strong></li>\n<li>每轮比赛过后需要<strong>显示晋级选手的信息</strong></li>\n</ul>\n<h2 id=\"12-程序功能\"><a class=\"anchor\" href=\"#12-程序功能\">#</a> 1.2 程序功能</h2>\n<ul>\n<li>\n<p>开始演讲比赛：完成整届比赛的流程，每个比赛阶段需要给用户一个提示，用户按任意键后继续下一个阶段</p>\n</li>\n<li>\n<p>查看往届记录：查看之前比赛前三名结果，每次比赛都会记录到文件中，文件用.csv 后缀名保存</p>\n<blockquote>\n<p>文件用.csv 后缀名的原因：方便用 excel 表打开，也可以用记事本打开，每个数据都是用逗号来分割的。在早期没有数据库阶段的时候，更多都是用 csv 格式去存数据</p>\n</blockquote>\n</li>\n<li>\n<p>清空比赛记录：将文件中数据清空</p>\n</li>\n<li>\n<p>退出比赛程序：可以退出当前程序</p>\n</li>\n</ul>\n<h2 id=\"13-程序效果图\"><a class=\"anchor\" href=\"#13-程序效果图\">#</a> 1.3 程序效果图：</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411151329565.png\" alt=\"\" /></p>\n<h1 id=\"2-项目创建\"><a class=\"anchor\" href=\"#2-项目创建\">#</a> 2、项目创建</h1>\n<p>创建项目步骤如下：</p>\n<ul>\n<li>创建新项目</li>\n<li>添加文件</li>\n</ul>\n<h1 id=\"3-创建管理类\"><a class=\"anchor\" href=\"#3-创建管理类\">#</a> 3、创建管理类</h1>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>提供菜单界面与用户交互</li>\n<li>对演讲比赛流程进行控制</li>\n<li>与文件的读写交互</li>\n</ul>\n<h2 id=\"31-创建文件\"><a class=\"anchor\" href=\"#31-创建文件\">#</a> 3.1 创建文件</h2>\n<p>在头文件和源文件的文件夹下分别创建 speechManager.h 和 speechManager.cpp 文件</p>\n<h2 id=\"32-头文件实现\"><a class=\"anchor\" href=\"#32-头文件实现\">#</a> 3.2 头文件实现</h2>\n<p>在 speechManager.h 中设计管理类</p>\n<p>代码如下：</p>\n<pre><code class=\"language-c++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 设计演讲比赛管理类\nclass SpeechManager &#123;\n public:\n  SpeechManager();\n  ~SpeechManager();\n&#125;;\n</code></pre>\n<h2 id=\"33-源文件实现\"><a class=\"anchor\" href=\"#33-源文件实现\">#</a> 3.3 源文件实现</h2>\n<p>在 speechManager.cpp 中将构造和析构函数空实现补全</p>\n<pre><code class=\"language-c++\">#include &quot;speechManager.h&quot;\n\nSpeechManager::SpeechManager() &#123;\n&#125;\nSpeechManager::~SpeechManager() &#123;\n&#125;\n</code></pre>\n<ul>\n<li>至此演讲管理类以创建完毕</li>\n</ul>\n<h1 id=\"4-菜单功能\"><a class=\"anchor\" href=\"#4-菜单功能\">#</a> 4、菜单功能</h1>\n<p>功能描述：与用户的沟通界面</p>\n<h2 id=\"41-添加成员函数\"><a class=\"anchor\" href=\"#41-添加成员函数\">#</a> 4.1 添加成员函数</h2>\n<p>在管理类 speechManager.h 中添加成员函数   <code>void show_Menu();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpeechManager</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">SpeechManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">SpeechManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 菜单功能</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"42-菜单功能实现\"><a class=\"anchor\" href=\"#42-菜单功能实现\">#</a> 4.2 菜单功能实现</h2>\n<ul>\n<li>在管理类 speechManager.cpp 中实现 showMenu () 函数</li>\n</ul>\n<pre><code class=\"language-c++\">void SpeechManager::showMenu() &#123;  // 类的成员函数的实现也要写返回值类型，否则报错\n  cout &lt;&lt; &quot;********************************************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  欢迎参加演讲比赛 ************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  1.开始演讲比赛  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  2.查看往届记录  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  3.清空比赛记录  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  0.退出比赛程序  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;********************************************&quot; &lt;&lt; endl;\n  cout &lt;&lt; endl;\n&#125;\n</code></pre>\n<h2 id=\"43-测试菜单功能\"><a class=\"anchor\" href=\"#43-测试菜单功能\">#</a> 4.3 测试菜单功能</h2>\n<ul>\n<li>main.cpp 中测试菜单功能</li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;speechManager.h&quot;\n\nint main() &#123;\n  // 创建管理类对象\n  SpeechManager sm;\n  sm.showMenu();\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  return 0;\n&#125;\n</code></pre>\n<ul>\n<li>\n<p>运行效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411151354063.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>菜单界面搭建完毕</p>\n</li>\n</ul>\n<h1 id=\"5-退出功能\"><a class=\"anchor\" href=\"#5-退出功能\">#</a> 5、退出功能</h1>\n<h2 id=\"51-提供功能接口\"><a class=\"anchor\" href=\"#51-提供功能接口\">#</a> 5.1 提供功能接口</h2>\n<ul>\n<li>在 main 函数中提供分支选择，提供每个功能接口</li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"language-c++\">int main() &#123;\n  // 创建管理类对象\n  SpeechManager sm;\n\n  int choice = 0;  // 用于存储用户输入\n  while (true) &#123;\n    sm.showMenu();\n    cout &lt;&lt; &quot;请输入您的选择&quot; &lt;&lt; endl;\n    cin &gt;&gt; choice;\n    switch (choice) &#123;\n      case 1:  // 开始比赛\n        break;\n      case 2:  // 查看往届比赛记录\n        break;\n      case 3:  // 清空比赛记录\n        break;\n      case 0:  // 退出系统\n        break;\n      default:\n        system(&quot;clear&quot;);  // 清屏\n        break;\n    &#125;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  return 0;\n&#125;\n</code></pre>\n<h2 id=\"52-实现退出功能\"><a class=\"anchor\" href=\"#52-实现退出功能\">#</a> 5.2 实现退出功能</h2>\n<p>在 speechManager.h 中提供退出系统的成员函数  <code>\tvoid exitSystem();</code></p>\n<p>在 speechManager.cpp 中提供具体的功能实现</p>\n<pre><code class=\"language-c++\">// 退出系统\nvoid SpeechManager::exitSystem() &#123;\n  cout &lt;&lt; &quot;欢迎下次使用&quot; &lt;&lt; endl;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  exit(0);\n&#125;\n</code></pre>\n<h2 id=\"53-测试功能\"><a class=\"anchor\" href=\"#53-测试功能\">#</a> 5.3 测试功能</h2>\n<p>在 main 函数分支 0  选项中，调用退出程序的接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 退出系统</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sm<span class=\"token punctuation\">.</span><span class=\"token function\">exitSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>运行测试效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411151408780.png\" alt=\"\" /></p>\n<h1 id=\"6-演讲比赛功能\"><a class=\"anchor\" href=\"#6-演讲比赛功能\">#</a> 6、演讲比赛功能</h1>\n<h2 id=\"61-功能分析\"><a class=\"anchor\" href=\"#61-功能分析\">#</a> 6.1 功能分析</h2>\n<p>比赛流程分析：</p>\n<p>抽签 → 开始演讲比赛 → 显示第一轮比赛结果 →</p>\n<p>抽签 → 开始演讲比赛 → 显示前三名结果 → 保存分数</p>\n<h2 id=\"62-创建选手类\"><a class=\"anchor\" href=\"#62-创建选手类\">#</a> 6.2 创建选手类</h2>\n<ul>\n<li>选手类中的属性包含：选手姓名、分数</li>\n<li>头文件中创建 speaker.h 文件，并添加代码：</li>\n</ul>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 选手类\nclass Speaker &#123;\n public:\n  string m_Name;\n  double m_Score[2];  // 分数数组，最多有两轮得分\n&#125;;\n</code></pre>\n<h2 id=\"63-比赛\"><a class=\"anchor\" href=\"#63-比赛\">#</a> 6.3 比赛</h2>\n<h3 id=\"631-成员属性添加\"><a class=\"anchor\" href=\"#631-成员属性添加\">#</a> 6.3.1 成员属性添加</h3>\n<p>在 speechManager.h 中添加属性</p>\n<pre><code class=\"language-C++\">vector&lt;int&gt; v1;// 保存第一轮比赛选手编号容器  12人\nvector&lt;int&gt; v2;// 第一轮晋级容器  6人\nvector&lt;int&gt; vVictory;// 胜利前三名容器  3人\nmap&lt;int, Speaker&gt; m_Speaker;// 存放编号 以及对应的 具体选手 容器。用map而不用multimap：考虑到编号不会有重复\nint m_Index;// 记录比赛轮数\n</code></pre>\n<h3 id=\"632-初始化属性\"><a class=\"anchor\" href=\"#632-初始化属性\">#</a> 6.3.2 初始化属性</h3>\n<ul>\n<li>\n<p>在 speechManager.h 中提供开始比赛的的成员函数  <code>void initSpeech();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化容器和属性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中实现 <code>void initSpeech();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 容器都置空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>vVictory<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 初始化比赛轮数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>SpeechManager 构造函数中调用 <code>void initSpeech();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SpeechManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 初始化容器和属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"633-创建选手\"><a class=\"anchor\" href=\"#633-创建选手\">#</a> 6.3.3 创建选手</h3>\n<ul>\n<li>\n<p>在 speechManager.h 中提供开始比赛的的成员函数  <code>void createSpeaker();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化创建 12 名选手</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createSpeaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中实现 <code>void createSpeaker();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 12 名选手</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">createSpeaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  string nameSeed <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKL\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nameSeed<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string name <span class=\"token operator\">=</span> <span class=\"token string\">\"选手\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name <span class=\"token operator\">+=</span> nameSeed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建具体选手</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Speaker sp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sp<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      sp<span class=\"token punctuation\">.</span>m_Score<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 创建选手编号，并且放入到 v1 容器中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 选手编号以及对应选手放入到 map 容器中</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>nameSeed.size()</code>  返回的是一个  <code>size_type</code>  类型（通常是  <code>unsigned long</code> ），而如果使用的循环变量  <code>i</code>  是一个  <code>int</code>  类型。由于  <code>int</code>  是有符号的，而  <code>size_type</code>  是无符号的，这种比较可能会导致未定义的行为，尤其是在  <code>i</code>  变为负数时。</p>\n<p>为了消除这个警告，可以将循环变量  <code>i</code>  的类型更改为  <code>size_t</code> ，这是与  <code>size_type</code>  相同的无符号类型。这样可以确保比较是安全的，并且不会引发警告</p>\n<p>** <code>size_t</code> ** 是一个无符号整数类型，专门用于表示对象的大小和数组的索引。它的大小足够大，可以表示任何对象的大小，因此在处理数组或字符串时，使用  <code>size_t</code>  是一种良好的实践。</p>\n</blockquote>\n</li>\n<li>\n<p>SpeechManager 类的 构造函数中调用 <code>void createSpeaker();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SpeechManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 初始化容器和属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 创建 12 名选手</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">createSpeaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试 在 main 函数中，可以在创建完管理对象后，使用下列代码测试 12 名选手初始状态</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建管理类对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SpeechManager sm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 测试 12 名选手创建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Speaker<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> sm<span class=\"token punctuation\">.</span>m_Speaker<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> sm<span class=\"token punctuation\">.</span>m_Speaker<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"选手编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Score<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试完毕后，可以将测试代码删除或注释。</p>\n</li>\n</ul>\n<h3 id=\"634-开始比赛成员函数添加\"><a class=\"anchor\" href=\"#634-开始比赛成员函数添加\">#</a> 6.3.4 开始比赛成员函数添加</h3>\n<ul>\n<li>\n<p>在 speechManager.h 中提供开始比赛的的成员函数  <code>void startSpeech();</code></p>\n</li>\n<li>\n<p>该函数功能是主要控制比赛的流程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 开始比赛 - 比赛流程控制</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中将 startSpeech 的空实现先写入</p>\n</li>\n<li>\n<p>我们可以先将整个比赛的流程 写到函数中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 开始比赛</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 第一轮比赛</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//1、抽签</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//2、比赛</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//3、显示晋级结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 第二轮比赛</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//1、抽签</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//2、比赛</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//3、显示最终结果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//4、保存分数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"635-抽签\"><a class=\"anchor\" href=\"#635-抽签\">#</a> 6.3.5 抽签</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>\n<p>正式比赛前，所有选手的比赛顺序需要打乱，我们只需要将存放选手编号的容器  打乱次序即可</p>\n</li>\n<li>\n<p>在 speechManager.h 中提供抽签的的成员函数  <code>void speechDraw();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>\n<p>在 speechManager.cpp 中实现成员函数  <code>void speechDraw();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第 &lt;&lt; \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" >> 轮比赛选手正在抽签\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"抽签完后演讲顺序如下：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 创建随机数生成器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  random_device rd<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 获取随机数种子</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  default_random_engine <span class=\"token function\">eng</span><span class=\"token punctuation\">(</span><span class=\"token function\">rd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用随机数种子初始化引擎</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 第一轮比赛</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 使用 std::shuffle 进行随机打乱</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> eng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 第二轮比赛</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> eng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>\n<p>在 startSpeech 比赛流程控制的函数中，调用抽签函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 第一轮比赛</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//1、抽签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 main 函数中，分支 1 选项中，调用开始比赛的接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 开始比赛</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sm<span class=\"token punctuation\">.</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411151512483.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"636-开始比赛\"><a class=\"anchor\" href=\"#636-开始比赛\">#</a> 6.3.6 开始比赛</h3>\n<ul>\n<li>\n<p>在 speechManager.h 中提供比赛的的成员函数  <code>void speechContest();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 比赛</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中实现成员函数  <code>void speechContest();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 比赛</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"------------- 第\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 轮比赛正式开始 -------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 准备临时容器存放小组成绩</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">>></span> groupScore<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 记录人员个数，6 人一组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vSrc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 比赛选手容器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    vSrc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    vSrc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 遍历所有选手进行比赛</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vSrc<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vSrc<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 评委打分</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">double</span> score <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">401</span> <span class=\"token operator\">+</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10.f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    d<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                <span class=\"token comment\">// 去除最高分</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    d<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                 <span class=\"token comment\">// 去除最低分</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//d.size () 是一个整数，要强转成 double。一个浮点和一个整数相除还是一个整数，所以要都变成小数才能最后得出一个小数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 将平均分放入到 map 容器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Score<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> avg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 将打分数据，放入到临时小组容器中</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    groupScore<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//key 是得分，value 是具体选手编号</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 每 6 人取出前三名</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第\"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">/</span> <span class=\"token number\">6</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小组比赛名次：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">>></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> groupScore<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> groupScore<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">[</span>it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">[</span>it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Score<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token comment\">// 取走前三名</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">>></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> groupScore<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> groupScore<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          v2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          vVictory<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      groupScore<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 小组容器清空</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------- 第\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"轮比赛完毕 ---------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 startSpeech 比赛流程控制的函数中，调用比赛函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 第一轮开始比赛</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 1、抽签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2、比赛</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>再次运行代码，测试比赛</p>\n</li>\n</ul>\n<h3 id=\"637-显示比赛分数\"><a class=\"anchor\" href=\"#637-显示比赛分数\">#</a> 6.3.7 显示比赛分数</h3>\n<ul>\n<li>\n<p>在 speechManager.h 中提供比赛的的成员函数  <code>void showScore();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 显示得分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中实现成员函数  <code>void  showScore();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 显示得分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-------------------- 第\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"轮晋级选手信息如下： --------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    v <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    v <span class=\"token operator\">=</span> vVictory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"选手编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 得分\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Score<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">showMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 startSpeech 比赛流程控制的函数中，调用显示比赛分数函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 第一轮开始比赛</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 1、抽签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2、比赛</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 3、显示晋级结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>运行代码，测试效果</p>\n</li>\n</ul>\n<h3 id=\"638-第二轮比赛\"><a class=\"anchor\" href=\"#638-第二轮比赛\">#</a> 6.3.8 第二轮比赛</h3>\n<p>第二轮比赛流程同第一轮，只是比赛的轮是 + 1，其余流程不变</p>\n<ul>\n<li>\n<p>在 startSpeech 比赛流程控制的函数中，加入第二轮的流程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 第一轮开始比赛</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 1、抽签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2、比赛</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 3、显示晋级结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 第二轮开始比赛</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 1、抽签</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 2、比赛</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 3、显示最终结果</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 4、保存分数到文件中</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>测试，将整个比赛流程都跑通</p>\n<h2 id=\"64-保存分数\"><a class=\"anchor\" href=\"#64-保存分数\">#</a> 6.4 保存分数</h2>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>将每次演讲比赛的得分记录到文件中</li>\n</ul>\n<p><strong>功能实现：</strong></p>\n<ul>\n<li>\n<p>在 speechManager.h 中添加保存记录的成员函数  <code>void saveRecord();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 保存记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">saveRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中实现成员函数  <code>void saveRecord();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 保存记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">saveRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ofstream ofs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ofs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speech.csv\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用追加的方式写文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 将每个选手数据写入到文件中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vVictory<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vVictory<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Score<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  ofs <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 关闭</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"记录已经保存\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 startSpeech 比赛流程控制的函数中，最后调用保存记录分数函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 4、保存分数到文件中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">saveRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"本届比赛完毕！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试，整个比赛完毕后记录保存情况</p>\n<p>打开文件 speech.csv，里面保存了前三名选手的编号以及得分</p>\n</li>\n</ul>\n<p>至此，整个演讲比赛功能制作完毕！</p>\n<h1 id=\"7-查看记录\"><a class=\"anchor\" href=\"#7-查看记录\">#</a> 7、查看记录</h1>\n<h2 id=\"71-读取记录分数\"><a class=\"anchor\" href=\"#71-读取记录分数\">#</a> 7.1 读取记录分数</h2>\n<ul>\n<li>在 speechManager.h 中添加保存记录的成员函数  <code>void loadRecord();</code></li>\n<li>添加判断文件是否为空的标志   <code>bool fileIsEmpty;</code></li>\n<li>添加往届记录的容器 <code>map&lt;int, vector&lt;string&gt;&gt; m_Record;</code></li>\n</ul>\n<p>其中 m_Record 中的 key 代表第几届，value 记录具体的信息</p>\n<pre><code class=\"language-C++\">// 读取记录\nvoid loadRecord();\n// 判断文件是否为空\nbool fileIsEmpty;\n// 存放往届记录的容器\nmap&lt;int, vector&lt;string&gt;&gt; m_Record;  // 第一个int是届数，第二个vector&lt;string&gt;中的每一个元素是某届冠 / 亚 / 季军的编号 / 分数\n</code></pre>\n<ul>\n<li>\n<p>在 speechManager.cpp 中实现成员函数  <code>void loadRecord();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 读取记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">loadRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speech.csv\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 读文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>fileIsEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ifs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 文件清空情况</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ifs <span class=\"token operator\">>></span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>fileIsEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ifs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 文件不为空</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>fileIsEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ifs<span class=\"token punctuation\">.</span><span class=\"token function\">putback</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将上面读取的单个字符再放回文件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  string data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ifs <span class=\"token operator\">>></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// cout &lt;&lt; data &lt;&lt; endl;  // 10008,83.6125,10011,82.7375,10009,80.725,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存放 6 个 string 字符串</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 查到逗号位置的变量</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      pos <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 没有找到的情况</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      string temp <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> pos <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//substr 的第二个参数是要截取字符串的长度</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      start <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  ifs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 SpeechManager 构造函数中调用获取往届记录函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SpeechManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 初始化容器和属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 创建 12 名选手</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">createSpeaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 加载往届记录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">loadRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"72-查看记录功能\"><a class=\"anchor\" href=\"#72-查看记录功能\">#</a> 7.2 查看记录功能</h2>\n<ul>\n<li>\n<p>在 speechManager.h 中添加保存记录的成员函数  <code>void showRecord();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 显示往届记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">showRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中实现成员函数  <code>void showRecord();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 显示往届记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"届 冠军编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 得分：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 亚军编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 得分：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 季军编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 得分：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"73-测试功能\"><a class=\"anchor\" href=\"#73-测试功能\">#</a> 7.3 测试功能</h2>\n<p>在 main 函数分支 2  选项中，调用查看记录的接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 查看往届比赛记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sm<span class=\"token punctuation\">.</span><span class=\"token function\">showRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"74-bug解决\"><a class=\"anchor\" href=\"#74-bug解决\">#</a> 7.4 bug 解决</h2>\n<p>目前程序中有几处 bug 未解决：</p>\n<ol>\n<li>\n<p>查看往届记录，若文件不存在或为空，并未提示</p>\n<p>解决方式：在 showRecord 函数中，开始判断文件状态并加以判断</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>fileIsEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"文件不存在，或记录为空！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"届 冠军编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 得分：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 亚军编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 得分：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 季军编号：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 得分：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>若记录为空或不存在，比完赛后依然提示记录为空</p>\n<p>解决方式：saveRecord 中更新文件为空的标志</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">saveRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ofstream ofs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ofs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speech.csv\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vVictory<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vVictory<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Speaker<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Score<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ofs <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  ofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"记录已经保存\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 有记录了，文件不为空。更改文件不为空状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>fileIsEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>比完赛后查不到本届比赛的记录，没有实时更新</p>\n<p>解决方式：比赛完毕后，所有数据重置</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">startSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">speechContest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">saveRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 重置比赛，获取记录。下面三行代码其实就是 SpeechManager 构造函数内的三行代码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 初始化容器和属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 创建 12 名选手</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">createSpeaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 加载往届记录</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">loadRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"本届比赛完毕！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在初始化时，没有初始化记录容器</p>\n<p>解决方式：initSpeech 中添加 初始化记录容器</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>vVictory<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 将记录的容器也清空</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Record<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>每次记录都是一样的</p>\n<p>解决方式：在 main 函数一开始 添加随机数种子</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 随机数种子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>所有 bug 解决后 测试：</p>\n<p>![image-20241115181850464](/Users/lixinyi/Library/Application Support/typora-user-images/image-20241115181850464.png)</p>\n<h1 id=\"8-清空记录\"><a class=\"anchor\" href=\"#8-清空记录\">#</a> 8、清空记录</h1>\n<h2 id=\"81-清空记录功能实现\"><a class=\"anchor\" href=\"#81-清空记录功能实现\">#</a> 8.1 清空记录功能实现</h2>\n<ul>\n<li>\n<p>在 speechManager.h 中添加保存记录的成员函数  <code>void clearRecord();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 清空记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">clearRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 speechManager.cpp 中实现成员函数  <code>void clearRecord();</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 清空文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SpeechManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">clearRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"是否确定清空文件？\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1、是\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2、否\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> select <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cin <span class=\"token operator\">>></span> select<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>select <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 确认清空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ofstream <span class=\"token function\">ofs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speech.csv\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>trunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//ios::trunc：如果文件已经存在，打开文件时会清空文件内容（即删除原有内容），然后开始写入新的数据。如果文件不存在，则会创建一个新文件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 初始化容器和属性</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">initSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 创建 12 名选手</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">createSpeaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 加载往届记录</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">loadRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"清空成功！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"82-测试清空\"><a class=\"anchor\" href=\"#82-测试清空\">#</a> 8.2 测试清空</h2>\n<p>在 main 函数分支 3  选项中，调用清空比赛记录的接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 清空比赛记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sm<span class=\"token punctuation\">.</span><span class=\"token function\">clearRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>运行程序，测试清空记录</p>\n<p>speech.csv 中记录也为空</p>\n<p>至此本案例结束！  <code>^_^</code></p>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E4%B8%89.C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/",
            "url": "https://60saint.github.io/cpp/%E4%B8%89.C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/",
            "title": "三.C++提高编程",
            "date_published": "2024-11-08T09:12:58.483Z",
            "content_html": "<ul>\n<li>本阶段主要针对 C++<mark> 泛型编程</mark>和<mark> STL</mark> 技术做详细讲解，探讨 C++ 更深层的使用</li>\n</ul>\n<h1 id=\"1-模版\"><a class=\"anchor\" href=\"#1-模版\">#</a> 1 模版</h1>\n<h2 id=\"11-模版的概念\"><a class=\"anchor\" href=\"#11-模版的概念\">#</a> 1.1 模版的概念</h2>\n<p>模版就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p>\n<p>例如生活中的模板</p>\n<p>一寸照片模板：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081720353.png\" alt=\"\" /></p>\n<p>PPT 模板：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081729432.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081731076.png\" alt=\"\" /></p>\n<p>模版的特点：</p>\n<ul>\n<li>\n<p>模版不可以直接使用，它只是一个框架</p>\n<blockquote>\n<p>比如说不能直接把一寸照片的模板图当成自己的一寸照片，也不能把网上的年终总结报告模板给老板发过去</p>\n</blockquote>\n</li>\n<li>\n<p>模板的通用并不是万能的</p>\n<blockquote>\n<p>比如养了一个宠物，给宠物上证的时候也要提供宠物的证件照，不能拿人的证件照模板去 p 图。年终总结报告的 PPT 模板也是一样，只针对年终总结报告，对其他类型的报告就不太实用了，并不能把所有类型的报告写出来</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"12-函数模板\"><a class=\"anchor\" href=\"#12-函数模板\">#</a> 1.2 函数模板</h2>\n<ul>\n<li>C++ 另一种编程思想称为<mark>泛型编程</mark>，主要利用的技术就是模板</li>\n<li>C++ 提供两种模板机制：<strong>函数模板</strong>和<strong>类模板</strong></li>\n</ul>\n<h3 id=\"121-函数模板语法\"><a class=\"anchor\" href=\"#121-函数模板语法\">#</a> 1.2.1 函数模板语法</h3>\n<p>函数模板作用：</p>\n<p>建立一个通用函数，其函数返回值类型和形参类型可以不具体指定，用一个<strong>虚拟的类型</strong>来代表</p>\n<blockquote>\n<p>比如 <code>void func(int a)</code> ，在写模板的时候可以先不指定返回值是什么类型，也可以不指定传入的参数到底是什么数据类型。模板可以把形参的类型以及返回值的类型更抽象化，在使用的时候再确定类型，一开始的时候可以用虚拟的类型来代表它，比如 T（有可能是 int /double/float）</p>\n</blockquote>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>函数声明或定义</pre></td></tr></table></figure><p><strong>解释：</strong></p>\n<p>template --- 声明创建模板</p>\n<p>typename --- 表明其后面的符号是一种数据类型，可以用 class 代替</p>\n<p>T --- 通用的数据类型，名称可以替换，通常为大写字母</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 交换两个整型的函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 交换两个浮点型函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapDouble</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">double</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 函数模板</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>  <span class=\"token comment\">// 声明一个模板，告诉编译器后面代码中紧跟着的 T 不要报错，T 是一个通用数据类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySwap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  T temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// swapInt(a, b);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 利用函数模板交换</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 两种方式使用函数模板</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 1、自动类型推导</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">mySwap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 2、显示指定类型</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">mySwap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">double</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">swapDouble</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d = \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>函数模板利用关键字 template</li>\n<li>使用函数模板有两种方式：自动类型推导、显示指定类型</li>\n<li>模板的目的是为了提高复用性，将类型参数化</li>\n</ul>\n<h3 id=\"122-函数模板注意事项\"><a class=\"anchor\" href=\"#122-函数模板注意事项\">#</a> 1.2.2 函数模板注意事项</h3>\n<p>注意事项：</p>\n<ul>\n<li>自动类型推导，必须推导出一致的数据类型 T，才可以使用</li>\n<li>模板必须要确定出 T 的数据类型，才可以使用</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>  <span class=\"token comment\">//typename 可以替换成 class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySwap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  T temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 是一个函数模板，因为它紧跟着模板</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">mySwap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确！</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 1、自动类型推导，必须推导出一致的数据类型 T 才可以使用</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">//mySwap (a, c);  // 错误！推导不出一致的 T 类型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 2、模板必须要确定出 T 的数据类型，才可以使用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错，因为没有指定 T。若 func 是普通函数，这行代码没有任何问题，当把函数变成一个函数模板后，必须指出 T 的数据类型。现在没办法自动类型推导了，只能显示指定类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<p>使用模板时必须确定出通用数据类型 T，并且能够推导出一致的类型</p>\n<h3 id=\"123-函数模板案例\"><a class=\"anchor\" href=\"#123-函数模板案例\">#</a> 1.2.3 函数模板案例</h3>\n<p>案例描述：</p>\n<ul>\n<li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li>\n<li>排序规则从大到小，排序算法为<strong>选择排序</strong></li>\n<li>分别利用<strong> char 数组</strong>和<strong> int 数组</strong>进行测试</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 交换函数模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySwap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  T temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 排序算法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySort</span><span class=\"token punctuation\">(</span>T arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 认定最大值的下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 认定的最大值比遍历出的数值要小，说明 j 下标的元素才是真正的最大值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        max <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 更新最大值下标</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 交换 max 和 i 下标的元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">mySwap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 提供打印数组模板</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>T arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// 测试 char 数组</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">char</span> charArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"badcfe\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>charArr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">mySort</span><span class=\"token punctuation\">(</span>charArr<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>charArr<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// 测试 int 数组</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">int</span> intArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  num <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">mySort</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"124-普通函数与函数模板的区别\"><a class=\"anchor\" href=\"#124-普通函数与函数模板的区别\">#</a> 1.2.4 普通函数与函数模板的区别</h3>\n<p><strong>普通函数与函数模板区别：</strong></p>\n<ul>\n<li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li>\n<li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li>\n<li>如果利用显示指定类型的方式，可以发生隐式类型转换</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">myAdd01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 函数模板</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>T <span class=\"token function\">myAdd02</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// a - 97, c - 99</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 1、普通函数调用可以发生隐式类型转换</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">myAdd01</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 109</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 2、函数模板用自动类型推导，不可以发生隐式类型转换</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">myAdd02</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错。a 是 int 类型，c 是 char 类型，编译器没法知道到底把 T 替换成整型还是字符型</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 3、函数模板用显示指定类型，可以发生隐式类型转换</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">myAdd02</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 109</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"125-普通函数与函数模板的调用规则\"><a class=\"anchor\" href=\"#125-普通函数与函数模板的调用规则\">#</a> 1.2.5 普通函数与函数模板的调用规则</h3>\n<p>调用规则如下：</p>\n<ol>\n<li>如果函数模板和普通函数都可以实现，优先调用普通函数</li>\n<li>可以通过空模板参数列表来强制调用函数模板</li>\n<li>函数模板也可以发生重载</li>\n<li>如果函数模板可以产生更好的匹配，优先调用函数模板</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"调用的普通函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"调用的模板\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">,</span> T c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"调用重载的模板\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 1、如果函数模板和普通函数都可以调用，优先调用普通函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用的普通函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 若普通函数 void myPrint (int a, int b); 只有声明，没有实现，上面那行代码会报错</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 2、可以通过空模板参数列表，强制调用函数模板</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">myPrint</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用的模板</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 3、函数模板可以发生函数重载</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用重载的模板</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 4、如果函数模板可以产生更好的匹配，优先调用函数模板</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用的模板</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// 普通函数和模板函数能同时调用起来，因为普通函数可以发生隐式类型转换，它可以把 char 类型隐式在调的时候转成 int。但运行之后调用的模板，因为编译器认为如果调普通函数，它先要把 char 转成 int，太麻烦了，不如把 char 推导出来 T，模板函数就可以直接去调</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"126-模板的局限性\"><a class=\"anchor\" href=\"#126-模板的局限性\">#</a> 1.2.6 模板的局限性</h3>\n<p><strong>局限性：</strong></p>\n<p>模板的通用性不是万能的</p>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的 a 和 b 是一个数组，就无法实现了</p>\n<p>再例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述代码中，如果 T 的数据类型传入的是像 Person 这样的自定义数据类型，也无法正常运行</p>\n<p>因此 C++ 为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  string m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 对比两个数据是否相等的函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">myCompare</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 利用具体化 Person 的版本实现代码，具体化优先调用</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">myCompare</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">&amp;</span> p1<span class=\"token punctuation\">,</span> Person<span class=\"token operator\">&amp;</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&amp;&amp;</span> p1<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">.</span>m_Age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">myCompare</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a == b\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a != b\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  ret <span class=\"token operator\">=</span> <span class=\"token function\">myCompare</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 == p2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 != p2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>利用具体化的模板，可以解决自定义类型的通用化</li>\n<li>学习模板并不是为了写模板，而是在 STL 能够运用系统提供的模板</li>\n</ul>\n<h2 id=\"13-类模板\"><a class=\"anchor\" href=\"#13-类模板\">#</a> 1.3 类模板</h2>\n<h3 id=\"131-类模板语法\"><a class=\"anchor\" href=\"#131-类模板语法\">#</a> 1.3.1 类模板语法</h3>\n<p>类模板作用：</p>\n<p>建立一个通用类，类中的成员、数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">template</span> T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>类</pre></td></tr></table></figure><p><strong>解释：</strong></p>\n<p>template --- 声明创建模板</p>\n<p>typename --- 表明其后面的符号是一种数据类型，可以用 class 代替</p>\n<p>T --- 通用的数据类型，名称可以替换，通常为大写字母</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameType</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AgeType</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  NameType m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  AgeType m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>NameType name<span class=\"token punctuation\">,</span> AgeType age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" age: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"孙悟空\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 尖括号 & lt;> 叫模板参数列表，相当于分别把 string 和 int 传进 NameType 和 AgeType</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  p1<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：类模板和函数模板语法相似，在声明模板 template 后面加类，此类称为类模板</p>\n<h3 id=\"132-类模板与函数模板区别\"><a class=\"anchor\" href=\"#132-类模板与函数模板区别\">#</a> 1.3.2 类模板与函数模板区别</h3>\n<p>类模板与函数模板区别主要有两点：</p>\n<ol>\n<li>类模板没有自动类型推导的使用方式</li>\n<li>类模板在模板参数列表中可以有默认参数</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameType</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AgeType</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  NameType m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  AgeType m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>NameType name<span class=\"token punctuation\">,</span> AgeType age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" age: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 1、类模板没有自动类型推导使用方式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// Person p (\"孙悟空\", 1000);// 错误，无法用自动类型推导</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"孙悟空\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确，只能用显示指定类型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 2、类模板在模板参数列表中可以有默认参数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猪八戒\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// AgeType 默认是一个整型，所以在这里使用的时候可以把模板参数列表的 int 删掉也不会报错</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  p2<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>类模板使用只能用显示指定类型方式</li>\n<li>类模板类模板中的模板参数列表可以有默认参数</li>\n</ul>\n<h3 id=\"133-类模板中成员函数创建时机\"><a class=\"anchor\" href=\"#133-类模板中成员函数创建时机\">#</a> 1.3.3 类模板中成员函数创建时机</h3>\n<p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p>\n<ul>\n<li>普通类中的成员函数一开始就可以创建</li>\n<li>类模板中的成员函数在调用时才创建</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person1 show\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person2 show\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  T obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    obj<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    obj<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 没有下面几行代码的时候，程序能编译通过。因为 fun1 和 fun2 这两个成员函数只要没有被调用，就不会被创建，因为不确定 obj 是什么数据类型。这就是类模板中的成员函数一开始不会创建</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  MyClass<span class=\"token operator\">&lt;</span>Person1<span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  m<span class=\"token punctuation\">.</span><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">//m.fun2 ();// 编译会出错，说明函数调用才会去创建成员函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p>\n<h3 id=\"134-类模板对象做函数参数\"><a class=\"anchor\" href=\"#134-类模板对象做函数参数\">#</a> 1.3.4 类模板对象做函数参数</h3>\n<p>学习目标：</p>\n<ul>\n<li>类模板实例化出的对象，向函数传参的方式</li>\n</ul>\n<p>一共有三种传入方式：</p>\n<ol>\n<li>指定传入的类型   --- 直接显示对象的数据类型</li>\n<li>参数模板化           --- 将对象中的参数变为模板进行传递</li>\n<li>整个类模板化       --- 将这个对象类型 模板化进行传递</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 类模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>T1 name<span class=\"token punctuation\">,</span> T2 age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>mName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>mAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>mName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" age: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>mAge <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  T1 mName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  T2 mAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 1、指定传入的类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printPerson1</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"孙悟空\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">printPerson1</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 2、参数模板化</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printPerson2</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 看编译器推导出来的 T1 / T2 是什么数据类型：</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"T1的类型为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"T2的类型为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>T2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// i</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">//typeid (T1) 告诉你 T1 是什么类型，.name () 返回类型名称的字符串</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猪八戒\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">printPerson2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 3、整个类模板化</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printPerson3</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"T的类型为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 6PersonINSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiE</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唐僧\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token function\">printPerson3</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>\n<p>通过类模板创建的对象，可以有三种方式向函数中进行传参</p>\n</li>\n<li>\n<p>使用比较广泛是第一种：指定传入的类型</p>\n<blockquote>\n<p>第二、三种是类模板配合着函数模板，一般来说没有人做这么复杂</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"135-类模板与继承\"><a class=\"anchor\" href=\"#135-类模板与继承\">#</a> 1.3.5 类模板与继承</h3>\n<p>当类模板碰到继承时，需要注意一下几点：</p>\n<ul>\n<li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中 T 的类型</li>\n<li>如果不指定，编译器无法给子类分配内存</li>\n<li>如果想灵活指定出父类中 T 的类型，子类也需变为类模板</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  T m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//class Son : public Base  // 错误，因为父类中的 T 类型成员要继承到子类中，但子类不是一个模板，算不出来一个子类对象到底占多少个内存空间，确定不出来继承下来的 T m 到底占多少内存空间。c++ 编译需要给子类分配内存，必须知道父类中 T 的类型才可以向下继承</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 必须指定一个类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Son c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 如果想灵活指定父类中 T 类型，子类也需要变成类模板</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 类模板继承类模板，可以用 T2 指定父类中的 T 类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son2</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T2</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// T1 obj;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">Son2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// i</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>T2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// c</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  Son2<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> child1<span class=\"token punctuation\">;</span><span class=\"token comment\">//int 和 char 分别传给 T1 和 T2，T2 给父类 Base&lt;T2>，让父类中的 & lt;class T > 变成 char，就可以指定出父类中的 m 的数据类型，再来继承给 Son2</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：如果父类是类模板，子类需要指定出父类中 T 的数据类型</p>\n<h3 id=\"136-类模板成员函数类外实现\"><a class=\"anchor\" href=\"#136-类模板成员函数类外实现\">#</a> 1.3.6 类模板成员函数类外实现</h3>\n<p>学习目标：能够掌握类模板中的成员函数类外实现</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 类模板中成员函数类外实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 成员函数类内声明</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>T1 name<span class=\"token punctuation\">,</span> T2 age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  T1 m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  T2 m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 构造函数 类外实现</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>T1 name<span class=\"token punctuation\">,</span> T2 age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// &lt;T1, T2 > 告诉编译器这是一个类模板的类外实现，而不是普通的成员函数的类外实现</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 成员函数 类外实现</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p>\n<h3 id=\"137-类模板分文件编写\"><a class=\"anchor\" href=\"#137-类模板分文件编写\">#</a> 1.3.7 类模板分文件编写</h3>\n<p>学习目标：</p>\n<ul>\n<li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li>\n</ul>\n<p>问题：</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411091119600.png\" alt=\"\" /></p>\n<p>person.h：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>T1 name<span class=\"token punctuation\">,</span> T2 age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  T1 m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  T2 m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>person.cpp：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"person.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 构造函数 类外实现</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>T1 name<span class=\"token punctuation\">,</span> T2 age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 成员函数 类外实现</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>main.cpp：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"person.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译运行后报错</p>\n</blockquote>\n<ul>\n<li>\n<p>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</p>\n<blockquote>\n<p>类模板中的成员函数一开始是不会创建的，所以当包含.h 的时候，相当于只让.h 中的代码让编译器看到了，编译器看到这些代码之后不会在 person.cpp 文件中生成 <code>Person(T1 name, T2 age);</code>  和 <code>void showPerson();</code>  这两个函数，person.cpp 文件编译器从来都没有见过。所以最后在链接阶段的时候链接不到这两个函数</p>\n</blockquote>\n</li>\n</ul>\n<p>解决：</p>\n<ul>\n<li>\n<p>解决方式 1：直接包含.cpp 源文件</p>\n<p>把 main.cpp 改为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"person.cpp\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>相当于让编译器直接去看 <code>Person(T1 name, T2 age);</code>  和 <code>void showPerson();</code>  函数实现的代码，person.cpp 里边又 include 了一下 person.h，让编译器又看到了 person.h 里的代码</p>\n</blockquote>\n</li>\n<li>\n<p>解决方式 2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp 是约定的名称，并不是强制</p>\n<p>person.hpp 中代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class T1, class T2&gt;\nclass Person &#123;\n public:\n  Person(T1 name, T2 age);\n  void showPerson();\n\n public:\n  T1 m_Name;\n  T2 m_Age;\n&#125;;\n\n// 构造函数 类外实现\ntemplate &lt;class T1, class T2&gt;\nPerson&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;\n  this-&gt;m_Name = name;\n  this-&gt;m_Age = age;\n&#125;\n\n// 成员函数 类外实现\ntemplate &lt;class T1, class T2&gt;\nvoid Person&lt;T1, T2&gt;::showPerson() &#123;\n  cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;\n&#125;\n</code></pre>\n<p>main.cpp 中代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"person.hpp\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p>\n<h3 id=\"138-类模板与友元\"><a class=\"anchor\" href=\"#138-类模板与友元\">#</a> 1.3.8 类模板与友元</h3>\n<p>学习目标：</p>\n<ul>\n<li>掌握类模板配合友元函数的类内和类外实现</li>\n</ul>\n<p>全局函数类内实现 - 直接在类内声明友元即可</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 全局函数类内实现</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printPerson</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>T1 name<span class=\"token punctuation\">,</span> T2 age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  T1 m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  T2 m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">printPerson</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>friend void printPerson(Person&lt;T1, T2&gt;&amp; p)</code>  这是类模板对象做函数参数 - 参数模板化类型，但是这行代码前面不用写 <code>template &lt;class T1, class T2&gt;</code> 。原因：</p>\n<p>在 C++ 中，当在类内部定义一个友元函数（ <code>friend</code>  function）时，确实不需要在友元函数的声明前面再次写出模板参数。这是因为友元函数的声明是在类模板的上下文中进行的，编译器已经知道了模板参数的类型。</p>\n<ol>\n<li>\n<p><strong>友元函数的作用</strong>：</p>\n<p>友元函数可以访问类的私有成员。在你的代码中， <code>printPerson</code>  函数被声明为  <code>Person</code>  类的友元函数，因此它可以访问  <code>m_Name</code>  和  <code>m_Age</code>  这两个私有成员。</p>\n</li>\n<li>\n<p><strong>模板上下文</strong>：</p>\n<p>当你在  <code>Person</code>  类内部声明  <code>friend void printPerson(Person&lt;T1, T2&gt;&amp; p)</code>  时，编译器已经在  <code>Person</code>  类的上下文中，因此它知道  <code>T1</code>  和  <code>T2</code>  是模板参数。你不需要在友元函数的声明中再次指定模板参数。</p>\n</li>\n<li>\n<p><strong>编译器的处理</strong>：</p>\n<p>编译器在处理友元函数时，会将其视为一个与类模板相关的函数。它会在实例化  <code>Person</code>  类模板时，自动将  <code>T1</code>  和  <code>T2</code>  替换为实际的类型。</p>\n</li>\n</ol>\n</blockquote>\n<p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 因为类外实现的 printPerson 全局函数有一个参数 Person，所以要提前让编译器知道 Person 类存在</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 类外实现</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printPerson</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"类外实现 --- 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 如果全局函数是类外实现，需要让编译器提前知道这个函数的存在</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token generic-function\"><span class=\"token function\">printPerson</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 若不加 & lt;> 会报错，因为不加的话 printPerson 就是一个普通函数的声明，而上方类外是函数模板的实现，导致上下不一致。所以在这需要多加空模板参数列表 & lt;></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>T1 name<span class=\"token punctuation\">,</span> T2 age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  T1 m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  T2 m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  Person<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">printPerson</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p>\n<h3 id=\"139-类模板案例\"><a class=\"anchor\" href=\"#139-类模板案例\">#</a> 1.3.9 类模板案例</h3>\n<p>案例描述：实现一个通用的数组类，要求如下：</p>\n<ul>\n<li>可以对内置数据类型以及自定义数据类型的数据进行存储</li>\n<li>将数组中的数据存储到堆区</li>\n<li>构造函数中可以传入数组的容量</li>\n<li>提供对应的拷贝构造函数以及 operator = 防止浅拷贝问题</li>\n<li>提供尾插法和尾删法对数组中的数据进行增加和删除</li>\n<li>可以通过下标的方式访问数组中的元素</li>\n<li>可以获取数组中当前元素个数和数组的容量</li>\n</ul>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111017175.png\" alt=\"\" /></p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<p>myArray.hpp 中代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArray</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  T<span class=\"token operator\">*</span> pAddress<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 指针指向堆区开辟的真实的数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Capacity<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数组容量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Size<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 数组大小</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 有参构造，参数：容量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">MyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">MyArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 拷贝构造</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">MyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyArray<span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Capacity <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>m_Capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>m_Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//this->pAddress = arr.pAddress;// 指针不能直接这样赋值，浅拷贝的问题：会导致堆区的数据重复释放</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 编译器提供的拷贝构造写法如上</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 深拷贝</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>m_Capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 将 arr 中的数据都拷贝过来</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>pAddress<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//operator= 防止浅拷贝问题</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// 返回自身的引用，不返回 void 是因为有 a = b = c 链式操作，如果做一个等号赋值后返回的是 void，就不能再赋值给 a 了</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  MyArray<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyArray<span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 先判断原来堆区是否有数据，如果有先释放</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 深拷贝</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Capacity <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>m_Capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>m_Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>m_Capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>pAddress<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// 尾插法</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pushBack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 为了防止传入的数被修改，一般写 const T&amp;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 判断容量是否等于大小</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Capacity <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在数组末尾插入数据</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 更新数组大小</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token comment\">// 尾删法</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">popBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 让用户访问不到最后一个元素，即为尾删，逻辑删除</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token comment\">// 通过下标方式访问数组中的元素</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//arr [0] = 100。这个函数返回值如果想作为左值存在的话，要返回引用才可以</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>pAddress<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// 返回数组容量</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token comment\">// 返回数组大小</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>类模板案例 — 数组类封装.cpp 中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"myArray.hpp\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printIntArray</span><span class=\"token punctuation\">(</span>MyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 测试自定义数据类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  string m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printPersonArray</span><span class=\"token punctuation\">(</span>MyArray<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  MyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">arr1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  MyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">arr3</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  arr3 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    arr1<span class=\"token punctuation\">.</span><span class=\"token function\">pushBack</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 利用尾插法向数组中插入数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr1的打印输出为: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">printIntArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr1的容量为：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr1的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  MyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">arr2</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr2的打印输出为：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token function\">printIntArray</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  arr2<span class=\"token punctuation\">.</span><span class=\"token function\">popBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr2尾删后：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr2的容量为：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr2的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  MyArray<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"孙悟空\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"韩信\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  Person <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"妲己\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  Person <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵云\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  Person <span class=\"token function\">p5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"安其拉\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">pushBack</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">pushBack</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">pushBack</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">pushBack</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">pushBack</span><span class=\"token punctuation\">(</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token function\">printPersonArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr的容量为：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<p>能够利用所学知识点实现通用的数组</p>\n<h1 id=\"2-stl初识\"><a class=\"anchor\" href=\"#2-stl初识\">#</a> 2 STL 初识</h1>\n<h2 id=\"21-stl的诞生\"><a class=\"anchor\" href=\"#21-stl的诞生\">#</a> 2.1 STL 的诞生</h2>\n<ul>\n<li>长久以来，软件界一直希望建立一种可重复利用的东西</li>\n<li>C++ 的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></li>\n<li>大多情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</li>\n<li>为了建立数据结构和算法的一套标准，诞生了<strong> STL</strong></li>\n</ul>\n<h2 id=\"22-stl基本概念\"><a class=\"anchor\" href=\"#22-stl基本概念\">#</a> 2.2 STL 基本概念</h2>\n<ul>\n<li>STL(Standard Template Library,<strong> 标准模板库</strong>)</li>\n<li>STL 从广义上分为: <strong>容器 (container) 算法 (algorithm) 迭代器 (iterator)</strong></li>\n<li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li>\n<li>STL 几乎所有的代码都采用了模板类或者模板函数</li>\n</ul>\n<h2 id=\"23-stl六大组件\"><a class=\"anchor\" href=\"#23-stl六大组件\">#</a> 2.3 STL 六大组件</h2>\n<p>STL 大体分为六大组件，分别是:<strong> 容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p>\n<ol>\n<li>\n<p>容器：各种数据结构，如 vector、list、deque、set、map 等，用来存放数据。</p>\n</li>\n<li>\n<p>算法：各种常用的算法，如 sort、find、copy、for_each 等</p>\n</li>\n<li>\n<p>迭代器：扮演了容器与算法之间的胶合剂。</p>\n</li>\n<li>\n<p>仿函数：行为类似函数，可作为算法的某种策略。</p>\n</li>\n<li>\n<p>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</p>\n</li>\n<li>\n<p>空间配置器：负责空间的配置与管理。</p>\n<blockquote>\n<p>vector、list 这些容器在用的时候底层有些数据开辟到堆区，开辟到堆区的数据要手动开辟手动释放，程序员不用管，空间配置器帮忙操作空间的开辟 / 释放</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"24-stl中容器-算法-迭代器\"><a class=\"anchor\" href=\"#24-stl中容器-算法-迭代器\">#</a> 2.4 STL 中容器、算法、迭代器</h2>\n<p>** 容器：** 置物之所也</p>\n<p>STL<strong> 容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p>\n<p>常用的数据结构：数组，链表，树，栈，队列，集合，映射表 等</p>\n<p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p>\n<ul>\n<li>\n<p><strong>序列式容器</strong>：强调值的排序，序列式容器中的每个元素均有固定的位置。</p>\n<blockquote>\n<p>比如说现在有一套数据 1 3 5 4 2，把这几个数据放在一个数组中，放完之后的顺序依然是 1 3 5 4 2。每一个元素都有固定位置，会按照插入的顺序往容器里放</p>\n</blockquote>\n</li>\n<li>\n<p><strong>关联式容器</strong>：二叉树结构，各元素之间没有严格的物理上的顺序关系</p>\n<blockquote>\n<p>同样是 1 3 5 4 2 这套数据，放到关联式容器中可能最后打印出来的结果是 1 2 3 4 5，因为在放这些数据的同时做了一个排序的操作</p>\n</blockquote>\n</li>\n</ul>\n<p>** 算法：** 问题之解法也</p>\n<p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法 (Algorithms)</p>\n<p>算法分为:<strong> 质变算法</strong>和<strong>非质变算法</strong>。</p>\n<p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p>\n<p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p>\n<p>** 迭代器：** 容器和算法之间粘合剂</p>\n<blockquote>\n<p>比如说想提供一套遍历的算法，但是想遍历容器中的数据要通过迭代器才可以。所以算法要通过迭代器才可以访问容器中的元素</p>\n</blockquote>\n<p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p>\n<p>每个容器都有自己专属的迭代器</p>\n<p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p>\n<p>迭代器种类：</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>功能</th>\n<th>支持运算</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>输入迭代器</td>\n<td>对数据的只读访问</td>\n<td>只读，支持 ++、==、！=</td>\n</tr>\n<tr>\n<td>输出迭代器</td>\n<td>对数据的只写访问</td>\n<td>只写，支持 ++</td>\n</tr>\n<tr>\n<td>前向迭代器</td>\n<td>读写操作，并能向前推进迭代器</td>\n<td>读写，支持 ++、==、！=</td>\n</tr>\n<tr>\n<td>双向迭代器</td>\n<td>读写操作，并能向前和向后操作</td>\n<td>读写，支持 ++、--，</td>\n</tr>\n<tr>\n<td>随机访问迭代器</td>\n<td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>\n<td>读写，支持 ++、--、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td>\n</tr>\n</tbody>\n</table>\n<p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>\n<h2 id=\"25-容器算法迭代器初识\"><a class=\"anchor\" href=\"#25-容器算法迭代器初识\">#</a> 2.5 容器算法迭代器初识</h2>\n<p>了解 STL 中容器、算法、迭代器概念之后，我们利用代码感受 STL 的魅力</p>\n<p>STL 中最常用的容器为 Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p>\n<h3 id=\"251-vector存放内置数据类型\"><a class=\"anchor\" href=\"#251-vector存放内置数据类型\">#</a> 2.5.1 vector 存放内置数据类型</h3>\n<p>容器：      <code>vector</code></p>\n<p>算法：      <code>for_each</code></p>\n<p>迭代器：  <code>vector&lt;int&gt;::iterator</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span>  <span class=\"token comment\">// 标准算法头文件</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//vector 容器存放内置数据类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 创建了一个 vector 容器，可以把它认为是一个数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 向容器中插入数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 通过迭代器访问容器中的数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator itBegin <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 起始迭代器，现在认为迭代器是一个指针就行了，指向容器中第一个元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator itEnd <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//  结束迭代器，指向容器中最后一个元素的下一个位置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 第一种遍历方式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itBegin <span class=\"token operator\">!=</span> itEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>itBegin <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    itBegin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 第二种遍历方式</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 第三种遍历方式：利用 STL 提供的遍历算法</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>for_each 算法式底层实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Function</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">inline</span> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20 _Function</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span> _Function __f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> __first <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>__first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">__f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>__first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> __f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"252-vector存放自定义数据类型\"><a class=\"anchor\" href=\"#252-vector存放自定义数据类型\">#</a> 2.5.2 Vector 存放自定义数据类型</h3>\n<p>学习目标：vector 中存放自定义数据类型，并打印输出</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 自定义数据类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    mName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    mAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  string mName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> mAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 存放对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  Person <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  Person <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  Person <span class=\"token function\">p5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 向容器中添加数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 遍历容器中的数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Name:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Age:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mAge <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Name:\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>mName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Age:\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>mAge <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 存放自定义数据类型指针</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">*</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  Person <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  Person <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  Person <span class=\"token function\">p5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    Person<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Name:\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span>mName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Age:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>mAge <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"253-vector容器嵌套容器\"><a class=\"anchor\" href=\"#253-vector容器嵌套容器\">#</a> 2.5.3 Vector 容器嵌套容器</h3>\n<p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 创建小容器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 向小容器中添加数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    v1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    v2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v3<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    v4<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 将容器元素插入到 vector v 中</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 通过大容器，把所有数据遍历一遍</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator vit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> vit <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> vit<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"3-stl-常用容器\"><a class=\"anchor\" href=\"#3-stl-常用容器\">#</a> 3 STL- 常用容器</h1>\n<h2 id=\"31-string容器\"><a class=\"anchor\" href=\"#31-string容器\">#</a> 3.1 string 容器</h2>\n<h3 id=\"311-string基本概念\"><a class=\"anchor\" href=\"#311-string基本概念\">#</a> 3.1.1 string 基本概念</h3>\n<p><strong>本质：</strong></p>\n<ul>\n<li>string 是 C++ 风格的字符串，而 string 本质上是一个类</li>\n</ul>\n<p><em><em>string 和 char</em> 区别：</em>*</p>\n<ul>\n<li>char* 是一个指针</li>\n<li>string 是一个类，类内部封装了 <code>char*</code> ，管理这个字符串，是一个 char * 型的容器。</li>\n</ul>\n<p><strong>特点：</strong></p>\n<p>string 类内部封装了很多成员方法</p>\n<p>例如：查找 find，拷贝 copy，删除 delete，替换 replace，插入 insert</p>\n<p><mark>string 管理 char * 所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</mark></p>\n<h3 id=\"312-string构造函数\"><a class=\"anchor\" href=\"#312-string构造函数\">#</a> 3.1.2 string 构造函数</h3>\n<p>构造函数原型：</p>\n<ul>\n<li><code>string();</code>           \t\t\t\t// 创建一个空的字符串 例如: string str;</li>\n<li><code>string(const char* s);</code> \t        // 使用字符串 s 初始化</li>\n<li><code>string(const string&amp; str);</code>     // 使用一个 string 对象初始化另一个 string 对象</li>\n<li><code>string(int n, char c);</code>            // 使用 n 个字符 c 初始化</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;string&gt;\n//string构造\n\nint main() &#123;\n\n\tstring s1; //默认构造。创建空字符串，调用无参构造函数\n\tcout &lt;&lt; &quot;str1 = &quot; &lt;&lt; s1 &lt;&lt; endl;\n\n\tconst char* str = &quot;hello world&quot;;\n\tstring s2(str); //将一个 C 风格的字符串（即以 null 结尾的字符数组）转换为 C++ 的 std::string 对象\n\tcout &lt;&lt; &quot;str2 = &quot; &lt;&lt; s2 &lt;&lt; endl;\n\n\tstring s3(s2); //调用拷贝构造函数\n\tcout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;\n\n\tstring s4(10, 'a');\n\tcout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li><code>s2</code>  和  <code>s3</code>  都是  <code>std::string</code>  类型的对象，它们各自维护自己的字符数组。在 C++ 的标准库实现中， <code>std::string</code>  通常会使用动态内存分配来存储字符串的字符数据。</li>\n<li>因此， <code>s2</code>  和  <code>s3</code>  内部的  <code>char*</code>  属性（如果有的话，具体实现可能会有所不同）指向不同的内存地址。 <code>s2</code>  的  <code>char*</code>  指向它自己的字符数组，而  <code>s3</code>  的  <code>char*</code>  指向它自己独立的字符数组。这意味着对  <code>s2</code>  的修改不会影响  <code>s3</code> ，反之亦然。</li>\n</ul>\n<p>因为 string 管理 char * 所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p>\n<p><code>std::string</code>  如何管理内存以及它的优势：</p>\n<ol>\n<li>\n<p><strong>内存管理</strong></p>\n<ul>\n<li>\n<p><strong>动态分配</strong>： <code>std::string</code>  会在需要时动态分配内存来存储字符串内容。这意味着你不需要手动管理内存（如使用  <code>new</code>  和  <code>delete</code> ）， <code>std::string</code>  会在对象的生命周期内自动处理内存分配和释放。</p>\n</li>\n<li>\n<p><strong>自动扩展</strong>：当你向  <code>std::string</code>  添加更多字符时，它会自动扩展其内部存储的大小，以适应新的内容。这避免了手动管理字符数组大小的问题。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>安全性</strong></p>\n<ul>\n<li>\n<p><strong>越界检查</strong>： <code>std::string</code>  提供了安全的方法来访问字符，例如使用  <code>at()</code>  方法，它会进行越界检查。如果你尝试访问超出范围的索引，它会抛出异常，而不是导致未定义行为。</p>\n</li>\n<li>\n<p><strong>内存越界</strong>：由于  <code>std::string</code>  管理自己的内存，使用它时不必担心像 C 风格字符串那样的缓冲区溢出问题。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>方便的操作</strong></p>\n<ul>\n<li>\n<p><strong>字符串操作</strong>： <code>std::string</code>  提供了许多方便的方法来处理字符串，例如连接、查找、替换、子串提取等。这些操作都经过优化，使用起来比手动处理字符数组要简单得多。</p>\n</li>\n<li>\n<p><strong>拷贝和赋值</strong>：<mark>当你将一个  <code>std::string</code>  赋值给另一个时，拷贝构造函数和赋值运算符会确保正确地复制内容，而不会出现指针共享的问题。</mark></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>资源管理</strong></p>\n<p><strong>RAII（资源获取即初始化）</strong>： <code>std::string</code>  遵循 RAII 原则，确保在对象生命周期结束时自动释放其占用的内存。这减少了内存泄漏的风险。</p>\n</li>\n</ol>\n</blockquote>\n<p>总结：string 的多种构造方式没有可比性，灵活使用即可</p>\n<h3 id=\"313-string赋值操作\"><a class=\"anchor\" href=\"#313-string赋值操作\">#</a> 3.1.3 string 赋值操作</h3>\n<p>功能描述：</p>\n<p>给 string 字符串进行赋值</p>\n<blockquote>\n<p>在初始化过后，重新给它的 char * 属性赋新的值</p>\n</blockquote>\n<p>赋值的函数原型：</p>\n<ul>\n<li><code>string&amp; operator=(const char* s);</code>              //char * 类型字符串 赋值给当前的字符串</li>\n<li><code>string&amp; operator=(const string &amp;s);</code>          // 把字符串 s 赋给当前的字符串</li>\n<li><code>string&amp; operator=(char c);</code>                           // 字符赋值给当前的字符串</li>\n<li><code>string&amp; assign(const char *s);</code>                   // 把字符串 s 赋给当前的字符串</li>\n<li><code>string&amp; assign(const char *s, int n);</code>      // 把字符串 s 的前 n 个字符赋给当前的字符串</li>\n<li><code>string&amp; assign(const string &amp;s);</code>               // 把字符串 s 赋给当前字符串</li>\n<li><code>string&amp; assign(int n, char c);</code>                   // 用 n 个字符 c 赋给当前字符串</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  string str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// hello world</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  string str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// hello world</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  string str3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  str3 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str3 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  string str4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  str4<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello c++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str4 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// hello c++</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  string str5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  str5<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello c++\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str5 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str5 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// hello</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  string str6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  str6<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str6 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str6 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// hello</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  string str7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  str7<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str7 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str7 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// xxxxx</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<p>string 的赋值方式很多， <code>operator=</code>   这种方式是比较实用的</p>\n<h3 id=\"314-string字符串拼接\"><a class=\"anchor\" href=\"#314-string字符串拼接\">#</a> 3.1.4 string 字符串拼接</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现在字符串末尾拼接字符串</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>string&amp; operator+=(const char* str);</code>                    // 重载 += 操作符</li>\n<li><code>string&amp; operator+=(const char c);</code>                          // 重载 += 操作符</li>\n<li><code>string&amp; operator+=(const string&amp; str);</code>                 // 重载 += 操作符</li>\n<li><code>string&amp; append(const char *s); </code>                                // 把字符串 s 连接到当前字符串结尾</li>\n<li><code>string&amp; append(const char *s, int n);</code>                  // 把字符串 s 的前 n 个字符连接到当前字符串结尾</li>\n<li><code>string&amp; append(const string &amp;s);</code>                            // 同 operator+=(const string&amp; str)</li>\n<li><code>string&amp; append(const string &amp;s, int pos, int n);</code> // 字符串 s 中从 pos 开始的 n 个字符连接到字符串结尾</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;string&gt;\n\n//字符串拼接\nint main() &#123;\n\n\tstring str1 = &quot;我&quot;;\n\tstr1 += &quot;爱玩游戏&quot;;\n\tcout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;// 我爱玩游戏\n  \n\tstr1 += ':';\n\tcout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;// 我爱玩游戏:\n  \n\tstring str2 = &quot;LOL DNF&quot;;\n\tstr1 += str2;\n\tcout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;// 我爱玩游戏:LOL DNF\n\n\tstring str3 = &quot;I&quot;;\n\tstr3.append(&quot; love &quot;);\n  \n\tstr3.append(&quot;game abcde&quot;, 4);\n  \n\tstr3.append(str2);\n  \n\tstr3.append(str2, 4, 3); // 从下标4位置开始 ，截取3个字符，拼接到字符串末尾\n\tcout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl;// I love gameLOL DNFDNF\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p>\n<h3 id=\"315-string查找和替换\"><a class=\"anchor\" href=\"#315-string查找和替换\">#</a> 3.1.5 string 查找和替换</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>查找：查找指定字符串是否存在</li>\n<li>替换：在指定的位置替换字符串</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>int find(const string&amp; str, int pos = 0) const;</code>               // 查找 str 第一次出现位置，从 pos 开始查找</li>\n<li><code>int find(const char* s, int pos = 0) const; </code>                      // 查找 s 第一次出现位置，从 pos 开始查找</li>\n<li><code>int find(const char* s, int pos, int n) const; </code>                // 从 pos 位置查找 s 的前 n 个字符第一次位置</li>\n<li><code>int find(const char c, int pos = 0) const; </code>                        // 查找字符 c 第一次出现位置</li>\n<li><code>int rfind(const string&amp; str, int pos = npos) const;</code>       // 查找 str 最后一次位置，从 pos 开始查找</li>\n<li><code>int rfind(const char* s, int pos = npos) const;</code>               // 查找 s 最后一次出现位置，从 pos 开始查找</li>\n<li><code>int rfind(const char* s, int pos, int n) const;</code>               // 从 pos 查找 s 的前 n 个字符最后一次位置</li>\n<li><code>int rfind(const char c, int pos = 0) const;  </code>                       // 查找字符 c 最后一次出现位置</li>\n<li><code>string&amp; replace(int pos, int n, const string&amp; str); </code>        // 替换从 pos 开始 n 个字符为字符串 str</li>\n<li><code>string&amp; replace(int pos, int n,const char* s); </code>                  // 替换从 pos 开始的 n 个字符为字符串 s</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">void test01() &#123;\n\t//查找\n\tstring str1 = &quot;abcdefgde&quot;;\n\n\tint pos = str1.find(&quot;de&quot;);\n\tif (pos == -1) &#123;\n\t\tcout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;// 3\n\t&#125;\n\n\tpos = str1.rfind(&quot;de&quot;);\n\tcout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;// 7\n&#125;\n\nvoid test02() &#123;\n\t//替换\n\tstring str1 = &quot;abcdefgde&quot;;\n\tstr1.replace(1, 3, &quot;1111&quot;);// 从1号位置起的3个字符替换为&quot;1111&quot;\n\tcout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;// a1111efgde\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>find 查找是从左往后，rfind 从右往左</li>\n<li>find 找到字符串后返回查找的第一个字符位置，找不到返回 - 1</li>\n<li>replace 在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li>\n</ul>\n<h3 id=\"316-string字符串比较\"><a class=\"anchor\" href=\"#316-string字符串比较\">#</a> 3.1.6 string 字符串比较</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>字符串之间的比较</li>\n</ul>\n<p><strong>比较方式：</strong></p>\n<ul>\n<li>字符串比较是按字符的 ASCII 码进行对比</li>\n</ul>\n<p>= 返回   0</p>\n<p>&gt; 返回   1</p>\n<p>&lt; 返回  -1</p>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>int compare(const string &amp;s) const; </code>   // 与字符串 s 比较</li>\n<li><code>int compare(const char *s) const;</code>       // 与字符串 s 比较</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//字符串比较\nint main() &#123;\n\n\tstring s1 = &quot;hello&quot;;\n\tstring s2 = &quot;aello&quot;;\n\n\tint ret = s1.compare(s2);// 1\n\n\tif (ret == 0) &#123;\n\t\tcout &lt;&lt; &quot;s1 等于 s2&quot; &lt;&lt; endl;\n\t&#125; else if (ret &gt; 0) &#123;\n\t\tcout &lt;&lt; &quot;s1 大于 s2&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;s1 小于 s2&quot; &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p>\n<h3 id=\"317-string字符存取\"><a class=\"anchor\" href=\"#317-string字符存取\">#</a> 3.1.7 string 字符存取</h3>\n<p>string 中单个字符存取方式有两种</p>\n<ul>\n<li><code>char&amp; operator[](int n); </code>      // 通过 [] 方式取字符</li>\n<li><code>char&amp; at(int n);   </code>                     // 通过 at 方法获取字符</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tstring str = &quot;hello world&quot;;\n\n\tfor (int i = 0; i &lt; str.size(); i++) &#123;\n\t\tcout &lt;&lt; str[i] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\tfor (int i = 0; i &lt; str.size(); i++) &#123;\n\t\tcout &lt;&lt; str.at(i) &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t//字符修改\n\tstr[0] = 'x';\n\tstr.at(1) = 'x';\n\tcout &lt;&lt; str &lt;&lt; endl;// xxllo world\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：string 字符串中单个字符存取有两种方式，利用 [ ] 或 at</p>\n<h3 id=\"318-string插入和删除\"><a class=\"anchor\" href=\"#318-string插入和删除\">#</a> 3.1.8 string 插入和删除</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 string 字符串进行插入和删除字符操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>string&amp; insert(int pos, const char* s);  </code>                 // 插入字符串</li>\n<li><code>string&amp; insert(int pos, const string&amp; str); </code>         // 插入字符串</li>\n<li><code>string&amp; insert(int pos, int n, char c);</code>                 // 在指定位置插入 n 个字符 c</li>\n<li><code>string&amp; erase(int pos, int n = npos);</code>                     // 删除从 Pos 开始的 n 个字符</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tstring str = &quot;hello&quot;;\n\tstr.insert(1, &quot;111&quot;);\n\tcout &lt;&lt; str &lt;&lt; endl;// h111ello\n\n\tstr.erase(1, 3);  //从1号位置开始3个字符\n\tcout &lt;&lt; str &lt;&lt; endl;// hello\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 插入和删除的起始下标都是从 0 开始</p>\n<h3 id=\"319-string子串\"><a class=\"anchor\" href=\"#319-string子串\">#</a> 3.1.9 string 子串</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>从字符串中获取想要的子串</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>string substr(int pos = 0, int n = npos) const;</code>    // 返回由 pos 开始的 n 个字符组成的字符串</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//子串\nint main() &#123;\n\n\tstring str = &quot;abcdefg&quot;;\n\tstring subStr = str.substr(1, 3);\n\tcout &lt;&lt; &quot;subStr = &quot; &lt;&lt; subStr &lt;&lt; endl;// bcd\n\n\tstring email = &quot;hello@sina.com&quot;;\n\tint pos = email.find(&quot;@&quot;);\n\tstring username = email.substr(0, pos);\n\tcout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;// hello\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 灵活的运用求子串功能，可以在实际开发中获取有效的信息</p>\n<h2 id=\"32-vector容器\"><a class=\"anchor\" href=\"#32-vector容器\">#</a> 3.2 vector 容器</h2>\n<h3 id=\"321-vector基本概念\"><a class=\"anchor\" href=\"#321-vector基本概念\">#</a> 3.2.1 vector 基本概念</h3>\n<p><strong>功能：</strong></p>\n<ul>\n<li>vector 数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li>\n</ul>\n<p><strong>vector 与普通数组区别：</strong></p>\n<ul>\n<li>\n<p>不同之处在于数组是静态空间，而 vector 可以<strong>动态扩展</strong></p>\n<blockquote>\n<p>比如现在写一个数组之后，一旦分配了内存，就不能再扩展了，也不能再少了</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>动态扩展：</strong></p>\n<ul>\n<li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111442928.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>front () 代表容器中第一个元素，back () 是容器的最后一个元素</p>\n<p>v.begin () 这个迭代器指向它第一个元素，v.rbegin () 指向倒数第一个元素，rend () 指向第一个元素的前一个位置</p>\n</blockquote>\n<ul>\n<li>\n<p>vector 容器的迭代器是支持随机访问的迭代器</p>\n<blockquote>\n<p>vector 容器的迭代器可以一下跳好几个，跳跃式地访问。比如 v.begin () 迭代器一下可以加 3 / 加 4 再访问指向的元素</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"322-vector构造函数\"><a class=\"anchor\" href=\"#322-vector构造函数\">#</a> 3.2.2 vector 构造函数</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>创建 vector 容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>vector&lt;T&gt; v; </code>                \t\t     // 采用模板实现类实现，默认构造函数</li>\n<li><code>vector(v.begin(), v.end());   </code>        // 将 v [begin (), end ()) 区间中的元素拷贝给本身。</li>\n<li><code>vector(n, elem);</code>                             // 构造函数将 n 个 elem 拷贝给本身。</li>\n<li><code>vector(const vector&amp; vec);</code>          // 拷贝构造函数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\nvoid printVector(vector&lt;int&gt;&amp; v) &#123;\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1; //无参构造，默认构造\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t&#125;\n\tprintVector(v1);\n\n\tvector&lt;int&gt; v2(v1.begin(), v1.end());// 通过区间方式进行构造。把两个迭代器传进去，把迭代器之间的数据赋值给v2\n\tprintVector(v2);\n\n\tvector&lt;int&gt; v3(10, 100);// n个elem方式构造\n\tprintVector(v3);\n\t\n\tvector&lt;int&gt; v4(v3);// 拷贝构造\n\tprintVector(v4);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**vector 的多种构造方式没有可比性，灵活使用即可</p>\n<h3 id=\"323-vector赋值操作\"><a class=\"anchor\" href=\"#323-vector赋值操作\">#</a> 3.2.3 vector 赋值操作</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>给 vector 容器进行赋值</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>vector&amp; operator=(const vector &amp;vec);</code> // 重载等号操作符</p>\n</li>\n<li>\n<p><code>assign(beg, end);</code>        // 将 [beg, end) 区间中的数据拷贝赋值给本身。</p>\n</li>\n<li>\n<p><code>assign(n, elem);</code>         // 将 n 个 elem 拷贝赋值给本身。</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\nvoid printVector(vector&lt;int&gt;&amp; v) &#123;\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//赋值操作\nint main() &#123;\n\n\tvector&lt;int&gt; v1; //无参构造\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t&#125;\n\tprintVector(v1);\n\n\tvector&lt;int&gt; v2;\n\tv2 = v1;// 1、operator=赋值\n\tprintVector(v2);\n\n\tvector&lt;int&gt; v3;\n\tv3.assign(v1.begin(), v1.end());// 2、assign\n\tprintVector(v3);\n\n\tvector&lt;int&gt; v4;\n\tv4.assign(10, 100);// 3、n个elem方式赋值\n\tprintVector(v4);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结： vector 赋值方式比较简单，使用 operator=，或者 assign 都可以</p>\n<h3 id=\"324-vector容量和大小\"><a class=\"anchor\" href=\"#324-vector容量和大小\">#</a> 3.2.4 vector 容量和大小</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 vector 容器的容量和大小操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>empty(); </code>                             // 判断容器是否为空</p>\n</li>\n<li>\n<p><code>capacity();</code>                       // 容器的容量</p>\n</li>\n<li>\n<p><code>size();</code>                               // 返回容器中元素的个数</p>\n</li>\n<li>\n<p><code>resize(int num);</code>              // 重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。</p>\n<p>​\t\t\t\t\t      // 如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n<li>\n<p><code>resize(int num, elem);</code>   // 重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。</p>\n<p>​\t\t\t\t              // 如果容器变短，则末尾超出容器长度的元素被删除</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\nvoid printVector(vector&lt;int&gt;&amp; v) &#123;\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t&#125;\n\tprintVector(v1);\n\tif (v1.empty()) &#123;\n\t\tcout &lt;&lt; &quot;v1为空&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;v1不为空&quot; &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;v1的容量 = &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;// 13\n\t\tcout &lt;&lt; &quot;v1的大小 = &quot; &lt;&lt; v1.size() &lt;&lt; endl;// 10\n\t&#125;\n\n\t//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充\n\tv1.resize(15,10);\n\tprintVector(v1);\n\n\t//resize 重新指定大小 ，若指定的更小，超出部分元素被删除\n\tv1.resize(5);\n\tprintVector(v1);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>判断是否为空  --- empty</li>\n<li>返回元素个数  --- size</li>\n<li>返回容器容量  --- capacity</li>\n<li>重新指定大小  ---  resize</li>\n</ul>\n<h3 id=\"325-vector插入和删除\"><a class=\"anchor\" href=\"#325-vector插入和删除\">#</a> 3.2.5 vector 插入和删除</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 vector 容器进行插入、删除操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>push_back(ele);</code>                                          // 尾部插入元素 ele</li>\n<li><code>pop_back();</code>                                                 // 删除最后一个元素</li>\n<li><code>insert(const_iterator pos, ele);</code>         // 迭代器指向位置 pos 插入元素 ele</li>\n<li><code>insert(const_iterator pos, int count,ele);</code> // 迭代器指向位置 pos 插入 count 个元素 ele</li>\n<li><code>erase(const_iterator pos);</code>                      // 删除迭代器指向的元素</li>\n<li><code>erase(const_iterator start, const_iterator end);</code> // 删除迭代器从 start 到 end 之间的元素</li>\n<li><code>clear();</code>                                                         // 删除容器中所有元素</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\nvoid printVector(vector&lt;int&gt;&amp; v) &#123;\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//插入和删除\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\t//尾插\n\tv1.push_back(10);\n\tv1.push_back(20);\n\tv1.push_back(30);\n\tv1.push_back(40);\n\tv1.push_back(50);\n\tprintVector(v1);\n\t//尾删\n\tv1.pop_back();\n\tprintVector(v1);\n\t//插入，第一个参数是迭代器\n\tv1.insert(v1.begin(), 100);\n\tprintVector(v1);\n\tv1.insert(v1.begin(), 2, 1000);\n\tprintVector(v1);\n\t//删除，参数也是迭代器\n\tv1.erase(v1.begin());\n\tprintVector(v1);\n\tv1.erase(v1.begin(), v1.end());\n\t//清空\n\tv1.clear();\n\tprintVector(v1);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>尾插  --- push_back</li>\n<li>尾删  --- pop_back</li>\n<li>插入  --- insert    (位置迭代器)</li>\n<li>删除  --- erase  （位置迭代器）</li>\n<li>清空  ---  clear</li>\n</ul>\n<h3 id=\"326-vector数据存取\"><a class=\"anchor\" href=\"#326-vector数据存取\">#</a> 3.2.6 vector 数据存取</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 vector 中的数据的存取操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>at(int idx); </code>      // 返回索引 idx 所指的数据</li>\n<li><code>operator[]; </code>        // 返回索引 idx 所指的数据</li>\n<li><code>front(); </code>             // 返回容器中第一个数据元素</li>\n<li><code>back();</code>               // 返回容器中最后一个数据元素</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\nint main() &#123;\n  vector&lt;int&gt; v1;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t&#125;\n\n  // 利用[]方式访问容器中元素\n\tfor (int i = 0; i &lt; v1.size(); i++) &#123;\n\t\tcout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n  // 利用at方式访问元素\n\tfor (int i = 0; i &lt; v1.size(); i++) &#123;\n\t\tcout &lt;&lt; v1.at(i) &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;v1的第一个元素为： &quot; &lt;&lt; v1.front() &lt;&lt; endl;\n\tcout &lt;&lt; &quot;v1的最后一个元素为： &quot; &lt;&lt; v1.back() &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>除了用迭代器获取 vector 容器中元素，[ ] 和 at 也可以</li>\n<li>front 返回容器第一个元素</li>\n<li>back 返回容器最后一个元素</li>\n</ul>\n<h3 id=\"327-vector互换容器\"><a class=\"anchor\" href=\"#327-vector互换容器\">#</a> 3.2.7 vector 互换容器</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现两个容器内元素进行互换</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>swap(vec);</code>   // 将 vec 与本身的元素互换</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\nvoid printVector(vector&lt;int&gt;&amp; v) &#123;\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nvoid test01() &#123;\n\tvector&lt;int&gt; v1;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t&#125;\n\tprintVector(v1);// 0 1 2 3 4 5 6 7 8 9 \n\n\tvector&lt;int&gt; v2;\n\tfor (int i = 10; i &gt; 0; i--) &#123;\n\t\tv2.push_back(i);\n\t&#125;\n\tprintVector(v2);// 10 9 8 7 6 5 4 3 2 1 \n\n\t//互换容器\n\tcout &lt;&lt; &quot;互换后&quot; &lt;&lt; endl;\n\tv1.swap(v2);\n\tprintVector(v1);// 10 9 8 7 6 5 4 3 2 1 \n\tprintVector(v2);// 0 1 2 3 4 5 6 7 8 9 \n&#125;\n\n// 实际用途：巧用swap可以收缩内存空间\nvoid test02() &#123;\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 100000; i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n\tcout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;// 138255\n\tcout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;// 100000\n\n\tv.resize(3);\n\tcout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;// 138255\n\tcout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;// 3\n\n\t//巧用swap收缩内存\n\tvector&lt;int&gt;(v).swap(v); \n  // vector&lt;int&gt;(v)是一个匿名对象，调用拷贝构造函数拷贝v来创建的新对象。按照v的目前所用的元素个数来初始化这个匿名对象的大小，所以这个匿名对象一开始的容量就是3，大小也是3\n  // swap(v)互换元素类似于指针的交换，容器交换之后v指向匿名对象，匿名对象指向v。所以再输出v的容量是3，v的大小也是3\n  // 当前行代码执行完之后，编译器回收匿名对象，程序员不用管了，匿名对象不会再占用空间\n\tcout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;// 3\n\tcout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;// 3\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111544241.png\" alt=\"\" /></p>\n</blockquote>\n<p>总结：swap 可以使两个容器互换，可以达到实用的收缩内存效果</p>\n<h3 id=\"328-vector预留空间\"><a class=\"anchor\" href=\"#328-vector预留空间\">#</a> 3.2.8 vector 预留空间</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>减少 vector 在动态扩展容量时的扩展次数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>reserve(int len);</code> // 容器预留 len 个元素长度，预留位置不初始化，元素不可访问。</p>\n<blockquote>\n<p>和 resize 不一样， <code>resize(int num, elem);</code>  可以初始化数据，若不传 elem 参数则初始化为默认值 0。reserve 只是找一块空地，空地上边什么都没有，所以不能访问这里边的元素。预留空间的意义只是分配内存了，但内存上边的数据没初始化</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\t//预留空间。上来就找了一块可以放10万个int的空间\n\tv.reserve(100000);\n\n\tint num = 0;// 统计开辟次数：即动态扩展的次数，找块更大的新空间，把原有数据拷贝到新空间下边，再释放掉原有的空间。若不预留空间，这样的操作重复做了30次，才把10万个数据全都放到新空间下了\n\tint* p = NULL;\n\tfor (int i = 0; i &lt; 100000; i++) &#123;\n\t\tv.push_back(i);\n\t\tif (p != &amp;v[0]) &#123;\n\t\t\tp = &amp;v[0];\n\t\t\tnum++;\n\t\t&#125;\n\t&#125;\n\n\tcout &lt;&lt; &quot;num:&quot; &lt;&lt; num &lt;&lt; endl;// 若不写v.reserve(100000);则打印30，写了打印1\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：如果数据量较大，可以一开始利用 reserve 预留空间</p>\n<h2 id=\"33-deque容器\"><a class=\"anchor\" href=\"#33-deque容器\">#</a> 3.3 deque 容器</h2>\n<h3 id=\"331-deque容器基本概念\"><a class=\"anchor\" href=\"#331-deque容器基本概念\">#</a> 3.3.1 deque 容器基本概念</h3>\n<p><strong>功能：</strong></p>\n<ul>\n<li>双端数组，可以对头端进行插入删除操作</li>\n</ul>\n<p><strong>deque 与 vector 区别：</strong></p>\n<ul>\n<li>vector 对于头部的插入删除效率低，数据量越大，效率越低</li>\n<li>deque 相对而言，对头部的插入删除速度回比 vector 快</li>\n<li>vector 访问元素时的速度会比 deque 快，这和两者内部实现有关</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111611293.jpg\" alt=\"\" /></p>\n<p>deque 内部工作原理:</p>\n<p>deque 内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p>\n<p>中控器维护的是每个缓冲区的地址，使得使用 deque 时像一片连续的内存空间</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111612226.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>当数据进行尾部的插入的时候，就往第三排后边再插一个元素 ele... 插满了之后再插数据就再找一段缓冲区插一个新的数据 ele 进去，然后在中控器中记录这块缓冲区的地理位置比如 0x04。头部也一样，紧挨着第一个 ele 的左边开始插</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111618185.png\" alt=\"\" /></p>\n<p>只不过访问数据的速度没有 vector 快，因为访问到第一排末尾之后，再访问下一排元素，要通过中控器中的地址去找到下一个缓冲区的数据</p>\n</blockquote>\n<ul>\n<li>\n<p>deque 容器的迭代器也是支持随机访问的</p>\n<blockquote>\n<p>也可以跳跃式地访问 deque 里边的元素</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"332-deque构造函数\"><a class=\"anchor\" href=\"#332-deque构造函数\">#</a> 3.3.2 deque 构造函数</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>deque 容器构造</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>deque&lt;T&gt;</code>  deqT;                      // 默认构造形式</li>\n<li><code>deque(beg, end);</code>                   // 构造函数将 [beg, end) 区间中的元素拷贝给本身。</li>\n<li><code>deque(n, elem);</code>                     // 构造函数将 n 个 elem 拷贝给本身。</li>\n<li><code>deque(const deque&amp; deq);</code>    // 拷贝构造函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;deque&gt;\n\nvoid printDeque(const deque&lt;int&gt;&amp; d) &#123;\n\tfor (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;\n    // *it = 100;// 除了读，还可以做写操作。为了防止写操作通常可以在容器deque&lt;int&gt;&amp; d前加一个const来限定容器只读。这时候要普通的迭代器deque&lt;int&gt;::iterator就不够了，所以要变成const_iterator\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//deque构造\nint main() &#123;\n\n\tdeque&lt;int&gt; d1; //无参构造函数\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\td1.push_back(i);\n\t&#125;\n\tprintDeque(d1);\n\tdeque&lt;int&gt; d2(d1.begin(),d1.end());\n\tprintDeque(d2);\n\n\tdeque&lt;int&gt; d3(10,100);\n\tprintDeque(d3);\n\n\tdeque&lt;int&gt; d4(d3);\n\tprintDeque(d4);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**deque 容器和 vector 容器的构造方式几乎一致，灵活使用即可</p>\n<h3 id=\"333-deque赋值操作\"><a class=\"anchor\" href=\"#333-deque赋值操作\">#</a> 3.3.3 deque 赋值操作</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>给 deque 容器进行赋值</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>deque&amp; operator=(const deque&amp; deq); </code>          // 重载等号操作符</p>\n</li>\n<li>\n<p><code>assign(beg, end);</code>                                            // 将 [beg, end) 区间中的数据拷贝赋值给本身。</p>\n</li>\n<li>\n<p><code>assign(n, elem);</code>                                              // 将 n 个 elem 拷贝赋值给本身。</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;deque&gt;\n\nvoid printDeque(const deque&lt;int&gt;&amp; d) &#123;\n\tfor (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//赋值操作\nint main() &#123;\n\n\tdeque&lt;int&gt; d1;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\td1.push_back(i);\n\t&#125;\n\tprintDeque(d1);\n\n\tdeque&lt;int&gt; d2;\n\td2 = d1;// operator=赋值\n\tprintDeque(d2);\n\n\tdeque&lt;int&gt; d3;\n\td3.assign(d1.begin(), d1.end());// assign赋值\n\tprintDeque(d3);\n\n\tdeque&lt;int&gt; d4;\n\td4.assign(10, 100);\n\tprintDeque(d4);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：deque 赋值操作也与 vector 相同，需熟练掌握</p>\n<h3 id=\"334-deque大小操作\"><a class=\"anchor\" href=\"#334-deque大小操作\">#</a> 3.3.4 deque 大小操作</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 deque 容器的大小进行操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>deque.empty();</code>                        // 判断容器是否为空</p>\n</li>\n<li>\n<p><code>deque.size();</code>                          // 返回容器中元素的个数</p>\n</li>\n<li>\n<p><code>deque.resize(num);</code>                 // 重新指定容器的长度为 num, 若容器变长，则以默认值填充新位置。</p>\n<p>​\t\t\t                             // 如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n<li>\n<p><code>deque.resize(num, elem);</code>      // 重新指定容器的长度为 num, 若容器变长，则以 elem 值填充新位置。</p>\n<p>​                                                     // 如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n</ul>\n<blockquote>\n<p>vector 容器中大小操作里边有一个获取它的容量，但 deque 容器是没有容量的概念的，因为它的内部结构根本就没有容量的限制，它可以无限地往后开辟新缓冲区，中控器去维护那些一小段一小段的空间，加一个地址就可以了</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;deque&gt;\n\nvoid printDeque(const deque&lt;int&gt;&amp; d) &#123;\n\tfor (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//deque容器大小操作\nint main() &#123;\n\n\tdeque&lt;int&gt; d1;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\td1.push_back(i);\n\t&#125;\n\tprintDeque(d1);\n\n\t//判断容器是否为空\n\tif (d1.empty()) &#123;\n\t\tcout &lt;&lt; &quot;d1为空!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;d1不为空!&quot; &lt;&lt; endl;\n\t\t//统计大小\n\t\tcout &lt;&lt; &quot;d1的大小为：&quot; &lt;&lt; d1.size() &lt;&lt; endl;// 10\n    // deque容器没有容量概念\n\t&#125;\n\n\t//重新指定大小\n\td1.resize(15, 1);\n\tprintDeque(d1);\n\td1.resize(5);\n\tprintDeque(d1);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>deque 没有容量的概念</li>\n<li>判断是否为空   --- empty</li>\n<li>返回元素个数   --- size</li>\n<li>重新指定个数   --- resize</li>\n</ul>\n<h3 id=\"335-deque-插入和删除\"><a class=\"anchor\" href=\"#335-deque-插入和删除\">#</a> 3.3.5 deque 插入和删除</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>向 deque 容器中插入和删除数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<p>两端插入操作：</p>\n<ul>\n<li><code>push_back(elem);</code>           // 在容器尾部添加一个数据</li>\n<li><code>push_front(elem);</code>         // 在容器头部插入一个数据</li>\n<li><code>pop_back();</code>                    // 删除容器最后一个数据</li>\n<li><code>pop_front();</code>                  // 删除容器第一个数据</li>\n</ul>\n<p>指定位置操作：</p>\n<ul>\n<li>\n<p><code>insert(pos,elem);</code>          // 在 pos 位置插入一个 elem 元素的拷贝，返回新数据的位置。</p>\n</li>\n<li>\n<p><code>insert(pos,n,elem);</code>      // 在 pos 位置插入 n 个 elem 数据，无返回值。</p>\n</li>\n<li>\n<p><code>insert(pos,beg,end);</code>     // 在 pos 位置插入 [beg,end) 区间的数据，无返回值。</p>\n</li>\n<li>\n<p><code>clear();</code>                            // 清空容器的所有数据</p>\n</li>\n<li>\n<p><code>erase(beg,end);</code>              // 删除 [beg,end) 区间的数据，返回下一个数据的位置。</p>\n</li>\n<li>\n<p><code>erase(pos);</code>                     // 删除 pos 位置的数据，返回下一个数据的位置。</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 两端操作</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 尾插</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 头插</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 200 100 10 20</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 尾删</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 头删</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 100 10</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 10000 10000 1000 200 100 10 20</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> d2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  d2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  d2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  d2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 按照区间进行插入</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 2 3 10000 10000 1000 200 100 10 20</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 200 100 10 20</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在 insert 和 erase 的时候迭代器是可以偏移的</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 200 10 20</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  d<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token function\">printDeque</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>插入和删除提供的位置是迭代器！</li>\n<li>尾插   ---  push_back</li>\n<li>尾删   ---  pop_back</li>\n<li>头插   ---  push_front</li>\n<li>头删   ---  pop_front</li>\n</ul>\n<h3 id=\"336-deque-数据存取\"><a class=\"anchor\" href=\"#336-deque-数据存取\">#</a> 3.3.6 deque 数据存取</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 deque 中的数据的存取操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>at(int idx); </code>      // 返回索引 idx 所指的数据</li>\n<li><code>operator[]; </code>       // 返回索引 idx 所指的数据</li>\n<li><code>front(); </code>             // 返回容器中第一个数据元素</li>\n<li><code>back();</code>               // 返回容器中最后一个数据元素</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;deque&gt;\n\nvoid printDeque(const deque&lt;int&gt;&amp; d) &#123;\n\tfor (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//数据存取\nint main() &#123;\n\n\tdeque&lt;int&gt; d;\n\td.push_back(10);\n\td.push_back(20);\n\td.push_front(100);\n\td.push_front(200);\n\n  // 通过[]方式访问元素\n\tfor (int i = 0; i &lt; d.size(); i++) &#123;\n\t\tcout &lt;&lt; d[i] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n  // 通过at方式访问元素\n\tfor (int i = 0; i &lt; d.size(); i++) &#123;\n\t\tcout &lt;&lt; d.at(i) &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;front:&quot; &lt;&lt; d.front() &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;back:&quot; &lt;&lt; d.back() &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>除了用迭代器获取 deque 容器中元素，[ ] 和 at 也可以</li>\n<li>front 返回容器第一个元素</li>\n<li>back 返回容器最后一个元素</li>\n</ul>\n<h3 id=\"337-deque-排序\"><a class=\"anchor\" href=\"#337-deque-排序\">#</a> 3.3.7 deque 排序</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>利用算法实现对 deque 容器进行排序</li>\n</ul>\n<p><strong>算法：</strong></p>\n<ul>\n<li><code>sort(iterator beg, iterator end)</code>   // 对 beg 和 end 区间内元素进行排序</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;deque&gt;\n#include &lt;algorithm&gt;\n\nvoid printDeque(const deque&lt;int&gt;&amp; d) &#123;\n\tfor (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tdeque&lt;int&gt; d;\n\td.push_back(10);\n\td.push_back(20);\n\td.push_front(100);\n\td.push_front(200);\n\tprintDeque(d);// 200 100 10 20\n  \n\tsort(d.begin(), d.end());// 排序。默认排序规则：从小到大升序\n  // 对于支持随机访问的迭代器的容器，都可以利用sort算法直接对其进行排序。vector容器也可以利用sort进行排序\n\tprintDeque(d);// 10 20 100 200\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：sort 算法非常实用，使用时包含头文件 algorithm 即可</p>\n<h2 id=\"34-案例-评委打分\"><a class=\"anchor\" href=\"#34-案例-评委打分\">#</a> 3.4 案例 - 评委打分</h2>\n<h3 id=\"341-案例描述\"><a class=\"anchor\" href=\"#341-案例描述\">#</a> 3.4.1 案例描述</h3>\n<p>有 5 名选手：选手 ABCDE，10 个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p>\n<h3 id=\"342-实现步骤\"><a class=\"anchor\" href=\"#342-实现步骤\">#</a> 3.4.2 实现步骤</h3>\n<ol>\n<li>创建五名选手，放到 vector 中</li>\n<li>遍历 vector 容器，取出来每一个选手，执行 for 循环，可以把 10 个评分打分存到 deque 容器中</li>\n<li>sort 算法对 deque 容器中分数排序，去除最高和最低分</li>\n<li>deque 容器遍历一遍，累加总分</li>\n<li>获取平均分</li>\n</ol>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 选手类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  string m_Name<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 姓名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Score<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 平均分</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  string nameSeed <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDE\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    string name <span class=\"token operator\">=</span> <span class=\"token string\">\"选手\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    name <span class=\"token operator\">+=</span> nameSeed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Person <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 将创建的 Person 对象放入到容器中</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 打分</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 将评委的分数放入到 deque 容器中</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">41</span> <span class=\"token operator\">+</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 60 ~ 100</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 去除最高和最低分</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    d<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    d<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 之所以用 deque 容器存放分数就是因为它对于头端直接有一个接口头删，而 vector 容器没有</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 取平均分</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator dit <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> dit <span class=\"token operator\">!=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> dit<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>dit<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 累加每个评委的分数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">int</span> avg <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 将平均分赋值给选手身上</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    it<span class=\"token operator\">-></span>m_Score <span class=\"token operator\">=</span> avg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 平均分：\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>m_Score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">// 随机数种子</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">// 1、创建 5 名选手</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存放选手的容器</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">// 2、给 5 名选手打分</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">// 3、显示最后得分</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p>\n<h2 id=\"35-stack容器\"><a class=\"anchor\" href=\"#35-stack容器\">#</a> 3.5 stack 容器</h2>\n<h3 id=\"351-stack-基本概念\"><a class=\"anchor\" href=\"#351-stack-基本概念\">#</a> 3.5.1 stack 基本概念</h3>\n<p><strong>概念：<strong>stack 是一种</strong>先进后出</strong> (First In Last Out,FILO) 的数据结构，它只有一个出口</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111744542.jpg\" alt=\"\" /></p>\n<p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p>\n<blockquote>\n<p>当你想看第二个元素的时候，要把第一个元素栈顶元素拿出来，但拿出来的过程这个栈里边就少了一个值了，这就不叫遍历了，遍历是一个非质变算法，在运算过程期间是不允许容器中的元素有改动的</p>\n</blockquote>\n<p>栈中进入数据称为  --- <strong>入栈</strong>   <code>push</code></p>\n<p>栈中弹出数据称为  --- <strong>出栈</strong>   <code>pop</code></p>\n<p>生活中的栈：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111745775.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111745679.jpg\" alt=\"\" /></p>\n<h3 id=\"352-stack-常用接口\"><a class=\"anchor\" href=\"#352-stack-常用接口\">#</a> 3.5.2 stack 常用接口</h3>\n<p>功能描述：栈容器常用的对外接口</p>\n<p>构造函数：</p>\n<ul>\n<li><code>stack&lt;T&gt; stk;</code>                                  //stack 采用模板类实现， stack 对象的默认构造形式</li>\n<li><code>stack(const stack&amp; stk);</code>             // 拷贝构造函数</li>\n</ul>\n<p>赋值操作：</p>\n<ul>\n<li><code>stack&amp; operator=(const stack&amp; stk);</code>            // 重载等号操作符</li>\n</ul>\n<p>数据存取：</p>\n<ul>\n<li><code>push(elem);</code>       // 向栈顶添加元素</li>\n<li><code>pop();</code>                 // 从栈顶移除第一个元素</li>\n<li><code>top(); </code>                 // 返回栈顶元素</li>\n</ul>\n<p>大小操作：</p>\n<ul>\n<li><code>empty();</code>             // 判断堆栈是否为空</li>\n<li><code>size(); </code>               // 返回栈的大小</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;stack&gt;\n\n//栈容器常用接口\nint main() &#123;\n\n\t//创建栈容器 栈容器必须符合先进后出数据结构\n\tstack&lt;int&gt; s;\n\n\t//向栈中添加元素，叫做 压栈 入栈\n\ts.push(10);\n\ts.push(20);\n\ts.push(30);\n  \n  // 拷贝构造函数\n  stack&lt;int&gt; s2(s);\n  \n  // 重载等号操作符进行赋值操作\n  stack&lt;int&gt; s3;\n  s3 = s;\n\n\twhile (!s.empty()) &#123;\n\t\t//输出栈顶元素\n\t\tcout &lt;&lt; &quot;栈顶元素为： &quot; &lt;&lt; s.top() &lt;&lt; endl;\n\t\t//弹出栈顶元素\n\t\ts.pop();\n\t&#125;\n\tcout &lt;&lt; &quot;栈的大小为：&quot; &lt;&lt; s.size() &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>入栈   --- push</li>\n<li>出栈   --- pop</li>\n<li>返回栈顶   --- top</li>\n<li>判断栈是否为空   --- empty</li>\n<li>返回栈大小   --- size</li>\n</ul>\n<h2 id=\"36-queue-容器\"><a class=\"anchor\" href=\"#36-queue-容器\">#</a> 3.6 queue 容器</h2>\n<h3 id=\"361-queue-基本概念\"><a class=\"anchor\" href=\"#361-queue-基本概念\">#</a> 3.6.1 queue 基本概念</h3>\n<p><strong>概念：<strong>Queue 是一种</strong>先进先出</strong> (First In First Out,FIFO) 的数据结构，它有两个出口</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111837532.jpg\" alt=\"\" /></p>\n<p>队列容器允许从一端新增元素，从另一端移除元素</p>\n<p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p>\n<p>队列中进数据称为 --- <strong>入队</strong>     <code>push</code></p>\n<p>队列中出数据称为 --- <strong>出队</strong>     <code>pop</code></p>\n<p>生活中的队列：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111838937.png\" alt=\"\" /></p>\n<h3 id=\"362-queue-常用接口\"><a class=\"anchor\" href=\"#362-queue-常用接口\">#</a> 3.6.2 queue 常用接口</h3>\n<p>功能描述：栈容器常用的对外接口</p>\n<p>构造函数：</p>\n<ul>\n<li><code>queue&lt;T&gt; que;</code>                                  //queue 采用模板类实现，queue 对象的默认构造形式</li>\n<li><code>queue(const queue&amp; que);</code>             // 拷贝构造函数</li>\n</ul>\n<p>赋值操作：</p>\n<ul>\n<li><code>queue&amp; operator=(const queue&amp; que);</code>            // 重载等号操作符</li>\n</ul>\n<p>数据存取：</p>\n<ul>\n<li><code>push(elem);</code>                              // 往队尾添加元素</li>\n<li><code>pop();</code>                                       // 从队头移除第一个元素</li>\n<li><code>back();</code>                                     // 返回最后一个元素</li>\n<li><code>front(); </code>                                   // 返回第一个元素</li>\n</ul>\n<p>大小操作：</p>\n<ul>\n<li><code>empty();</code>             // 判断堆栈是否为空</li>\n<li><code>size(); </code>               // 返回栈的大小</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;queue&gt;\n#include &lt;string&gt;\n\nclass Person &#123;\n public:\n\tPerson(string name, int age) &#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nint main() &#123;\n\n\t//创建队列\n\tqueue&lt;Person&gt; q;\n\n\t//准备数据\n\tPerson p1(&quot;唐僧&quot;, 30);\n\tPerson p2(&quot;孙悟空&quot;, 1000);\n\tPerson p3(&quot;猪八戒&quot;, 900);\n\tPerson p4(&quot;沙僧&quot;, 800);\n\n\t//向队列中添加元素  入队操作\n\tq.push(p1);\n\tq.push(p2);\n\tq.push(p3);\n\tq.push(p4);\n\n\t//队列不提供迭代器，更不支持随机访问\t\n\twhile (!q.empty()) &#123;\n\t\t//输出队头元素\n\t\tcout &lt;&lt; &quot;队头元素-- 姓名： &quot; &lt;&lt; q.front().m_Name &lt;&lt; &quot; 年龄： &quot;&lt;&lt; q.front().m_Age &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;队尾元素-- 姓名： &quot; &lt;&lt; q.back().m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; q.back().m_Age &lt;&lt; endl;\n\t\tcout &lt;&lt; endl;\n\t\t//弹出队头元素\n\t\tq.pop();\n\t&#125;\n\n\tcout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>入队   --- push</li>\n<li>出队   --- pop</li>\n<li>返回队头元素   --- front</li>\n<li>返回队尾元素   --- back</li>\n<li>判断队是否为空   --- empty</li>\n<li>返回队列大小   --- size</li>\n</ul>\n<h2 id=\"37-list容器\"><a class=\"anchor\" href=\"#37-list容器\">#</a> 3.7 list 容器</h2>\n<h3 id=\"371-list基本概念\"><a class=\"anchor\" href=\"#371-list基本概念\">#</a> 3.7.1 list 基本概念</h3>\n<p>** 功能：** 将数据进行链式存储</p>\n<p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p>\n<p>链表的组成：链表由一系列<strong>结点</strong>组成</p>\n<p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p>\n<p>STL 中的链表是一个双向循环链表</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111853633.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>图片并没有画出循环的结构，而 STL 中的链表最后一个结点的 next 指针指向最前面的结点，最前一个结点的 prev 指针指向最后面的结点</p>\n</blockquote>\n<p>由于链表的存储方式并不是连续的内存空间，因此链表 list 中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p>\n<blockquote>\n<p>比如说 begin () 的迭代器不能跳跃式地访问，因为它要通过一个指针域才能一个一个地往前 / 后找。这和它的内部存储结构有关，list 不是一个连续的空间，不可以直接往后加一个数字就可以找到后边的数据</p>\n</blockquote>\n<p>list 的优点：</p>\n<ul>\n<li>\n<p>采用动态存储分配，不会造成内存浪费和溢出</p>\n<blockquote>\n<p>vector 是有容量的，比如说数组中现在已经插了 10 万个数据，那么它的容量可能是 13 万，而只用到了它前 10 万个，可能会造成资源的浪费和溢出</p>\n</blockquote>\n</li>\n<li>\n<p>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</p>\n</li>\n</ul>\n<p>list 的缺点：</p>\n<ul>\n<li>\n<p>链表灵活，但是空间 (指针域) 和 时间（遍历）额外耗费较大</p>\n<blockquote>\n<p>链表容器遍历速度没有数组快。数组的地址是连续的，它的指针直接往后偏移能够快速地遍历元素；而链表想做遍历，前一个元素遍历完找第二个元素，要通过指针域才能找到</p>\n</blockquote>\n</li>\n</ul>\n<p>list 有一个重要的性质，插入操作和删除操作都不会造成原有 list 迭代器的失效，这在 vector 是不成立的。</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411111920952.png\" alt=\"\" /></p>\n<p>链表中的迭代器假设指向最前面的结点，在任意地方插入元素，或删除不是迭代器指向的其他任意结点，都不会影响迭代器。数组一旦插满了，要再插一个数据的话，就要重新找一块更长的内存空间，把 vector 中的元素拷贝到新空间里边，原先的迭代器就失效了，因为还指向着原来的数据内存</p>\n</blockquote>\n<p>总结：STL 中<strong> list 和 vector 是两个最常被使用的容器</strong>，各有优缺点</p>\n<h3 id=\"372-list构造函数\"><a class=\"anchor\" href=\"#372-list构造函数\">#</a> 3.7.2 list 构造函数</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>创建 list 容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>list&lt;T&gt; lst;</code>                                //list 采用采用模板类实现，对象的默认构造形式：</li>\n<li><code>list(beg, end);</code>                            // 构造函数将 [beg, end) 区间中的元素拷贝给本身。</li>\n<li><code>list(n, elem);</code>                              // 构造函数将 n 个 elem 拷贝给本身。</li>\n<li><code>list(const list&amp; lst);</code>             // 拷贝构造函数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;list&gt;\n\nvoid printList(const list&lt;int&gt;&amp; L) &#123;\n\tfor (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tlist&lt;int&gt; L1;// 默认构造\n\tL1.push_back(10);\n\tL1.push_back(20);\n\tL1.push_back(30);\n\tL1.push_back(40);\n\tprintList(L1);// 遍历容器\n\n\tlist&lt;int&gt; L2(L1.begin(), L1.end());// 区间方式构造\n\tprintList(L2);\n\n\tlist&lt;int&gt; L3(L2);// 拷贝构造\n\tprintList(L3);\n\n\tlist&lt;int&gt; L4(10, 1000);// n个elem\n\tprintList(L4);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：list 构造方式同其他几个 STL 常用容器，熟练掌握即可</p>\n<h3 id=\"373-list-赋值和交换\"><a class=\"anchor\" href=\"#373-list-赋值和交换\">#</a> 3.7.3 list 赋值和交换</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>给 list 容器进行赋值，以及交换 list 容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>assign(beg, end);</code>             // 将 [beg, end) 区间中的数据拷贝赋值给本身。</li>\n<li><code>assign(n, elem);</code>               // 将 n 个 elem 拷贝赋值给本身。</li>\n<li><code>list&amp; operator=(const list &amp;lst);</code>          // 重载等号操作符</li>\n<li><code>swap(lst);</code>                          // 将 lst 与本身的元素互换。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;list&gt;\n\nvoid printList(const list&lt;int&gt;&amp; L) &#123;\n\tfor (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//赋值\nvoid test01() &#123;\n\tlist&lt;int&gt; L1;\n\tL1.push_back(10);\n\tL1.push_back(20);\n\tL1.push_back(30);\n\tL1.push_back(40);\n\tprintList(L1);\n\n\tlist&lt;int&gt; L2;\n\tL2 = L1;// operator=赋值\n\tprintList(L2);\n\n\tlist&lt;int&gt; L3;\n\tL3.assign(L2.begin(), L2.end());\n\tprintList(L3);\n\n\tlist&lt;int&gt; L4;\n\tL4.assign(10, 100);\n\tprintList(L4);\n&#125;\n\n//交换\nvoid test02() &#123;\n\n\tlist&lt;int&gt; L1;\n\tL1.push_back(10);\n\tL1.push_back(20);\n\tL1.push_back(30);\n\tL1.push_back(40);\n\n\tlist&lt;int&gt; L2;\n\tL2.assign(10, 100);\n\n\tcout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;\n\tprintList(L1);\n\tprintList(L2);\n\tcout &lt;&lt; endl;\n\n\tL1.swap(L2);\n\tcout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;\n\tprintList(L1);\n\tprintList(L2);\n&#125;\n\nint main() &#123;\n\ttest01();\n\ttest02();\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：list 赋值和交换操作能够灵活运用即可</p>\n<h3 id=\"374-list-大小操作\"><a class=\"anchor\" href=\"#374-list-大小操作\">#</a> 3.7.4 list 大小操作</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 list 容器的大小进行操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>size(); </code>                              // 返回容器中元素的个数</p>\n</li>\n<li>\n<p><code>empty(); </code>                            // 判断容器是否为空</p>\n</li>\n<li>\n<p><code>resize(num);</code>                    // 重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。</p>\n<p>​\t\t\t\t\t    // 如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n<li>\n<p><code>resize(num, elem); </code>        // 重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。</p>\n<pre><code>\t\t\t\t\t    //如果容器变短，则末尾超出容器长度的元素被删除。\n</code></pre>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;list&gt;\n\nvoid printList(const list&lt;int&gt;&amp; L) &#123;\n\tfor (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//大小操作\nint main() &#123;\n\n\tlist&lt;int&gt; L1;\n\tL1.push_back(10);\n\tL1.push_back(20);\n\tL1.push_back(30);\n\tL1.push_back(40);\n\n\tif (L1.empty()) &#123;\n\t\tcout &lt;&lt; &quot;L1为空&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;L1不为空&quot; &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;L1的大小为： &quot; &lt;&lt; L1.size() &lt;&lt; endl;\n\t&#125;\n\n\t//重新指定大小\n\tL1.resize(10);\n\tprintList(L1);\n\tL1.resize(2);\n\tprintList(L1);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>判断是否为空   --- empty</li>\n<li>返回元素个数   --- size</li>\n<li>重新指定个数   --- resize</li>\n</ul>\n<h3 id=\"375-list-插入和删除\"><a class=\"anchor\" href=\"#375-list-插入和删除\">#</a> 3.7.5 list 插入和删除</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 list 容器进行数据的插入和删除</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>push_back (elem);// 在容器尾部加入一个元素</li>\n<li>pop_back ();// 删除容器中最后一个元素</li>\n<li>push_front (elem);// 在容器开头插入一个元素</li>\n<li>pop_front ();// 从容器开头移除第一个元素</li>\n<li>insert (pos,elem);// 在 pos 位置插 elem 元素的拷贝，返回新数据的位置。</li>\n<li>insert (pos,n,elem);// 在 pos 位置插入 n 个 elem 数据，无返回值。</li>\n<li>insert (pos,beg,end);// 在 pos 位置插入 [beg,end) 区间的数据，无返回值。</li>\n<li>clear ();// 移除容器的所有数据</li>\n<li>erase (beg,end);// 删除 [beg,end) 区间的数据，返回下一个数据的位置。</li>\n<li>erase (pos);// 删除 pos 位置的数据，返回下一个数据的位置。</li>\n<li>remove (elem);// 删除容器中所有与 elem 值匹配的元素。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;list&gt;\n\nvoid printList(const list&lt;int&gt;&amp; L) &#123;\n\tfor (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tlist&lt;int&gt; L;\n\t//尾插\n\tL.push_back(10);\n\tL.push_back(20);\n\tL.push_back(30);\n\t//头插\n\tL.push_front(100);\n\tL.push_front(200);\n\tL.push_front(300);\n\tprintList(L);// 300 200 100 10 20 30\n\n\t//尾删\n\tL.pop_back();\n\tprintList(L);// 300 200 100 10 20\n\n\t//头删\n\tL.pop_front();\n\tprintList(L);// 200 100 10 20\n\n\t//插入\n  L.insert(L.begin(), 1000);\n  printList(L);// 1000 200 100 10 20\n\tlist&lt;int&gt;::iterator it = L.begin();\n\tL.insert(++it, 1000);\n\tprintList(L);// 1000 1000 200 100 10 20\n\n\t//删除\n\tit = L.begin();\n\tL.erase(++it);\n\tprintList(L);// 1000 200 100 10 20\n\n\t//移除\n\tL.push_back(10000);\n\tL.push_back(10000);\n\tL.push_back(10000);\n\tprintList(L);// 1000 200 100 10 20 10000 10000 10000\n\tL.remove(10000);\n\tprintList(L);// 200 100 10 20\n    \n  //清空\n\tL.clear();\n\tprintList(L);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>尾插   --- push_back</li>\n<li>尾删   --- pop_back</li>\n<li>头插   --- push_front</li>\n<li>头删   --- pop_front</li>\n<li>插入   --- insert</li>\n<li>删除   --- erase</li>\n<li>移除   --- remove</li>\n<li>清空   --- clear</li>\n</ul>\n<h3 id=\"376-list-数据存取\"><a class=\"anchor\" href=\"#376-list-数据存取\">#</a> 3.7.6 list 数据存取</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 list 容器中数据进行存取</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>front();</code>         // 返回第一个元素。</li>\n<li><code>back();</code>          // 返回最后一个元素</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;list&gt;\n\n//数据存取\nint main() &#123;\n\n\tlist&lt;int&gt; L1;\n\tL1.push_back(10);\n\tL1.push_back(20);\n\tL1.push_back(30);\n\tL1.push_back(40);\n\n\t//cout &lt;&lt; L1.at(0) &lt;&lt; endl;// 错误 不支持at访问数据\n\t//cout &lt;&lt; L1[0] &lt;&lt; endl; // 错误  不支持[]方式访问数据\n  // 原因是list本质链表，不是用连续线性空间存储数据，迭代器也是不支持随机访问的\n\tcout &lt;&lt; &quot;第一个元素为： &quot; &lt;&lt; L1.front() &lt;&lt; endl;\n\tcout &lt;&lt; &quot;最后一个元素为： &quot; &lt;&lt; L1.back() &lt;&lt; endl;\n\n\t// list容器的迭代器是双向迭代器，不支持随机访问\n\tlist&lt;int&gt;::iterator it = L1.begin();\n\t//it = it + 1;// 错误，不可以跳跃访问，即使是+1\n  it++;\n  it--;\n  // 支持双向\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>list 容器中不可以通过 [] 或者 at 方式访问数据</li>\n<li>返回第一个元素   --- front</li>\n<li>返回最后一个元素   --- back</li>\n</ul>\n<h3 id=\"377-list-反转和排序\"><a class=\"anchor\" href=\"#377-list-反转和排序\">#</a> 3.7.7 list 反转和排序</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器中的元素反转，以及将容器中的数据进行排序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>reverse();</code>    // 反转链表</li>\n<li><code>sort();</code>         // 链表排序</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">void printList(const list&lt;int&gt;&amp; L) &#123;\n\tfor (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nbool myCompare(int val1 , int val2) &#123;\n\treturn val1 &gt; val2;// 降序就让第一个数 &gt; 第二个数\n&#125;\n\n//反转和排序\nint main() &#123;\n\tlist&lt;int&gt; L;\n\tL.push_back(90);\n\tL.push_back(30);\n\tL.push_back(20);\n\tL.push_back(70);\n\tprintList(L);\n\n\t//反转容器的元素\n\tL.reverse();\n\tprintList(L);\n\n\t//排序\n  // 所有不支持随机访问迭代器的容器，不可以用标准算法\n  // sort(L.begin(), L.end());// 报错\n  \n  // 不支持随机访问迭代器的容器，内部会提供对应的一些算法\n\tL.sort(); //默认的排序规则 从小到大，升序\n\tprintList(L);\n\tL.sort(myCompare); //指定规则，从大到小\n\tprintList(L);\n  \n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>反转   --- reverse</li>\n<li>排序   --- sort （成员函数）</li>\n</ul>\n<h3 id=\"378-排序案例\"><a class=\"anchor\" href=\"#378-排序案例\">#</a> 3.7.8 排序案例</h3>\n<p>案例描述：将 Person 自定义数据类型进行排序，Person 中属性有姓名、年龄、身高</p>\n<p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;list&gt;\n#include &lt;string&gt;\nclass Person &#123;\n public:\n\tPerson(string name, int age , int height) &#123;\n\t\tm_Name = name;\n\t\tm_Age = age;\n\t\tm_Height = height;\n\t&#125;\n\n public:\n\tstring m_Name;  //姓名\n\tint m_Age;      //年龄\n\tint m_Height;   //身高\n&#125;;\n\nbool comparePerson(Person&amp; p1, Person&amp; p2) &#123;\n\tif (p1.m_Age == p2.m_Age) &#123;\n\t\treturn p1.m_Height &gt; p2.m_Height;\n\t&#125; else &#123;\n\t\treturn  p1.m_Age &lt; p2.m_Age;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tlist&lt;Person&gt; L;\n\n\tPerson p1(&quot;刘备&quot;, 35 , 175);\n\tPerson p2(&quot;曹操&quot;, 45 , 180);\n\tPerson p3(&quot;孙权&quot;, 40 , 170);\n\tPerson p4(&quot;赵云&quot;, 25 , 190);\n\tPerson p5(&quot;张飞&quot;, 35 , 160);\n\tPerson p6(&quot;关羽&quot;, 35 , 200);\n\n\tL.push_back(p1);\n\tL.push_back(p2);\n\tL.push_back(p3);\n\tL.push_back(p4);\n\tL.push_back(p5);\n\tL.push_back(p6);\n\n\tfor (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;\n\t&#125;\n\tcout &lt;&lt; &quot;---------------------------------&quot; &lt;&lt; endl;\n  \n\tL.sort(comparePerson); //排序\n\n\tfor (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;\n\t&#125;\n&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>\n<p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p>\n</li>\n<li>\n<p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p>\n</li>\n</ul>\n<h2 id=\"38-set-multiset-容器\"><a class=\"anchor\" href=\"#38-set-multiset-容器\">#</a> 3.8 set/multiset 容器</h2>\n<h3 id=\"381-set基本概念\"><a class=\"anchor\" href=\"#381-set基本概念\">#</a> 3.8.1 set 基本概念</h3>\n<p><strong>简介：</strong></p>\n<ul>\n<li>所有元素都会在插入时自动被排序</li>\n</ul>\n<p><strong>本质：</strong></p>\n<ul>\n<li>set/multiset 属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li>\n</ul>\n<p><strong>set 和 multiset 区别</strong>：</p>\n<ul>\n<li>set 不允许容器中有重复的元素</li>\n<li>multiset 允许容器中有重复的元素</li>\n</ul>\n<h3 id=\"382-set构造和赋值\"><a class=\"anchor\" href=\"#382-set构造和赋值\">#</a> 3.8.2 set 构造和赋值</h3>\n<p>功能描述：创建 set 容器以及赋值</p>\n<p>构造：</p>\n<ul>\n<li><code>set&lt;T&gt; st;</code>                         // 默认构造函数：</li>\n<li><code>set(const set&amp; st);</code>        // 拷贝构造函数</li>\n</ul>\n<p>赋值：</p>\n<ul>\n<li><code>set&amp; operator=(const set&amp; st);</code>     // 重载等号操作符</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;set&gt;\n\nvoid printSet(set&lt;int&gt;&amp; s) &#123;\n\tfor (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\tset&lt;int&gt; s1;\n\n  //插入数据，只有insert方式\n\ts1.insert(10);\n\ts1.insert(40);\n\ts1.insert(30);\n\ts1.insert(20);\n\ts1.insert(30);\n  //遍历容器\n\tprintSet(s1);// 10 20 30 40 \n  //set容器特点：所有元素插入时自动被排序，set容器不允许插入重复值\n\n\t//拷贝构造\n\tset&lt;int&gt; s2(s1);\n\tprintSet(s2);\n\n\t//赋值\n\tset&lt;int&gt; s3;\n\ts3 = s2;\n\tprintSet(s3);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>set 容器插入数据时用 insert</li>\n<li>set 容器插入数据的数据会自动排序</li>\n</ul>\n<h3 id=\"383-set大小和交换\"><a class=\"anchor\" href=\"#383-set大小和交换\">#</a> 3.8.3 set 大小和交换</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>统计 set 容器大小以及交换 set 容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>size();</code>           // 返回容器中元素的数目</p>\n<blockquote>\n<p>不允许重新指定 set 的大小，resize 机制默认情况下用默认值 0 来填充扩出来的元素，比如说一开始有 5 个元素，指定了 resize 到 10 个，扩出来的 5 个用 0 来填充，0 就重复了。set 容器不允许有重复的值，因此它也不会让你重新指定它的大小</p>\n</blockquote>\n</li>\n<li>\n<p><code>empty();</code>         // 判断容器是否为空</p>\n</li>\n<li>\n<p><code>swap(st);</code>       // 交换两个集合容器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;set&gt;\n\nvoid printSet(set&lt;int&gt;&amp; s) &#123;\n\tfor (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//大小\nvoid test01() &#123;\n\tset&lt;int&gt; s1;\n\t\n\ts1.insert(10);\n\ts1.insert(30);\n\ts1.insert(20);\n\ts1.insert(40);\n\n\tif (s1.empty()) &#123;\n\t\tcout &lt;&lt; &quot;s1为空&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;s1不为空&quot; &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;s1的大小为： &quot; &lt;&lt; s1.size() &lt;&lt; endl;\n\t&#125;\n&#125;\n\n//交换\nvoid test02() &#123;\n\tset&lt;int&gt; s1;\n\ts1.insert(10);\n\ts1.insert(30);\n\ts1.insert(20);\n\ts1.insert(40);\n\n\tset&lt;int&gt; s2;\n\ts2.insert(100);\n\ts2.insert(300);\n\ts2.insert(200);\n\ts2.insert(400);\n\n\tcout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;\n\tprintSet(s1);\n\tprintSet(s2);\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;\n\ts1.swap(s2);\n\tprintSet(s1);\n\tprintSet(s2);\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>统计大小   --- size</li>\n<li>判断是否为空   --- empty</li>\n<li>交换容器   --- swap</li>\n</ul>\n<h3 id=\"384-set插入和删除\"><a class=\"anchor\" href=\"#384-set插入和删除\">#</a> 3.8.4 set 插入和删除</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>set 容器进行插入数据和删除数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>insert(elem);</code>            // 在容器中插入元素。</li>\n<li><code>clear();</code>                     // 清除所有元素</li>\n<li><code>erase(pos);</code>               // 删除 pos 迭代器所指的元素，返回下一个元素的迭代器。</li>\n<li><code>erase(beg, end);</code>     // 删除区间 [beg,end) 的所有元素 ，返回下一个元素的迭代器。</li>\n<li><code>erase(elem);</code>             // 删除容器中值为 elem 的元素。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;set&gt;\n\nvoid printSet(set&lt;int&gt;&amp; s) &#123;\n\tfor (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\n//插入和删除\nint main() &#123;\n\n\tset&lt;int&gt; s1;\n\t//插入\n\ts1.insert(10);\n\ts1.insert(30);\n\ts1.insert(20);\n\ts1.insert(40);\n\tprintSet(s1);// 10 20 30 40 \n\n\t//删除\n\ts1.erase(s1.begin());\n\tprintSet(s1);// 20 30 40 \n\n\ts1.erase(30);\n\tprintSet(s1);// 20 40 \n\n\t//清空\n\t//s1.erase(s1.begin(), s1.end());\n\ts1.clear();\n\tprintSet(s1);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>插入   --- insert</li>\n<li>删除   --- erase</li>\n<li>清空   --- clear</li>\n</ul>\n<h3 id=\"385-set查找和统计\"><a class=\"anchor\" href=\"#385-set查找和统计\">#</a> 3.8.5 set 查找和统计</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 set 容器进行查找数据以及统计数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>find(key);</code>                   // 查找 key 是否存在，若存在，返回该键的元素的迭代器；若不存在，返回 set.end ();</li>\n<li><code>count(key);</code>                 // 统计 key 的元素个数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;set&gt;\n\n//查找和统计\nint main() &#123;\n\n\tset&lt;int&gt; s1;\n\t//插入\n\ts1.insert(10);\n\ts1.insert(30);\n\ts1.insert(20);\n\ts1.insert(40);\n\t\n\t//查找\n\tset&lt;int&gt;::iterator pos = s1.find(30);\n\tif (pos != s1.end()) &#123;\n\t\tcout &lt;&lt; &quot;找到了元素 ： &quot; &lt;&lt; *pos &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;\n\t&#125;\n\n\t//统计\n\tint num = s1.count(30);\n\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;// 1\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>查找   ---  find    （返回的是迭代器）</li>\n<li>统计   ---  count  （对于 set，结果为 0 或者 1）</li>\n</ul>\n<h3 id=\"386-set和multiset区别\"><a class=\"anchor\" href=\"#386-set和multiset区别\">#</a> 3.8.6 set 和 multiset 区别</h3>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握 set 和 multiset 的区别</li>\n</ul>\n<p><strong>区别：</strong></p>\n<ul>\n<li>set 不可以插入重复数据，而 multiset 可以</li>\n<li>set 插入数据的同时会返回插入结果，表示插入是否成功</li>\n<li>multiset 不会检测数据，因此可以插入重复数据</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;set&gt;\n\n//set和multiset区别\nint main() &#123;\n\n\tset&lt;int&gt; s;\n\tpair&lt;set&lt;int&gt;::iterator, bool&gt; ret = s.insert(10);// set.insert的返回值类型叫_Pairib = pair&lt;iterator, bool&gt;。pair叫对组，相当于成对出现的一组数据。第一个数据是迭代器，在插入数据的时候会返回插到哪了；第二个是布尔数据类型，代表了你插这个数据到底插成功了还是插失败了\n\tif (ret.second) &#123;\n\t\tcout &lt;&lt; &quot;第一次插入成功!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;第一次插入失败!&quot; &lt;&lt; endl;\n\t&#125;\n\tret = s.insert(10);\n\tif (ret.second) &#123;\n\t\tcout &lt;&lt; &quot;第二次插入成功!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;第二次插入失败!&quot; &lt;&lt; endl;\n\t&#125;\n\n\t//multiset\n\tmultiset&lt;int&gt; ms;\n  // 允许插入重复值\n\tms.insert(10);\n\tms.insert(10);\n\tfor (multiset&lt;int&gt;::iterator it = ms.begin(); it != ms.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>如果不允许插入重复数据可以利用 set</li>\n<li>如果需要插入重复数据利用 multiset</li>\n</ul>\n<h3 id=\"387-pair对组创建\"><a class=\"anchor\" href=\"#387-pair对组创建\">#</a> 3.8.7 pair 对组创建</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>成对出现的数据，利用对组可以返回两个数据</li>\n</ul>\n<p><strong>两种创建方式：</strong></p>\n<ul>\n<li><code>pair&lt;type, type&gt; p(value1, value2);</code></li>\n<li><code>pair&lt;type, type&gt; p = make_pair(value1, value2 );</code></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;string&gt;\n\n//对组创建\nint main() &#123;\n\n\tpair&lt;string, int&gt; p(string(&quot;Tom&quot;), 20);\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt;  p.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.second &lt;&lt; endl;\n\n\tpair&lt;string, int&gt; p2 = make_pair(&quot;Jerry&quot;, 10);\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p2.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p2.second &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>两种方式都可以创建对组，记住一种即可</p>\n<h3 id=\"388-set容器排序\"><a class=\"anchor\" href=\"#388-set容器排序\">#</a> 3.8.8 set 容器排序</h3>\n<p>学习目标：</p>\n<ul>\n<li>set 容器默认排序规则为从小到大，掌握如何改变排序规则</li>\n</ul>\n<p>主要技术点：</p>\n<ul>\n<li>\n<p>利用仿函数，可以改变排序规则</p>\n<blockquote>\n<p>仿函数就是重载了函数调用的运算符 ()，利用它可以修改算法的内容，比如说排序，可以改变排序规则</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>示例一</strong>   set 存放内置数据类型</p>\n<pre><code class=\"language-C++\">#include &lt;set&gt;\n\nclass MyCompare &#123;\n public:\n\tbool operator()(int v1, int v2) &#123;\n\t\treturn v1 &gt; v2;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tset&lt;int&gt; s1;\n\ts1.insert(10);\n\ts1.insert(40);\n\ts1.insert(20);\n\ts1.insert(30);\n\ts1.insert(50);\n\t//默认从小到大\n\tfor (set&lt;int&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t//指定排序规则为从大到小。在set容器的模板参数列表中再加一个参数\n\tset&lt;int, MyCompare&gt; s2;\n  //在插数据之前就要告诉set容器从大到小排序\n\ts2.insert(10);\n\ts2.insert(40);\n\ts2.insert(20);\n\ts2.insert(30);\n\ts2.insert(50);\n\tfor (set&lt;int, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：利用仿函数可以指定 set 容器的排序规则</p>\n<p><strong>示例二</strong> set 存放自定义数据类型</p>\n<blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstring m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPerson <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘备\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关羽\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tPerson <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tPerson <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵云\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名： \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄： \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>报错。对于 set 容器而言，默认的排序规则是从小到大，编译器无法比较 Person 数据类型的大小。所以对于自定义的数据类型而言，通常都会指定排序规则</p>\n</blockquote>\n<pre><code class=\"language-C++\">#include &lt;set&gt;\n#include &lt;string&gt;\n\nclass Person &#123;\n public:\n\tPerson(string name, int age) &#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nclass ComparePerson &#123;\n public:\n\tbool operator()(const Person&amp; p1, const Person&amp; p2) &#123;\n\t\t//按照年龄进行排序  降序\n\t\treturn p1.m_Age &gt; p2.m_Age;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tset&lt;Person, ComparePerson&gt; s;\n\n\tPerson p1(&quot;刘备&quot;, 23);\n\tPerson p2(&quot;关羽&quot;, 27);\n\tPerson p3(&quot;张飞&quot;, 25);\n\tPerson p4(&quot;赵云&quot;, 21);\n\n\ts.insert(p1);\n\ts.insert(p2);\n\ts.insert(p3);\n\ts.insert(p4);\n\n\tfor (set&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>对于自定义数据类型，set 必须指定排序规则才可以插入数据</p>\n<h2 id=\"39-map-multimap容器\"><a class=\"anchor\" href=\"#39-map-multimap容器\">#</a> 3.9 map/multimap 容器</h2>\n<h3 id=\"391-map基本概念\"><a class=\"anchor\" href=\"#391-map基本概念\">#</a> 3.9.1 map 基本概念</h3>\n<p><strong>简介：</strong></p>\n<ul>\n<li>map 中所有元素都是 pair</li>\n<li>pair 中第一个元素为 key（键值），起到索引作用，第二个元素为 value（实值）</li>\n<li>所有元素都会根据元素的键值自动排序</li>\n</ul>\n<p><strong>本质：</strong></p>\n<ul>\n<li>map/multimap 属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以根据 key 值快速找到 value 值</li>\n</ul>\n<p>map 和 multimap<strong> 区别</strong>：</p>\n<ul>\n<li>map 不允许容器中有重复 key 值元素</li>\n<li>multimap 允许容器中有重复 key 值元素</li>\n</ul>\n<h3 id=\"392-map构造和赋值\"><a class=\"anchor\" href=\"#392-map构造和赋值\">#</a> 3.9.2 map 构造和赋值</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 map 容器进行构造和赋值操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<p><strong>构造：</strong></p>\n<ul>\n<li><code>map&lt;T1, T2&gt; mp;</code>                      //map 默认构造函数:</li>\n<li><code>map(const map&amp; mp);</code>              // 拷贝构造函数</li>\n</ul>\n<p><strong>赋值：</strong></p>\n<ul>\n<li><code>map&amp; operator=(const map&amp; mp);</code>     // 重载等号操作符</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;map&gt;\n\nvoid printMap(map&lt;int, int&gt;&amp; m) &#123;\n\tfor (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tmap&lt;int, int&gt; m; //默认构造\n\tm.insert(pair&lt;int, int&gt;(1, 10));\n\tm.insert(pair&lt;int, int&gt;(2, 20));\n\tm.insert(pair&lt;int, int&gt;(3, 30));\n\tprintMap(m);\n\n\tmap&lt;int, int&gt; m2(m); //拷贝构造\n\tprintMap(m2);\n\n\tmap&lt;int, int&gt; m3;\n\tm3 = m2; //赋值\n\tprintMap(m3);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：map 中所有元素都是成对出现，插入数据时候要使用对组</p>\n<h3 id=\"393-map大小和交换\"><a class=\"anchor\" href=\"#393-map大小和交换\">#</a> 3.9.3 map 大小和交换</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>统计 map 容器大小以及交换 map 容器</li>\n</ul>\n<p>函数原型：</p>\n<ul>\n<li><code>size();</code>           // 返回容器中元素的数目</li>\n<li><code>empty();</code>         // 判断容器是否为空</li>\n<li><code>swap(st);</code>       // 交换两个集合容器</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;map&gt;\n\nvoid printMap(map&lt;int,int&gt;&amp; m) &#123;\n\tfor (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nvoid test01() &#123;\n\tmap&lt;int, int&gt; m;\n\tm.insert(pair&lt;int, int&gt;(1, 10));\n\tm.insert(pair&lt;int, int&gt;(2, 20));\n\tm.insert(pair&lt;int, int&gt;(3, 30));\n\n\tif (m.empty()) &#123;\n\t\tcout &lt;&lt; &quot;m为空&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;m不为空&quot; &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;m的大小为： &quot; &lt;&lt; m.size() &lt;&lt; endl;\n\t&#125;\n&#125;\n\n//交换\nvoid test02() &#123;\n\tmap&lt;int, int&gt; m;\n\tm.insert(pair&lt;int, int&gt;(1, 10));\n\tm.insert(pair&lt;int, int&gt;(2, 20));\n\tm.insert(pair&lt;int, int&gt;(3, 30));\n\n\tmap&lt;int, int&gt; m2;\n\tm2.insert(pair&lt;int, int&gt;(4, 100));\n\tm2.insert(pair&lt;int, int&gt;(5, 200));\n\tm2.insert(pair&lt;int, int&gt;(6, 300));\n\n\tcout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;\n\tprintMap(m);\n\tprintMap(m2);\n\n\tcout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;\n\tm.swap(m2);\n\tprintMap(m);\n\tprintMap(m2);\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>统计大小   --- size</li>\n<li>判断是否为空   --- empty</li>\n<li>交换容器   --- swap</li>\n</ul>\n<h3 id=\"394-map插入和删除\"><a class=\"anchor\" href=\"#394-map插入和删除\">#</a> 3.9.4 map 插入和删除</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>map 容器进行插入数据和删除数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>insert(elem);</code>            // 在容器中插入元素。</li>\n<li><code>clear();</code>                     // 清除所有元素</li>\n<li><code>erase(pos);</code>               // 删除 pos 迭代器所指的元素，返回下一个元素的迭代器。</li>\n<li><code>erase(beg, end);</code>     // 删除区间 [beg,end) 的所有元素 ，返回下一个元素的迭代器。</li>\n<li><code>erase(key);</code>             // 删除容器中值为 key 的元素。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;map&gt;\n\nvoid printMap(map&lt;int,int&gt;&amp; m) &#123;\n\tfor (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\t//插入\n\tmap&lt;int, int&gt; m;\n\t//第一种插入方式\n\tm.insert(pair&lt;int, int&gt;(1, 10));\n\t//第二种插入方式\n\tm.insert(make_pair(2, 20));\n\t//第三种插入方式\n\tm.insert(map&lt;int, int&gt;::value_type(3, 30));\n\t//第四种插入方式\n\tm[4] = 40;\n  // []不建议插入\n  cout &lt;&lt; m[5] &lt;&lt; endl;// 0。如果没有找到key为5的数字，会创建出来一个key为5value为0的键值对\n  // 用途：可以利用key访问到value\n  cout &lt;&lt; m[4] &lt;&lt; endl;// 40\n\tprintMap(m);// 1-10、2-20、3-30、4-40、5-0\n\n\t//删除\n\tm.erase(m.begin());\n\tprintMap(m);\n\tm.erase(3);\n\tprintMap(m);\n\n\t//清空\n\tm.erase(m.begin(), m.end());\n\tm.clear();\n\tprintMap(m);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>\n<p>map 插入方式很多，记住其一即可</p>\n</li>\n<li>\n<p>插入   --- insert</p>\n</li>\n<li>\n<p>删除   --- erase</p>\n</li>\n<li>\n<p>清空   --- clear</p>\n</li>\n</ul>\n<h3 id=\"395-map查找和统计\"><a class=\"anchor\" href=\"#395-map查找和统计\">#</a> 3.9.5 map 查找和统计</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对 map 容器进行查找数据以及统计数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>find(key);</code>                   // 查找 key 是否存在，若存在，返回该键的元素的迭代器；若不存在，返回 set.end ();</li>\n<li><code>count(key);</code>                 // 统计 key 的元素个数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;map&gt;\n\n//查找和统计\nint main() &#123;\n\n\tmap&lt;int, int&gt; m; \n\tm.insert(pair&lt;int, int&gt;(1, 10));\n\tm.insert(pair&lt;int, int&gt;(2, 20));\n\tm.insert(pair&lt;int, int&gt;(3, 30));\n  m.insert(pair&lt;int, int&gt;(3, 40));// 插不进去。map不允许插入重复key的元素\n\n\t//查找\n\tmap&lt;int, int&gt;::iterator pos = m.find(3);\n\tif (pos != m.end()) &#123;\n\t\tcout &lt;&lt; &quot;找到了元素 key = &quot; &lt;&lt; (*pos).first &lt;&lt; &quot; value = &quot; &lt;&lt; pos-&gt;second &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;\n\t&#125;\n\n\t//统计\n\tint num = m.count(3);\n\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;// 1\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>查找   ---  find    （返回的是迭代器）</li>\n<li>统计   ---  count  （对于 map，结果为 0 或者 1）</li>\n</ul>\n<h3 id=\"396-map容器排序\"><a class=\"anchor\" href=\"#396-map容器排序\">#</a> 3.9.6 map 容器排序</h3>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>map 容器默认排序规则为 按照 key 值进行 从小到大排序，掌握如何改变排序规则</li>\n</ul>\n<p><strong>主要技术点:</strong></p>\n<ul>\n<li>利用仿函数，可以改变排序规则</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;map&gt;\n\nclass MyCompare &#123;\n public:\n\tbool operator()(int v1, int v2) &#123;\n\t\treturn v1 &gt; v2;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\t//默认从小到大排序\n\t//利用仿函数实现从大到小排序\n\tmap&lt;int, int, MyCompare&gt; m;\n\n\tm.insert(make_pair(1, 10));\n\tm.insert(make_pair(2, 20));\n\tm.insert(make_pair(3, 30));\n\tm.insert(make_pair(4, 40));\n\tm.insert(make_pair(5, 50));\n\n\tfor (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;key:&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value:&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>利用仿函数可以指定 map 容器的排序规则</li>\n<li>对于自定义数据类型的 key，map 必须要指定排序规则，同 set 容器</li>\n</ul>\n<h2 id=\"310-案例-员工分组\"><a class=\"anchor\" href=\"#310-案例-员工分组\">#</a> 3.10 案例 - 员工分组</h2>\n<h3 id=\"3101-案例描述\"><a class=\"anchor\" href=\"#3101-案例描述\">#</a> 3.10.1 案例描述</h3>\n<ul>\n<li>公司今天招聘了 10 个员工（ABCDEFGHIJ），10 名员工进入公司之后，需要指派员工在那个部门工作</li>\n<li>员工信息有：姓名  工资组成；部门分为：策划、美术、研发</li>\n<li>随机给 10 名员工分配部门和工资</li>\n<li>通过 multimap 进行信息的插入  key (部门编号) value (员工)</li>\n<li>分部门显示员工信息</li>\n</ul>\n<h3 id=\"3102-实现步骤\"><a class=\"anchor\" href=\"#3102-实现步骤\">#</a> 3.10.2 实现步骤</h3>\n<ol>\n<li>创建 10 名员工，放到 vector 中</li>\n<li>遍历 vector 容器，取出每个员工，进行随机分组</li>\n<li>分组后，将员工部门编号作为 key，具体员工作为 value，放入到 multimap 容器中</li>\n<li>分部门显示员工信息</li>\n</ol>\n<p><strong>案例代码：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>- 公司今天招聘了 10 个员工（ABCDEFGHIJ），10 名员工进入公司之后，需要指派员工在那个部门工作</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>- 员工信息有：姓名  工资组成；部门分为：策划、美术、研发</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 随机给 10 名员工分配部门和工资</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>- 通过 multimap 进行信息的插入  key (部门编号) value (员工)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>- 分部门显示员工信息</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CEHUA</span>  <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEISHU</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">YANFA</span>  <span class=\"token expression\"><span class=\"token number\">2</span></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  string m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createWorker</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Worker<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  string nameSeed <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJ\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    Worker worker<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    worker<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">=</span> <span class=\"token string\">\"员工\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    worker<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">+=</span> nameSeed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    worker<span class=\"token punctuation\">.</span>m_Salary <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10000 ~ 19999</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 将员工放入到容器中</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 员工分组</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setGroup</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Worker<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Worker<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Worker<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 产生随机部门编号</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span> deptId <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 1 2 </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 将员工插入到分组中</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//key 部门编号，value 具体员工</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    m<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>deptId<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">showWorkerByGourp</span><span class=\"token punctuation\">(</span>multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Worker<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// 0  A  B  C   1  D  E   2  F G ...</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"策划部门：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Worker<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator pos <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>CEHUA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>CEHUA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 统计具体人数</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> pos <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> pos<span class=\"token operator\">++</span> <span class=\"token punctuation\">,</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名： \"</span> <span class=\"token operator\">&lt;&lt;</span> pos<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 工资： \"</span> <span class=\"token operator\">&lt;&lt;</span> pos<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Salary <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"美术部门： \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  pos <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>MEISHU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  count <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>MEISHU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 统计具体人数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> pos <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> pos<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名： \"</span> <span class=\"token operator\">&lt;&lt;</span> pos<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 工资： \"</span> <span class=\"token operator\">&lt;&lt;</span> pos<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Salary <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"研发部门： \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  pos <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>YANFA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  count <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>YANFA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 统计具体人数</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> pos <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> pos<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名： \"</span> <span class=\"token operator\">&lt;&lt;</span> pos<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 工资： \"</span> <span class=\"token operator\">&lt;&lt;</span> pos<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span>m_Salary <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">//1、创建员工</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>Worker<span class=\"token operator\">></span> vWorker<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token function\">createWorker</span><span class=\"token punctuation\">(</span>vWorker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token comment\">//for (vector&lt;Worker>::iterator it = vWorker.begin(); it != vWorker.end(); it++) &#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token comment\">//  cout &lt;&lt; \"姓名：\" &lt;&lt; it->m_Name &lt;&lt; \"工资：\" &lt;&lt; it->m_Salary &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token comment\">//2、员工分组</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Worker<span class=\"token operator\">></span> mWorker<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token function\">setGroup</span><span class=\"token punctuation\">(</span>vWorker<span class=\"token punctuation\">,</span> mWorker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token comment\">//3、分组显示员工</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token function\">showWorkerByGourp</span><span class=\"token punctuation\">(</span>mWorker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>当数据以键值对形式存在，可以考虑用 map 或 multimap</li>\n</ul>\n<h1 id=\"4-stl-函数对象\"><a class=\"anchor\" href=\"#4-stl-函数对象\">#</a> 4 STL- 函数对象</h1>\n<h2 id=\"41-函数对象\"><a class=\"anchor\" href=\"#41-函数对象\">#</a> 4.1 函数对象</h2>\n<h3 id=\"411-函数对象概念\"><a class=\"anchor\" href=\"#411-函数对象概念\">#</a> 4.1.1 函数对象概念</h3>\n<p><strong>概念：</strong></p>\n<ul>\n<li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li>\n<li><strong>函数对象</strong>使用重载的 () 时，行为类似函数调用，也叫<strong>仿函数</strong></li>\n</ul>\n<p><strong>本质：</strong></p>\n<p>函数对象 (仿函数) 是一个<strong>类</strong>，不是一个函数</p>\n<h3 id=\"412-函数对象使用\"><a class=\"anchor\" href=\"#412-函数对象使用\">#</a> 4.1.2 函数对象使用</h3>\n<p><strong>特点：</strong></p>\n<ul>\n<li>函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值</li>\n<li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li>\n<li>函数对象可以作为参数传递</li>\n</ul>\n<p><strong>示例:</strong></p>\n<pre><code class=\"language-C++\">#include &lt;string&gt;\n\n//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值\nclass MyAdd &#123;\n public :\n\tint operator()(int v1,int v2) &#123;\n\t\treturn v1 + v2;\n\t&#125;\n&#125;;\nvoid test01() &#123;\n\tMyAdd myAdd;\n\tcout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;\n&#125;\n\n//2、函数对象可以有自己的状态\nclass MyPrint &#123;\n public:\n\tMyPrint() &#123;\n\t\tcount = 0;\n\t&#125;\n\tvoid operator()(string test) &#123;\n\t\tcout &lt;&lt; test &lt;&lt; endl;\n\t\tcount++; //统计使用次数\n\t&#125;\n\n\tint count; //内部自己的状态\n&#125;;\nvoid test02() &#123;\n\tMyPrint myPrint;\n\tmyPrint(&quot;hello world&quot;);\n\tmyPrint(&quot;hello world&quot;);\n\tmyPrint(&quot;hello world&quot;);\n\tcout &lt;&lt; &quot;myPrint调用次数为： &quot; &lt;&lt; myPrint.count &lt;&lt; endl;\n&#125;\n\n//3、函数对象可以作为参数传递\nvoid doPrint(MyPrint&amp; mp, string test) &#123;\n\tmp(test);\n&#125;\nvoid test03() &#123;\n\tMyPrint myPrint;\n\tdoPrint(myPrint, &quot;Hello C++&quot;);\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\ttest03();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>仿函数写法非常灵活，可以作为参数进行传递。</li>\n</ul>\n<h2 id=\"42-谓词\"><a class=\"anchor\" href=\"#42-谓词\">#</a> 4.2 谓词</h2>\n<h3 id=\"421-谓词概念\"><a class=\"anchor\" href=\"#421-谓词概念\">#</a> 4.2.1 谓词概念</h3>\n<p><strong>概念：</strong></p>\n<ul>\n<li>返回 bool 类型的<mark>仿函数</mark>称为<strong>谓词</strong></li>\n<li>如果 operator () 接受一个参数，那么叫做一元谓词</li>\n<li>如果 operator () 接受两个参数，那么叫做二元谓词</li>\n</ul>\n<h3 id=\"422-一元谓词\"><a class=\"anchor\" href=\"#422-一元谓词\">#</a> 4.2.2 一元谓词</h3>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\n//1.一元谓词\nclass GreaterFive&#123;\n\tbool operator()(int val) &#123;\n\t\treturn val &gt; 5;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n\n  // 查找容器中有没有大于5的数字。第三个参数是匿名函数对象\n\tvector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;没找到!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>find_if 底层实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Predicate</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>_LIBCPP_NODISCARD_EXT <span class=\"token keyword\">inline</span> _LIBCPP_INLINE_VISIBILITY</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _LIBCPP_CONSTEXPR_SINCE_CXX20 _InputIterator</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span> _Predicate __pred<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> __first <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>__first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__pred</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>__first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> __first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p>总结：参数只有一个的谓词，称为一元谓词</p>\n<h3 id=\"423-二元谓词\"><a class=\"anchor\" href=\"#423-二元谓词\">#</a> 4.2.3 二元谓词</h3>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n//二元谓词\nclass MyCompare &#123;\n public:\n\tbool operator()(int num1, int num2) &#123;\n\t\treturn num1 &gt; num2;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tv.push_back(10);\n\tv.push_back(40);\n\tv.push_back(20);\n\tv.push_back(30);\n\tv.push_back(50);\n\n\t//默认从小到大\n\tsort(v.begin(), v.end());\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\tcout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl;\n\n\t//使用函数对象改变算法策略，排序从大到小\n\tsort(v.begin(), v.end(), MyCompare());\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：参数只有两个的谓词，称为二元谓词</p>\n<h2 id=\"43-内建函数对象\"><a class=\"anchor\" href=\"#43-内建函数对象\">#</a> 4.3 内建函数对象</h2>\n<h3 id=\"431-内建函数对象意义\"><a class=\"anchor\" href=\"#431-内建函数对象意义\">#</a> 4.3.1 内建函数对象意义</h3>\n<p><strong>概念：</strong></p>\n<ul>\n<li>STL 内建了一些函数对象</li>\n</ul>\n<p><strong>分类:</strong></p>\n<ul>\n<li>算术仿函数</li>\n<li>关系仿函数</li>\n<li>逻辑仿函数</li>\n</ul>\n<p><strong>用法：</strong></p>\n<ul>\n<li>这些仿函数所产生的对象，用法和一般函数完全相同</li>\n<li>使用内建函数对象，需要引入头文件  <code>#include&lt;functional&gt;</code></li>\n</ul>\n<h3 id=\"432-算术仿函数\"><a class=\"anchor\" href=\"#432-算术仿函数\">#</a> 4.3.2 算术仿函数</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现四则运算</li>\n<li>其中 negate 是一元运算，其他都是二元运算</li>\n</ul>\n<p><strong>仿函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                 // 加法仿函数</li>\n<li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>               // 减法仿函数</li>\n<li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>     // 乘法仿函数</li>\n<li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>          // 除法仿函数</li>\n<li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>          // 取模仿函数</li>\n<li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>            // 取反仿函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;functional&gt;\n//negate\nvoid test01() &#123;\n\tnegate&lt;int&gt; n;\n\tcout &lt;&lt; n(50) &lt;&lt; endl;\n&#125;\n\n//plus\nvoid test02() &#123;\n\tplus&lt;int&gt; p;\n\tcout &lt;&lt; p(10, 20) &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：使用内建函数对象时，需要引入头文件  <code>#include &lt;functional&gt;</code></p>\n<h3 id=\"433-关系仿函数\"><a class=\"anchor\" href=\"#433-关系仿函数\">#</a> 4.3.3 关系仿函数</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现关系对比</li>\n</ul>\n<p><strong>仿函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                     // 等于</li>\n<li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>             // 不等于</li>\n<li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                       // 大于</li>\n<li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>           // 大于等于</li>\n<li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                            // 小于</li>\n<li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>                // 小于等于</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;functional&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass MyCompare &#123;\n public:\n\tbool operator()(int v1,int v2) &#123;\n\t\treturn v1 &gt; v2;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\n\tv.push_back(10);\n\tv.push_back(30);\n\tv.push_back(50);\n\tv.push_back(40);\n\tv.push_back(20);\n\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t//自己实现仿函数\n\t//sort(v.begin(), v.end(), MyCompare());\n  \n\t//STL内建仿函数  大于仿函数\n\tsort(v.begin(), v.end(), greater&lt;int&gt;());\n\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：关系仿函数中最常用的就是 greater&lt;&gt; 大于</p>\n<h3 id=\"434-逻辑仿函数\"><a class=\"anchor\" href=\"#434-逻辑仿函数\">#</a> 4.3.4 逻辑仿函数</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现逻辑运算</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>               // 逻辑与</li>\n<li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                 // 逻辑或</li>\n<li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>               // 逻辑非</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;functional&gt;\n#include &lt;algorithm&gt;\n\nint main() &#123;\n\n\tvector&lt;bool&gt; v;\n\tv.push_back(true);\n\tv.push_back(false);\n\tv.push_back(true);\n\tv.push_back(false);\n\n\tfor (vector&lt;bool&gt;::iterator it = v.begin(); it!= v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t//逻辑非  将v容器搬运到v2中，并执行逻辑非运算\n\tvector&lt;bool&gt; v2;\n\tv2.resize(v.size());\n\ttransform(v.begin(), v.end(), v2.begin(), logical_not&lt;bool&gt;());\n\tfor (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：逻辑仿函数实际应用较少，了解即可</p>\n<h1 id=\"5-stl-常用算法\"><a class=\"anchor\" href=\"#5-stl-常用算法\">#</a> 5 STL- 常用算法</h1>\n<p><strong>概述</strong>:</p>\n<ul>\n<li>\n<p>算法主要是由头文件 <code>&lt;algorithm&gt;</code>   <code>&lt;functional&gt;</code>   <code>&lt;numeric&gt;</code>  组成。</p>\n</li>\n<li>\n<p><code>&lt;algorithm&gt;</code>  是所有 STL 头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p>\n</li>\n<li>\n<p><code>&lt;numeric&gt;</code>  体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p>\n</li>\n<li>\n<p><code>&lt;functional&gt;</code>  定义了一些模板类，用以声明函数对象。</p>\n</li>\n</ul>\n<h2 id=\"51-常用遍历算法\"><a class=\"anchor\" href=\"#51-常用遍历算法\">#</a> 5.1 常用遍历算法</h2>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的遍历算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>for_each</code>      // 遍历容器</li>\n<li><code>transform</code>    // 搬运容器到另一个容器中</li>\n</ul>\n<h3 id=\"511-for_each\"><a class=\"anchor\" href=\"#511-for_each\">#</a> 5.1.1 for_each</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现遍历容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>for_each(iterator beg, iterator end, _func);  </code></p>\n<p>// 遍历算法 遍历容器元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_func 函数或者函数对象</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\n//普通函数\nvoid print01(int val) &#123;\n\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n&#125;\n//函数对象（仿函数）\nclass Print02 &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\n//for_each算法基本用法\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n\n\t//遍历算法\n\tfor_each(v.begin(), v.end(), print01);\n\tcout &lt;&lt; endl;\n\n\tfor_each(v.begin(), v.end(), Print02());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**for_each 在实际开发中是最常用遍历算法，需要熟练掌握</p>\n<h3 id=\"512-transform\"><a class=\"anchor\" href=\"#512-transform\">#</a> 5.1.2 transform</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>搬运容器到另一个容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li>\n</ul>\n<p>//beg1 源容器开始迭代器</p>\n<p>//end1 源容器结束迭代器</p>\n<p>//beg2 目标容器开始迭代器</p>\n<p>//_func 函数或者函数对象</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include&lt;vector&gt;\n#include&lt;algorithm&gt;\n\n//常用遍历算法  搬运 transform\n\nclass TransForm &#123;\n public:\n\tint operator()(int val) &#123;\n\t\treturn val + 100;\n\t&#125;\n&#125;;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n\n\tvector&lt;int&gt; vTarget; //目标容器\n\n\tvTarget.resize(v.size()); // 目标容器需要提前开辟空间\n\ttransform(v.begin(), v.end(), vTarget.begin(), TransForm());\n\n\tfor_each(vTarget.begin(), vTarget.end(), MyPrint());\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p>\n<h2 id=\"52-常用查找算法\"><a class=\"anchor\" href=\"#52-常用查找算法\">#</a> 5.2 常用查找算法</h2>\n<p>学习目标：</p>\n<ul>\n<li>掌握常用的查找算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>find</code>                      // 查找元素</li>\n<li><code>find_if</code>                // 按条件查找元素</li>\n<li><code>adjacent_find</code>     // 查找相邻重复元素</li>\n<li><code>binary_search</code>     // 二分查找法</li>\n<li><code>count</code>                    // 统计元素个数</li>\n<li><code>count_if</code>              // 按条件统计元素个数</li>\n</ul>\n<h3 id=\"521-find\"><a class=\"anchor\" href=\"#521-find\">#</a> 5.2.1 find</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器 end ()</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>find(iterator beg, iterator end, value);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 查找的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\nvoid test01() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i + 1);\n\t&#125;\n\t//查找容器中是否有 5 这个元素\n\tvector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5);\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n&#125;\n\nclass Person &#123;\n public:\n\tPerson(string name, int age) &#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\t//重载==，让底层的find知道如何对比Person数据类型\n\tbool operator==(const Person&amp; p) &#123;\n\t\tif (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123;\n\t\t\treturn true;\n\t\t&#125;\n\t\treturn false;\n\t&#125;\n\n public:\n\tstring m_Name;\n\tint m_Age;\n&#125;;\nvoid test02() &#123;\n\n\tvector&lt;Person&gt; v;\n\n\t//创建数据\n\tPerson p1(&quot;aaa&quot;, 10);\n\tPerson p2(&quot;bbb&quot;, 20);\n\tPerson p3(&quot;ccc&quot;, 30);\n\tPerson p4(&quot;ddd&quot;, 40);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\n\tvector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;\n\t&#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>find 算法现在操纵的是自定义的数据类型 Person，它不知道怎么去做 <code>==</code>  号的对比，所以要给 Person 重载 <code>==</code>  号</p>\n</blockquote>\n<p>总结： 利用 find 可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p>\n<h3 id=\"522-find_if\"><a class=\"anchor\" href=\"#522-find_if\">#</a> 5.2.2 find_if</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>按条件查找元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>find_if(iterator beg, iterator end, _Pred);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_Pred 函数或者谓词（返回 bool 类型的仿函数）</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\n//1、查找内置数据类型\nclass GreaterFive &#123;\n public:\n\tbool operator()(int val) &#123;\n\t\treturn val &gt; 5;\n\t&#125;\n&#125;;\nvoid test01() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i + 1);\n\t&#125;\n\n\tvector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;找到大于5的数字:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n&#125;\n\n//2、查找自定义数据类型\nclass Person &#123;\n public:\n\tPerson(string name, int age) &#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n public:\n\tstring m_Name;\n\tint m_Age;\n&#125;;\nclass Greater20 &#123;\n public:\n\tbool operator()(Person&amp; p) &#123;\n\t\treturn p.m_Age &gt; 20;\n\t&#125;\n&#125;;\nvoid test02() &#123;\n\n\tvector&lt;Person&gt; v;\n\n\t//创建数据\n\tPerson p1(&quot;aaa&quot;, 10);\n\tPerson p2(&quot;bbb&quot;, 20);\n\tPerson p3(&quot;ccc&quot;, 30);\n\tPerson p4(&quot;ddd&quot;, 40);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\n\tvector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：find_if 按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p>\n<h3 id=\"523-adjacent_find\"><a class=\"anchor\" href=\"#523-adjacent_find\">#</a> 5.2.3 adjacent_find</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>查找相邻重复元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>adjacent_find(iterator beg, iterator end);  </code></p>\n<p>// 查找相邻重复元素，返回相邻元素的第一个位置的迭代器</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nvoid test01() &#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(5);\n\tv.push_back(2);\n\tv.push_back(4);\n\tv.push_back(4);\n\tv.push_back(3);\n\n\t//查找相邻重复元素\n\tvector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end());\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;找不到!&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;找到相邻重复元素为:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n&#125;\n</code></pre>\n<p>总结：面试题中如果出现查找相邻重复元素，记得用 STL 中的 adjacent_find 算</p>\n<h3 id=\"524-binary_search\"><a class=\"anchor\" href=\"#524-binary_search\">#</a> 5.2.4 binary_search</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>查找指定元素是否存在</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>bool binary_search(iterator beg, iterator end, value);  </code></p>\n<p>// 查找指定的元素，查到 返回 true  否则 false</p>\n<p>// 注意：在<strong>无序序列中不可用</strong></p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 查找的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n  // v.push_back(2);// 如果是无序序列，结果会输出&quot;未找到&quot;\n\t//二分查找\n\tbool ret = binary_search(v.begin(), v.end(), 2);\n\tif (ret) &#123;\n\t\tcout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p>\n<h3 id=\"525-count\"><a class=\"anchor\" href=\"#525-count\">#</a> 5.2.5 count</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>统计元素个数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>count(iterator beg, iterator end, value);  </code></p>\n<p>// 统计元素出现次数</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 统计的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\n//内置数据类型\nvoid test01() &#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(4);\n\n\tint num = count(v.begin(), v.end(), 4);\n\n\tcout &lt;&lt; &quot;4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\n\n//自定义数据类型\nclass Person &#123;\n public:\n\tPerson(string name, int age) &#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\tbool operator==(const Person&amp; p) &#123;// 必须加const，否则会报错\n\t\tif (this-&gt;m_Age == p.m_Age) &#123;\n\t\t\treturn true;\n\t\t&#125; else &#123;\n\t\t\treturn false;\n\t\t&#125;\n\t&#125;\n\tstring m_Name;\n\tint m_Age;\n&#125;;\nvoid test02() &#123;\n\tvector&lt;Person&gt; v;\n\n\tPerson p1(&quot;刘备&quot;, 35);\n\tPerson p2(&quot;关羽&quot;, 35);\n\tPerson p3(&quot;张飞&quot;, 35);\n\tPerson p4(&quot;赵云&quot;, 30);\n\tPerson p5(&quot;曹操&quot;, 25);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\tv.push_back(p5);\n    \n  Person p(&quot;诸葛亮&quot;,35);\n\n\tint num = count(v.begin(), v.end(), p);\n\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>count 算法底层实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>_LIBCPP_NODISCARD_EXT <span class=\"token keyword\">inline</span> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typename</span> <span class=\"token class-name\">iterator_traits</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>difference_type</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">typename</span> <span class=\"token class-name\">iterator_traits</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>difference_type <span class=\"token function\">__r</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> __first <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>__first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>__first <span class=\"token operator\">==</span> __value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">++</span>__r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> __r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载  <code>operator==</code></p>\n<h3 id=\"526-count_if\"><a class=\"anchor\" href=\"#526-count_if\">#</a> 5.2.6 count_if</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>按条件统计元素个数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>count_if(iterator beg, iterator end, _Pred);  </code></p>\n<p>// 按条件统计元素出现次数</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_Pred 谓词</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass Greater4 &#123;\n public:\n\tbool operator()(int val) &#123;\n\t\treturn val &gt;= 4;\n\t&#125;\n&#125;;\n//内置数据类型\nvoid test01() &#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(4);\n\n\tint num = count_if(v.begin(), v.end(), Greater4());\n\n\tcout &lt;&lt; &quot;大于4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\n\n//自定义数据类型\nclass Person &#123;\n public:\n\tPerson(string name, int age) &#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\n\tstring m_Name;\n\tint m_Age;\n&#125;;\nclass AgeLess35 &#123;\n public:\n\tbool operator()(const Person&amp; p) &#123;\n\t\treturn p.m_Age &lt; 35;\n\t&#125;\n&#125;;\nvoid test02() &#123;\n\tvector&lt;Person&gt; v;\n\n\tPerson p1(&quot;刘备&quot;, 35);\n\tPerson p2(&quot;关羽&quot;, 35);\n\tPerson p3(&quot;张飞&quot;, 35);\n\tPerson p4(&quot;赵云&quot;, 30);\n\tPerson p5(&quot;曹操&quot;, 25);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\tv.push_back(p5);\n\n\tint num = count_if(v.begin(), v.end(), AgeLess35());\n\tcout &lt;&lt; &quot;小于35岁的个数：&quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 按值统计用 count，按条件统计用 count_if</p>\n<h2 id=\"53-常用排序算法\"><a class=\"anchor\" href=\"#53-常用排序算法\">#</a> 5.3 常用排序算法</h2>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的排序算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>sort</code>              // 对容器内元素进行排序</li>\n<li><code>random_shuffle</code>    // 洗牌   指定范围内的元素随机调整次序</li>\n<li><code>merge </code>            // 容器元素合并，并存储到另一容器中</li>\n<li><code>reverse</code>        // 反转指定范围的元素</li>\n</ul>\n<h3 id=\"531-sort\"><a class=\"anchor\" href=\"#531-sort\">#</a> 5.3.1 sort</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对容器内元素进行排序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>sort(iterator beg, iterator end, _Pred);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//  beg    开始迭代器</p>\n<p>//  end    结束迭代器</p>\n<p>//_Pred  谓词</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nvoid myPrint(int val) &#123;\n\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n&#125;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tv.push_back(10);\n\tv.push_back(30);\n\tv.push_back(50);\n\tv.push_back(20);\n\tv.push_back(40);\n\n\t//sort默认从小到大排序\n\tsort(v.begin(), v.end());\n\tfor_each(v.begin(), v.end(), myPrint);\n\tcout &lt;&lt; endl;\n\n\t//从大到小排序\n\tsort(v.begin(), v.end(), greater&lt;int&gt;());\n\tfor_each(v.begin(), v.end(), myPrint);\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**sort 属于开发中最常用的算法之一，需熟练掌握</p>\n<h3 id=\"532-shuffle\"><a class=\"anchor\" href=\"#532-shuffle\">#</a> 5.3.2 shuffle</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>洗牌   指定范围内的元素随机调整次序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>shuffle(iterator beg, iterator end, UniformRandomNumberGenerator&amp;&amp; __g);  </code></p>\n<p>// 指定范围内的元素随机调整次序</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//__g 统一随机数生成器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;ctime&gt;\n#include &lt;random&gt;  // 包含 random_device 和 default_random_engine\n\nclass myPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tsrand((unsigned int)time(NULL));\n\tvector&lt;int&gt; v;\n\tfor(int i = 0 ; i &lt; 10;i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n\n\t//打乱顺序\n  // 创建随机数生成器\n  random_device rd;// 获取随机数种子\n  default_random_engine eng(rd());// 使用随机数种子初始化引擎\n\trandom(v.begin(), v.end(), eng);// 使用 shuffle 进行随机打乱\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**shuffle 洗牌算法比较实用，使用时记得加随机数种子</p>\n<h3 id=\"533-merge\"><a class=\"anchor\" href=\"#533-merge\">#</a> 5.3.3 merge</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>两个容器元素合并，并存储到另一容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 容器元素合并，并存储到另一容器中</p>\n<p>// 注意：两个容器必须是<strong>有序的</strong></p>\n<p>//beg1   容器 1 开始迭代器 //end1   容器 1 结束迭代器 //beg2   容器 2 开始迭代器 //end2   容器 2 结束迭代器 //dest    目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10 ; i++) &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i + 1);\n\t&#125;\n\n\tvector&lt;int&gt; vtarget;\n\t//目标容器需要提前开辟空间\n\tvtarget.resize(v1.size() + v2.size());\n\t//合并  需要两个有序序列\n\tmerge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());\n\tfor_each(vtarget.begin(), vtarget.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**merge 合并的两个容器必须的有序序列</p>\n<h3 id=\"534-reverse\"><a class=\"anchor\" href=\"#534-reverse\">#</a> 5.3.4 reverse</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器内元素进行反转</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>reverse(iterator beg, iterator end);  </code></p>\n<p>// 反转指定范围的元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tv.push_back(10);\n\tv.push_back(30);\n\tv.push_back(50);\n\tv.push_back(20);\n\tv.push_back(40);\n\n\tcout &lt;&lt; &quot;反转前： &quot; &lt;&lt; endl;\n\tfor_each(v.begin(), v.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;反转后： &quot; &lt;&lt; endl;\n\treverse(v.begin(), v.end());\n\tfor_each(v.begin(), v.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**reverse 反转区间内元素，面试题可能涉及到</p>\n<h2 id=\"54-常用拷贝和替换算法\"><a class=\"anchor\" href=\"#54-常用拷贝和替换算法\">#</a> 5.4 常用拷贝和替换算法</h2>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的拷贝和替换算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>copy</code>                       // 容器内指定范围的元素拷贝到另一容器中</li>\n<li><code>replace</code>                 // 将容器内指定范围的旧元素修改为新元素</li>\n<li><code>replace_if </code>           // 容器内指定范围满足条件的元素替换为新元素</li>\n<li><code>swap</code>                      // 互换两个容器的元素</li>\n</ul>\n<h3 id=\"541-copy\"><a class=\"anchor\" href=\"#541-copy\">#</a> 5.4.1 copy</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>容器内指定范围的元素拷贝到另一容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>copy(iterator beg, iterator end, iterator dest);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//beg  开始迭代器</p>\n<p>//end  结束迭代器</p>\n<p>//dest 目标起始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i + 1);\n\t&#125;\n\tvector&lt;int&gt; v2;\n\tv2.resize(v1.size());\n\tcopy(v1.begin(), v1.end(), v2.begin());\n\n\tfor_each(v2.begin(), v2.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>拷贝算法用到的几率比较小，拷贝操作类似于一个赋值操作，把 v1 容器中的数据都赋值给 v2，直接用一个 = 赋值就完事了</p>\n</blockquote>\n<p>** 总结：** 利用 copy 算法在拷贝时，目标容器记得提前开辟空间</p>\n<h3 id=\"542-replace\"><a class=\"anchor\" href=\"#542-replace\">#</a> 5.4.2 replace</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器内指定范围的旧元素修改为新元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p>\n<p>// 将区间内旧元素 替换成 新元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//oldvalue 旧元素</p>\n<p>//newvalue 新元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tv.push_back(20);\n\tv.push_back(30);\n\tv.push_back(20);\n\tv.push_back(40);\n\tv.push_back(50);\n\tv.push_back(10);\n\tv.push_back(20);\n\n\tcout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;\n\tfor_each(v.begin(), v.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\t//将容器中的20 替换成 2000\n\tcout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;\n\treplace(v.begin(), v.end(), 20, 2000);\n\tfor_each(v.begin(), v.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**replace 会替换区间内满足条件的元素</p>\n<h3 id=\"543-replace_if\"><a class=\"anchor\" href=\"#543-replace_if\">#</a> 5.4.3 replace_if</h3>\n<p><strong>功能描述:</strong></p>\n<ul>\n<li>将区间内满足条件的元素，替换成指定元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p>\n<p>// 按条件替换元素，满足条件的替换成指定元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_pred 谓词</p>\n<p>//newvalue 替换的新元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nclass ReplaceGreater30 &#123;\n public:\n\tbool operator()(int val) &#123;\n\t\treturn val &gt;= 30;\n\t&#125;\n\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tv.push_back(20);\n\tv.push_back(30);\n\tv.push_back(20);\n\tv.push_back(40);\n\tv.push_back(50);\n\tv.push_back(10);\n\tv.push_back(20);\n\n\tcout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;\n\tfor_each(v.begin(), v.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\t//将容器中大于等于的30 替换成 3000\n\tcout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;\n\treplace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);\n\tfor_each(v.begin(), v.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**replace_if 按条件查找，可以利用仿函数灵活筛选满足的条件</p>\n<h3 id=\"544-swap\"><a class=\"anchor\" href=\"#544-swap\">#</a> 5.4.4 swap</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>互换两个容器的元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>swap(container c1, container c2);  </code></p>\n<p>// 互换两个容器的元素</p>\n<p>//c1 容器 1</p>\n<p>//c2 容器 2</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i+100);\n\t&#125;\n\n\tcout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;\n\tfor_each(v1.begin(), v1.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\tfor_each(v2.begin(), v2.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;\n\tswap(v1, v2);\n\tfor_each(v1.begin(), v1.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\tfor_each(v2.begin(), v2.end(), MyPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**swap 交换容器时，注意交换的容器要同种类型</p>\n<h2 id=\"55-常用算术生成算法\"><a class=\"anchor\" href=\"#55-常用算术生成算法\">#</a> 5.5 常用算术生成算法</h2>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的算术生成算法</li>\n</ul>\n<p><strong>注意：</strong></p>\n<ul>\n<li>算术生成算法属于小型算法，使用时包含的头文件为  <code>#include &lt;numeric&gt;</code></li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li>\n<p><code>accumulate</code>       // 计算容器元素累计总和</p>\n</li>\n<li>\n<p><code>fill</code>                  // 向容器中添加元素</p>\n</li>\n</ul>\n<h3 id=\"551-accumulate\"><a class=\"anchor\" href=\"#551-accumulate\">#</a> 5.5.1 accumulate</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>计算区间内 容器元素累计总和</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>accumulate(iterator beg, iterator end, value);  </code></p>\n<p>// 计算容器元素累计总和</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 起始值</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;numeric&gt;\n#include &lt;vector&gt;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt;= 100; i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n\n\tint total = accumulate(v.begin(), v.end(), 0);\n\n\tcout &lt;&lt; &quot;total = &quot; &lt;&lt; total &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**accumulate 使用时头文件注意是 numeric，这个算法很实用</p>\n<h3 id=\"552-fill\"><a class=\"anchor\" href=\"#552-fill\">#</a> 5.5.2 fill</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>向容器中填充指定的元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>fill(iterator beg, iterator end, value);  </code></p>\n<p>// 向容器中填充元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 填充的值</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;numeric&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nvoid myPrint(int val) &#123;\n  cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n&#125;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v;\n\tv.resize(10);\n\t//填充\n\tfill(v.begin(), v.end(), 100);\n\n\tfor_each(v.begin(), v.end(), myPrint);\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 利用 fill 可以将容器区间内元素填充为 指定的值</p>\n<h2 id=\"56-常用集合算法\"><a class=\"anchor\" href=\"#56-常用集合算法\">#</a> 5.6 常用集合算法</h2>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的集合算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li>\n<p><code>set_intersection</code>           // 求两个容器的交集</p>\n</li>\n<li>\n<p><code>set_union</code>                        // 求两个容器的并集</p>\n</li>\n<li>\n<p><code>set_difference </code>               // 求两个容器的差集</p>\n</li>\n</ul>\n<h3 id=\"561-set_intersection\"><a class=\"anchor\" href=\"#561-set_intersection\">#</a> 5.6.1 set_intersection</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个容器的交集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 求两个集合的交集</p>\n<p>// <strong>注意：两个集合必须是有序序列</strong></p>\n<p>//beg1 容器 1 开始迭代器 //end1 容器 1 结束迭代器 //beg2 容器 2 开始迭代器 //end2 容器 2 结束迭代器 //dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass MyPrint &#123;\npublic:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);// 0～9\n\t\tv2.push_back(i+5);// 5～14\n\t&#125;\n\n\tvector&lt;int&gt; vTarget;\n\t//目标容器需要提前开辟空间。最特殊情况：大容器包含小容器，开辟空间取两个里面较小的值给目标容器开辟空间\n\tvTarget.resize(min(v1.size(), v2.size()));\n\n\t//返回目标容器的最后一个元素的迭代器地址\n\tvector&lt;int&gt;::iterator itEnd = set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());\n\n\tfor_each(vTarget.begin(), itEnd, MyPrint());// 若不用itEnd，用vTarget.end()，则遍历出来的结果是5 6 7 8 9 0 0 0 0 0，相当于是把容器中所有数据都遍历一遍\n  // 5 6 7 8 9\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411151109547.png\" alt=\"\" /></p>\n</blockquote>\n<p><strong>总结：</strong></p>\n<ul>\n<li>求交集的两个集合必须是有序序列</li>\n<li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li>\n<li>set_intersection 返回值既是交集中最后一个元素的位置</li>\n</ul>\n<h3 id=\"562-set_union\"><a class=\"anchor\" href=\"#562-set_union\">#</a> 5.6.2 set_union</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个集合的并集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 求两个集合的并集</p>\n<p>// <strong>注意：两个集合必须是有序序列</strong></p>\n<p>//beg1 容器 1 开始迭代器 //end1 容器 1 结束迭代器 //beg2 容器 2 开始迭代器 //end2 容器 2 结束迭代器 //dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i+5);\n\t&#125;\n\n\tvector&lt;int&gt; vTarget;\n\t//取两个容器的和给目标容器开辟空间。最特殊情况：两个容器没有交集，并集就是两个容器size相加\n\tvTarget.resize(v1.size() + v2.size());\n\n\t//返回目标容器的最后一个元素的迭代器地址\n\tvector&lt;int&gt;::iterator itEnd = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());\n\n\tfor_each(vTarget.begin(), itEnd, MyPrint());\n  // 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n  // 若用vTarget.end()而不用itEnd，则输出0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 0 0 0 0 0\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<ul>\n<li>求并集的两个集合必须是有序序列</li>\n<li>目标容器开辟空间需要<strong>两个容器相加</strong></li>\n<li>set_union 返回值既是并集中最后一个元素的位置</li>\n</ul>\n<h3 id=\"563-set_difference\"><a class=\"anchor\" href=\"#563-set_difference\">#</a> 5.6.3 set_difference</h3>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个集合的差集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 求两个集合的差集</p>\n<p>// <strong>注意：两个集合必须是有序序列</strong></p>\n<p>//beg1 容器 1 开始迭代器 //end1 容器 1 结束迭代器 //beg2 容器 2 开始迭代器 //end2 容器 2 结束迭代器 //dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass MyPrint &#123;\n public:\n\tvoid operator()(int val) &#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i+5);\n\t&#125;\n\n  //创建目标容器\n\tvector&lt;int&gt; vTarget;\n\t//最特殊情况：两个容器没有交集，取两个里面较大的size给目标容器开辟空间\n\tvTarget.resize(max(v1.size(), v2.size()));\n\n\t//返回目标容器的最后一个元素的迭代器地址\n\tcout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl;\n\tvector&lt;int&gt;::iterator itEnd = set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());\n\tfor_each(vTarget.begin(), itEnd, MyPrint());// 若不传itEnd而传vTarget.end()，则打印0 1 2 3 4 0 0 0 0 0，后几个0并不是v1和v2的差集。想看到真正差集的结束的位置要把set_difference返回的结束位置itEnd传进来\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl;\n\titEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());\n\tfor_each(vTarget.begin(), itEnd, MyPrint());\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411151124424.png\" alt=\"\" /></p>\n</blockquote>\n<p><strong>总结：</strong></p>\n<ul>\n<li>求差集的两个集合必须的有序序列</li>\n<li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li>\n<li>set_difference 返回值既是差集中最后一个元素的位置</li>\n</ul>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E4%BA%8C.%E5%AE%9E%E6%88%98-%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://60saint.github.io/cpp/%E4%BA%8C.%E5%AE%9E%E6%88%98-%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "二.实战-职工管理系统",
            "date_published": "2024-11-06T12:14:43.622Z",
            "content_html": "<h1 id=\"1-管理系统需求\"><a class=\"anchor\" href=\"#1-管理系统需求\">#</a> 1、管理系统需求</h1>\n<p>职工管理系统可以用来管理公司内所有员工的信息</p>\n<p>本教程主要利用 C++ 来实现一个基于多态的职工管理系统</p>\n<p>公司中职工分为三类：普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责</p>\n<ul>\n<li>\n<p>普通员工职责：完成经理交给的任务</p>\n</li>\n<li>\n<p>经理职责：完成老板交给的任务，并下发任务给员工</p>\n</li>\n<li>\n<p>老板职责：管理公司所有事务</p>\n</li>\n</ul>\n<p>管理系统中需要实现的功能如下：</p>\n<ul>\n<li>退出管理程序：退出当前管理系统</li>\n</ul>\n<ul>\n<li>增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门编号</li>\n<li>显示职工信息：显示公司内部所有职工的信息</li>\n<li>删除离职职工：按照编号删除指定的职工</li>\n<li>修改职工信息：按照编号修改职工个人信息</li>\n<li>查找职工信息：按照职工的编号或者职工的姓名进行查找相关的人员信息</li>\n<li>按照编号排序：按照职工编号，进行排序，排序规则由用户指定</li>\n<li>清空所有文档：清空文件中记录的所有职工信息 （清空前需要再次确认，防止误删）</li>\n</ul>\n<p>系统界面效果图如下：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411071350896.png\" alt=\"\" /></p>\n<p>需根据用户不同的选择，完成不同的功能！</p>\n<h1 id=\"2-创建项目\"><a class=\"anchor\" href=\"#2-创建项目\">#</a> 2、创建项目</h1>\n<p>打开命令面板，输入 create C++ project，按回车后可以选择保存工程的文件夹</p>\n<h1 id=\"3-创建管理类\"><a class=\"anchor\" href=\"#3-创建管理类\">#</a> 3、创建管理类</h1>\n<p>管理类负责的内容如下：</p>\n<ul>\n<li>\n<p>与用户的沟通菜单界面</p>\n<blockquote>\n<p>给用户提供一个菜单界面，让用户选择不同的功能，比如增加 / 修改 / 删除职工等等</p>\n</blockquote>\n</li>\n<li>\n<p>对职工增删改查的操作</p>\n<blockquote>\n<p>当用户选完之后，对应的功能就要做实现，实现方面也要通过这个类提供对应的成员函数。比如选择了添加职工，就要实现添加职工的功能，所以对职工的增删改查操作也是由这个类写的</p>\n</blockquote>\n</li>\n<li>\n<p>与文件的读写交互</p>\n<blockquote>\n<p>比如增加 / 修改完这个职工，要同步到文件中，由这个管理类提供接口来实现。包括再次打开这个项目，要从文件中读取数据，这时候也由管理类实现</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"31-创建文件\"><a class=\"anchor\" href=\"#31-创建文件\">#</a> 3.1 创建文件</h2>\n<p>在头文件和源文件的文件夹下分别创建 workerManager.h 和 workerManager.cpp 文件</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411071433534.png\" alt=\"\" /></p>\n<h2 id=\"32-头文件实现\"><a class=\"anchor\" href=\"#32-头文件实现\">#</a> 3.2 头文件实现</h2>\n<p>在 workerManager.h 中设计管理类</p>\n<p>代码如下：</p>\n<pre><code class=\"language-C++\">#pragma once          // 防止头文件重复包含\n#include &lt;iostream&gt;   // 包含输入输出流头文件\nusing namespace std;  // 使用标准命名空间\n\nclass WorkerManager &#123;\n public:\n  WorkerManager();\n  ~WorkerManager();\n&#125;;\n</code></pre>\n<h2 id=\"33-源文件实现\"><a class=\"anchor\" href=\"#33-源文件实现\">#</a> 3.3 源文件实现</h2>\n<p>在 workerManager.cpp 中将构造和析构函数空实现补全</p>\n<pre><code class=\"language-C++\">#include &quot;workerManager.h&quot;\n\nWorkerManager::WorkerManager() &#123;\n&#125;\nWorkerManager::~WorkerManager() &#123;\n&#125;\n</code></pre>\n<p>至此职工管理类以创建完毕</p>\n<h1 id=\"4-菜单功能\"><a class=\"anchor\" href=\"#4-菜单功能\">#</a> 4、菜单功能</h1>\n<p>功能描述：与用户的沟通界面</p>\n<h2 id=\"41-添加成员函数\"><a class=\"anchor\" href=\"#41-添加成员函数\">#</a> 4.1 添加成员函数</h2>\n<p>在管理类 workerManager.h 中添加成员函数   <code>void Show_Menu();</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411071457606.png\" alt=\"\" /></p>\n<h2 id=\"42-菜单功能实现\"><a class=\"anchor\" href=\"#42-菜单功能实现\">#</a> 4.2 菜单功能实现</h2>\n<p>在管理类 workerManager.cpp 中实现  Show_Menu () 函数</p>\n<pre><code class=\"language-C++\">void WorkerManager::showMenu() &#123;\n  cout &lt;&lt; &quot;********************************************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*********  欢迎使用职工管理系统！ **********&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  0.退出管理程序  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  1.增加职工信息  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  2.显示职工信息  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  3.删除离职职工  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  4.修改职工信息  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  5.查找职工信息  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  6.按照编号排序  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*************  7.清空所有文档  *************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;********************************************&quot; &lt;&lt; endl;\n  cout &lt;&lt; endl;\n&#125;\n</code></pre>\n<h2 id=\"43-测试菜单功能\"><a class=\"anchor\" href=\"#43-测试菜单功能\">#</a> 4.3 测试菜单功能</h2>\n<p>main.cpp 中测试菜单功能</p>\n<p>代码：</p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;workerManager.h&quot;\n\nint main() &#123;\n  // 实例化管理者对象\n  WorkerManager wm;\n  // 调用展示菜单成员函数\n  wm.showMenu();\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  return 0;\n&#125;\n\n</code></pre>\n<p>运行效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411071459011.png\" alt=\"\" /></p>\n<h1 id=\"5-退出功能\"><a class=\"anchor\" href=\"#5-退出功能\">#</a> 5、退出功能</h1>\n<h2 id=\"51-提供功能接口\"><a class=\"anchor\" href=\"#51-提供功能接口\">#</a> 5.1 提供功能接口</h2>\n<p>在 main 函数中提供分支选择，提供每个功能接口</p>\n<p>代码：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n  WorkerManager wm;\n\n  int choice = 0;  // 用来存储用户的选项\n  while (true) &#123;\n    wm.showMenu();\n    cout &lt;&lt; &quot;请输入您的选择：&quot; &lt;&lt; endl;\n    cin &gt;&gt; choice;  // 接受用户的选项\n    switch (choice) &#123;\n      case 0:  // 退出系统\n        break;\n      case 1:  // 增加职工\n        break;\n      case 2:  // 显示职工\n        break;\n      case 3:  // 删除职工\n        break;\n      case 4:  // 修改职工\n        break;\n      case 5:  // 查找职工\n        break;\n      case 6:  // 排序职工\n        break;\n      case 7:  // 清空文档\n        break;\n      default:\n        system(&quot;clear&quot;);  // 清屏\n        break;\n    &#125;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  return 0;\n&#125;\n</code></pre>\n<h2 id=\"52-实现退出功能\"><a class=\"anchor\" href=\"#52-实现退出功能\">#</a> 5.2 实现退出功能</h2>\n<p>在 workerManager.h 中提供退出系统的成员函数  <code>\tvoid exitSystem();</code></p>\n<p>在 workerManager.cpp 中提供具体的功能实现</p>\n<pre><code class=\"language-C++\">void WorkerManager::exitSystem() &#123;\n  cout &lt;&lt; &quot;欢迎下次使用&quot; &lt;&lt; endl;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  exit(0);  // 退出程序\n&#125;\n</code></pre>\n<h2 id=\"53-测试功能\"><a class=\"anchor\" href=\"#53-测试功能\">#</a> 5.3 测试功能</h2>\n<p>在 main 函数分支 0  选项中，调用退出程序的接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 退出系统</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">exitSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>运行测试效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411071518218.png\" alt=\"\" /></p>\n<h1 id=\"6-创建职工类\"><a class=\"anchor\" href=\"#6-创建职工类\">#</a> 6、创建职工类</h1>\n<h2 id=\"61-创建职工抽象类\"><a class=\"anchor\" href=\"#61-创建职工抽象类\">#</a> 6.1 创建职工抽象类</h2>\n<p>职工的分类为：普通员工、经理、老板</p>\n<p>将三种职工抽象到一个类（worker）中，利用多态管理不同职工种类</p>\n<p>职工的属性为：职工编号、职工姓名、职工所在部门编号</p>\n<p>职工的行为为：岗位职责信息描述，获取岗位名称</p>\n<p>头文件文件夹下  创建文件 worker.h  文件并且添加如下代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;string&gt;\n\n// 职工抽象类\nclass Worker &#123;\n public:\n  int m_Id;       // 职工编号\n  string m_Name;  // 职工姓名\n  int m_DeptId;   // 部门编号\n\n  // 显示个人信息\n  virtual void showInfo() = 0;  // 在抽象类中不做任何函数的实现，所以写成纯虚函数\n  // 获取岗位名称\n  virtual void getDeptName() = 0;\n&#125;;\n</code></pre>\n<blockquote>\n<p>Worker 这个抽象类不需要实现，所以不用创建.cpp 源文件</p>\n</blockquote>\n<h2 id=\"62-创建普通员工类\"><a class=\"anchor\" href=\"#62-创建普通员工类\">#</a> 6.2 创建普通员工类</h2>\n<p>普通员工类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数</p>\n<p>在头文件和源文件的文件夹下分别创建 employee.h 和 employee.cpp 文件</p>\n<p>employee.h 中代码如下：</p>\n<pre><code class=\"language-C++\">// 普通员工文件\n#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;worker.h&quot;\n\nclass Employee : public Worker &#123;\n public:\n  Employee(int id, string name, int dId);  // 提供一个构造函数，因为每一个员工在构造的时候应该初始化身上的属性\n\n  // 显示个人信息\n  virtual void showInfo();\n  // 获取岗位名称\n  virtual string getDeptName();\n&#125;;\n</code></pre>\n<p>employee.cpp 中代码如下：</p>\n<pre><code class=\"language-C++\">#include &quot;employee.h&quot;\n\nEmployee::Employee(int id, string name, int dId) &#123;\n  this-&gt;m_Id = id;\n  this-&gt;m_Name = name;\n  this-&gt;m_DeptId = dId;\n&#125;\n\n// 显示个人信息\nvoid Employee::showInfo() &#123;\n  cout &lt;&lt; &quot;职工编号：&quot; &lt;&lt; this-&gt;m_Id &lt;&lt; &quot;\\t职工姓名：&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getDeptName() &lt;&lt; &quot;\\t岗位职责：完成经理交给的任务&quot; &lt;&lt; endl;\n&#125;\n// 获取岗位名称\nstring Employee::getDeptName() &#123;\n  return string(&quot;员工&quot;);  // 直接返回&quot;员工&quot;的话是const char*类型。用不用string包含都可以，因为如果不包含的话编译器会做隐式类型转换，把const char*转成string\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li>字面量  <code>&quot;员工&quot;</code>  在 C++ 中被视为  <code>const char[]</code>  类型，实际上是一个指向该数组首元素的指针，即  <code>const char*</code> 。</li>\n<li>当将这个字面量传递给  <code>std::string</code>  的构造函数时，它会将这个  <code>const char*</code>  转换为  <code>std::string</code>  对象。</li>\n<li><code>std::string</code>  是 C++ 标准库提供的一个类，用于更方便地处理字符串。它提供了许多成员函数来操作字符串，比如拼接、查找、替换等。</li>\n</ul>\n</blockquote>\n<h2 id=\"63-创建经理类\"><a class=\"anchor\" href=\"#63-创建经理类\">#</a> 6.3 创建经理类</h2>\n<p>经理类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p>\n<p>在头文件和源文件的文件夹下分别创建 manager.h 和 manager.cpp 文件</p>\n<p>manager.h 中代码如下：</p>\n<pre><code class=\"language-c++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;worker.h&quot;\n\n// 经理类\nclass Manager : public Worker &#123;\n public:\n  Manager(int id, string name, int dId);\n\n  // 显示个人信息\n  virtual void showInfo();\n  // 获取岗位名称\n  virtual string getDeptName();\n&#125;;\n</code></pre>\n<p>manager.cpp 中代码如下：</p>\n<pre><code class=\"language-c++\">#include &quot;manager.h&quot;\n\nManager::Manager(int id, string name, int dId) &#123;\n  this-&gt;m_Id = id;\n  this-&gt;m_Name = name;\n  this-&gt;m_DeptId = dId;\n&#125;\n\n// 显示个人信息\nvoid Manager::showInfo() &#123;\n  cout &lt;&lt; &quot;职工编号：&quot; &lt;&lt; this-&gt;m_Id &lt;&lt; &quot;\\t职工姓名：&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getDeptName() &lt;&lt; &quot;\\t岗位职责：完成老板交给的任务，并下发任务给普通员工&quot; &lt;&lt; endl;\n&#125;\n// 获取岗位名称\nstring Manager::getDeptName() &#123;\n  return string(&quot;经理&quot;);\n&#125;\n</code></pre>\n<h2 id=\"64-创建老板类\"><a class=\"anchor\" href=\"#64-创建老板类\">#</a> 6.4 创建老板类</h2>\n<p>老板类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p>\n<p>在头文件和源文件的文件夹下分别创建 boss.h 和 boss.cpp 文件</p>\n<p>boss.h 中代码如下：</p>\n<pre><code class=\"language-c++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;worker.h&quot;\n\n// 老板类\nclass Boss : public Worker &#123;\n public:\n  Boss(int id, string name, int dId);\n\n  // 显示个人信息\n  virtual void showInfo();\n  // 获取岗位名称\n  virtual string getDeptName();\n&#125;;\n</code></pre>\n<p>boss.cpp 中代码如下：</p>\n<pre><code class=\"language-c++\">#include &quot;boss.h&quot;\n\nBoss::Boss(int id, string name, int dId) &#123;\n  this-&gt;m_Id = id;\n  this-&gt;m_Name = name;\n  this-&gt;m_DeptId = dId;\n&#125;\n\n// 显示个人信息\nvoid Boss::showInfo() &#123;\n  cout &lt;&lt; &quot;职工编号：&quot; &lt;&lt; this-&gt;m_Id &lt;&lt; &quot;\\t职工姓名：&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getDeptName() &lt;&lt; &quot;\\t岗位职责：管理公司所有事务&quot; &lt;&lt; endl;\n&#125;\n// 获取岗位名称\nstring Boss::getDeptName() &#123;\n  return string(&quot;总裁&quot;);\n&#125;\n</code></pre>\n<h2 id=\"65-测试多态\"><a class=\"anchor\" href=\"#65-测试多态\">#</a> 6.5 测试多态</h2>\n<p>Main.cpp 中添加测试函数，并且运行能够产生多态</p>\n<p>测试代码如下：</p>\n<pre><code class=\"language-C++\">#include &quot;boss.h&quot;\n#include &quot;employee.h&quot;\n#include &quot;manager.h&quot;\n#include &quot;worker.h&quot;\n\nint main() &#123;\n  // 测试代码：\n  Worker* worker = NULL;\n  worker = new Employee(1, &quot;张三&quot;, 1);\n  worker-&gt;showInfo();\n  //   delete worker;\n\n  Worker* worker2 = NULL;\n  worker2 = new Manager(2, &quot;李四&quot;, 2);\n  worker2-&gt;showInfo();\n  //   delete worker2;\n\n  Worker* worker3 = NULL;\n  worker3 = new Boss(3, &quot;王五&quot;, 3);\n  worker3-&gt;showInfo();\n  //   delete worker3;\n&#125;\n</code></pre>\n<blockquote>\n<p>先不 delete，因为 Worker 类没有虚析构函数，所以通过基类指针删除派生类对象时，不会走子类 Employee / Manager / Boss 的析构函数，只会调用基类的析构函数。可能会导致派生类中分配的资源（如动态分配的内存）无法被正确释放，从而引发内存泄漏</p>\n</blockquote>\n<p>运行效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411071650618.png\" alt=\"\" /></p>\n<blockquote>\n<p>多态主要体现在 showInfo，一个函数有多种形态。当 3 个不同的对象都调用 showInfo 的时候，显示的内容是不一样的，因为不同子类里边具体的代码实现是不一样的</p>\n</blockquote>\n<p>测试成功后，测试代码可以注释保留，或者选择删除</p>\n<h1 id=\"7-添加职工\"><a class=\"anchor\" href=\"#7-添加职工\">#</a> 7、添加职工</h1>\n<p>功能描述：批量添加职工，并且保存到文件中</p>\n<h2 id=\"71-功能分析\"><a class=\"anchor\" href=\"#71-功能分析\">#</a> 7.1 功能分析</h2>\n<p>分析：</p>\n<p>用户在批量创建时，可能会创建不同种类的职工</p>\n<blockquote>\n<p>比如添加了 5 个职工，怎么记录这 5 个职工呢？可以通过一个数组记录这 5 个职工。这个时候有一个问题，职工有不同的种类，可能有的职工是普通员工 Employee 类的对象，还有可能是经理 Manager 类的对象，还有可能是老板 Boss 的对象。每个对象不一样，又知道数组中要存放相同类型的数据，所以问题就是怎么通过一个数组把所有的职工放进去</p>\n</blockquote>\n<p>如果想将所有不同种类的员工都放入到一个数组中，可以将所有员工的指针维护到一个数组里</p>\n<p>如果想在程序中维护这个不定长度的数组，可以将数组创建到堆区，并利用 Worker** 的指针维护</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411072141029.jpg\" alt=\"\" /></p>\n<blockquote>\n<p><code>Worker** = new Worker*[5]</code> 。new 一个每个元素都是 Worker * 的数组，一共有五个元素，它的返回值等号左侧应该写 <code>Worker**</code>  去接收它</p>\n<p>父类的指针一开始创建 5 个，如果再添加职工，可以把 5 个再扩展。可以再找一个更长的内存，加到 6 个或 7 个元素，把原来的数据加进来，把原来空间释放掉</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411072149409.png\" alt=\"\" /></p>\n</blockquote>\n<h2 id=\"72-功能实现\"><a class=\"anchor\" href=\"#72-功能实现\">#</a> 7.2 功能实现</h2>\n<p>在 WokerManager.h 头文件中添加成员属性 代码：</p>\n<pre><code class=\"language-C++\">int m_EmpNum;         // 记录职工人数\nWorker** m_EmpArray;  // 职工数组指针。数组的每个元素是指向Worker类对象的指针，那么该数组的首地址就是Worker**\n</code></pre>\n<p>在 WorkerManager 构造函数中初始化属性</p>\n<pre><code class=\"language-C++\">WorkerManager::WorkerManager() &#123;\n  // 初始化属性\n  this-&gt;m_EmpNum = 0;\n  this-&gt;m_EmpArray = NULL;\n&#125;\n</code></pre>\n<p>在 workerManager.h 中添加成员函数</p>\n<pre><code class=\"language-C++\">// 添加职工\nvoid addEmp();\n</code></pre>\n<p>workerManager.cpp 中实现该函数</p>\n<pre><code class=\"language-C++\">// 添加职工\nvoid WorkerManager::addEmp() &#123;\n  cout &lt;&lt; &quot;请输入添加职工数量：&quot; &lt;&lt; endl;\n  int addNum = 0;  // 保存用户的输入数量\n  cin &gt;&gt; addNum;\n  if (addNum &gt; 0) &#123;  // 添加\n    // 计算添加新空间大小\n    int newSize = this-&gt;m_EmpNum + addNum;  // 新空间人数 = 原来记录人数 + 新增人数\n\n    // 开辟新空间\n    Worker** newSpace = new Worker*[newSize];\n\n    // 将原来空间下数据，拷贝到新空间下\n    if (this-&gt;m_EmpArray != NULL) &#123;  // 如果只检查 this-&gt;m_EmpNum != 0，而 m_EmpArray 仍然是 NULL，那么在尝试访问 m_EmpArray[i] 时会导致程序崩溃\n      for (int i = 0; i &lt; this-&gt;m_EmpNum; i++) &#123;\n        newSpace[i] = this-&gt;m_EmpArray[i];\n      &#125;\n    &#125;\n\n    // 批量添加新数据\n    for (int i = 0; i &lt; addNum; i++) &#123;\n      int id;       // 职工编号\n      string name;  // 职工姓名\n      int dSelect;  // 部门选择\n      cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工编号：&quot; &lt;&lt; endl;\n      cin &gt;&gt; id;\n      cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工姓名：&quot; &lt;&lt; endl;\n      cin &gt;&gt; name;\n      cout &lt;&lt; &quot;请选择该职工岗位：&quot; &lt;&lt; endl;\n      cout &lt;&lt; &quot;1、普通职工&quot; &lt;&lt; endl;\n      cout &lt;&lt; &quot;2、经理&quot; &lt;&lt; endl;\n      cout &lt;&lt; &quot;3、老板&quot; &lt;&lt; endl;\n      cin &gt;&gt; dSelect;\n\n      Worker* worker = NULL;\n      switch (dSelect) &#123;\n        case 1:\n          worker = new Employee(id, name, 1);\n          break;\n        case 2:\n          worker = new Manager(id, name, 2);\n          break;\n        case 3:\n          worker = new Employee(id, name, 3);\n          break;\n      &#125;\n\n      // 将创建的职工指针，保存到数组中\n      newSpace[this-&gt;m_EmpNum + i] = worker;\n    &#125;\n\n    // 释放原有空间\n    delete[] this-&gt;m_EmpArray;  // 要释放的是一个数组，所以要加一个中括号[]\n\n    // 更改新空间的指向\n    this-&gt;m_EmpArray = newSpace;\n\n    // 更新新的职工人数\n    this-&gt;m_EmpNum = newSize;\n\n    // 成功添加后，保存到文件中\n\n    // 提示添加成功\n    cout &lt;&lt; &quot;成功添加&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工！&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; &quot;输入数据有误&quot; &lt;&lt; endl;\n  &#125;\n\n  // 按任意键后清屏回到上级目录\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<blockquote>\n<p><strong> <code>delete</code>  vs  <code>delete[]</code> </strong></p>\n<ol>\n<li>\n<p><strong> <code>delete</code> </strong>:</p>\n<ul>\n<li>\n<p>用于释放通过  <code>new</code>  分配的单个对象。</p>\n</li>\n<li>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确，释放单个对象</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong> <code>delete[]</code> </strong>:</p>\n<ul>\n<li>\n<p>用于释放通过  <code>new[]</code>  分配的数组。</p>\n</li>\n<li>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分配一个数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确，释放数组</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<p><strong>区别</strong></p>\n<p>内存管理:</p>\n<ul>\n<li>当你使用  <code>new[]</code>  分配一个数组时，编译器会在数组的开头存储数组的大小信息，以便在调用  <code>delete[]</code>  时能够正确地调用每个元素的析构函数（如果有的话）并释放相应的内存。</li>\n<li>如果你使用  <code>delete</code>  来释放一个数组，编译器不会知道这是一个数组，因此它只会释放第一个元素的内存，可能导致内存泄漏或未定义行为。</li>\n</ul>\n</blockquote>\n<p>workerManager.cpp 中实现析构函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">WorkerManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">WorkerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// WorkerManager 的 m_EmpArray 成员属性是开辟在堆区的数据，最好在析构函数中释放。虽然程序执行完自动释放所有分配的内存，但这并不意味着可以忽略在析构函数中释放内存。特别是在长时间运行的程序或需要频繁分配和释放内存的程序中，未能正确释放内存会导致内存泄漏，最终可能导致程序崩溃或性能下降</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_EmpArray <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_EmpArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_EmpArray <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"73-测试添加\"><a class=\"anchor\" href=\"#73-测试添加\">#</a> 7.3 测试添加</h2>\n<p>在 main 函数分支 1  选项中，调用添加职工接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 增加职工</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">addEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>至此，添加职工到程序中功能实现完毕</p>\n<h1 id=\"8-文件交互-写文件\"><a class=\"anchor\" href=\"#8-文件交互-写文件\">#</a> 8、文件交互 - 写文件</h1>\n<p>功能描述：对文件进行读写</p>\n<p>在上一个添加功能中，我们只是将所有的数据添加到了内存中，一旦程序结束就无法保存了</p>\n<p>因此文件管理类中需要一个与文件进行交互的功能，对于文件进行读写操作</p>\n<h2 id=\"81-设定文件路径\"><a class=\"anchor\" href=\"#81-设定文件路径\">#</a> 8.1 设定文件路径</h2>\n<p>首先我们将文件路径，在 workerManager.h 中添加宏常量，并且包含头文件 fstream</p>\n<pre><code class=\"language-C++\">#include &lt;fstream&gt;\n\n#define  FILENAME &quot;workerFile.txt&quot;\n</code></pre>\n<h2 id=\"82-成员函数声明\"><a class=\"anchor\" href=\"#82-成员函数声明\">#</a> 8.2 成员函数声明</h2>\n<p>在 workerManager.h 中类里添加成员函数  <code>void save()</code></p>\n<pre><code class=\"language-C++\">//保存文件\nvoid save();\n</code></pre>\n<h2 id=\"83-保存文件功能实现\"><a class=\"anchor\" href=\"#83-保存文件功能实现\">#</a> 8.3 保存文件功能实现</h2>\n<pre><code class=\"language-C++\">// 保存文件\nvoid WorkerManager::save() &#123;\n  ofstream ofs;\n  ofs.open(FILENAME, ios::out);  // 用输出的方式打开文件 - 写文件\n\n  // 将每个人数据写入到文件中\n  for (int i = 0; i &lt; this-&gt;m_EmpNum; i++) &#123;\n    ofs &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; &quot; &quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; &quot; &quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;\n  &#125;\n\n  // 关闭文件\n  ofs.close();\n&#125;\n</code></pre>\n<h2 id=\"84-保存文件功能测试\"><a class=\"anchor\" href=\"#84-保存文件功能测试\">#</a> 8.4 保存文件功能测试</h2>\n<p>在添加职工功能中添加成功后添加保存文件函数</p>\n<p>在 workerManager.cpp 的 addEmp 函数中结尾处插入：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 成功添加职工后，保存到文件中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>再次运行代码，添加职工</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081356510.png\" alt=\"\" /></p>\n<p>同级目录下多出文件，并且保存了添加的信息</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081358645.png\" alt=\"\" /></p>\n<h1 id=\"9-文件交互-读文件\"><a class=\"anchor\" href=\"#9-文件交互-读文件\">#</a> 9、文件交互 - 读文件</h1>\n<p>功能描述：将文件中的内容读取到程序中</p>\n<p>虽然我们实现了添加职工后保存到文件的操作，但是每次开始运行程序，并没有将文件中数据读取到程序中</p>\n<p>而我们的程序功能中还有清空文件的需求</p>\n<p>因此构造函数初始化数据的情况分为三种</p>\n<ol>\n<li>\n<p>第一次使用，文件未创建</p>\n</li>\n<li>\n<p>文件存在，但是数据被用户清空</p>\n<blockquote>\n<p>因为自后还要提供一个清空文件的功能，所以这个文件是存在的，只不过里边一行代码都没有，一个数据都没有</p>\n</blockquote>\n</li>\n<li>\n<p>文件存在，并且保存职工的所有数据</p>\n</li>\n</ol>\n<h2 id=\"91-文件未创建\"><a class=\"anchor\" href=\"#91-文件未创建\">#</a> 9.1 文件未创建</h2>\n<p>在 workerManager.h 中添加新的成员属性 m_FileIsEmpty 标志文件是否为空</p>\n<pre><code class=\"language-C++\">//标志文件是否为空\nbool m_FileIsEmpty;\n</code></pre>\n<p>修改 WorkerManager.cpp 中构造函数代码</p>\n<pre><code class=\"language-C++\">WorkerManager::WorkerManager() &#123;\n  // 1、文件不存在\n  ifstream ifs;\n  ifs.open(FILENAME, ios::in);  // 读文件\n  if (!ifs.is_open()) &#123;\n    cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;\n    // 初始化属性\n    this-&gt;m_EmpNum = 0;          // 初始化记录人数\n    this-&gt;m_EmpArray = NULL;     // 初始化数组指针\n    this-&gt;m_FileIsEmpty = true;  // 初始化文件是否为空\n    ifs.close();\n    return;\n  &#125;\n&#125;\n</code></pre>\n<p>删除文件后，测试文件不存在时初始化数据功能</p>\n<h2 id=\"92-文件存在且数据为空\"><a class=\"anchor\" href=\"#92-文件存在且数据为空\">#</a> 9.2 文件存在且数据为空</h2>\n<p>在 workerManager.cpp 中的构造函数追加代码：</p>\n<pre><code class=\"language-C++\">// 2、文件存在但数据为空\nchar ch;\nifs &gt;&gt; ch;\nif (ifs.eof()) &#123;\n  // 文件为空\n  cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;\n  this-&gt;m_EmpNum = 0;\n  this-&gt;m_EmpArray = NULL;\n  this-&gt;m_FileIsEmpty = true;\n  ifs.close();\n  return;\n&#125;\n</code></pre>\n<blockquote>\n<p><code>ifs &gt;&gt; ch;</code>  用于从文件流中读取一个字符，并且通过  <code>ifs.eof()</code>  判断是否已经到达文件的末尾（EOF）。如果文件为空，则  <code>ifs &gt;&gt; ch;</code>  会立即遇到 EOF，条件  <code>ifs.eof()</code>  为真</p>\n</blockquote>\n<p>将文件创建后清空文件内容，并测试该情况下初始化功能</p>\n<p>我们发现文件不存在或者为空清空 m_FileIsEmpty 判断文件是否为空的标志都为真，那何时为假？</p>\n<p>成功添加职工后，应该更改文件不为空的标志</p>\n<p>在 <code>void WorkerManager::Add_Emp() </code> 成员函数中添加：</p>\n<pre><code class=\"language-C++\">//更新职工不为空标志\nthis-&gt;m_FileIsEmpty = false;\n</code></pre>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081419730.png\" alt=\"\" /></p>\n<h2 id=\"93-文件存在且保存职工数据\"><a class=\"anchor\" href=\"#93-文件存在且保存职工数据\">#</a> 9.3 文件存在且保存职工数据</h2>\n<h3 id=\"931-获取记录的职工人数\"><a class=\"anchor\" href=\"#931-获取记录的职工人数\">#</a> 9.3.1 获取记录的职工人数</h3>\n<p>在 workerManager.h 中添加成员函数  <code> int get_EmpNum();</code></p>\n<pre><code class=\"language-C++\">// 统计文件中人数\nint getEmpNum();\n</code></pre>\n<p>workerManager.cpp 中实现</p>\n<pre><code class=\"language-C++\">// 统计文件中人数\nint WorkerManager::getEmpNum() &#123;\n  ifstream ifs;\n  ifs.open(FILENAME, ios::in);  // 打开文件，读\n\n  int id;\n  string name;\n  int dId;\n\n  int num = 0;\n  while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId) &#123;\n    num++;  // 统计人数变量\n  &#125;\n  return num;\n&#125;\n</code></pre>\n<blockquote>\n<p><strong> <code>while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)</code>  语句的工作原理</strong></p>\n<ol>\n<li><strong> <code>ifs &gt;&gt; id</code> </strong>：<br />\n这是从文件中读取一个整数并将其存储到  <code>id</code>  变量中。 <code>&gt;&gt;</code>  操作符在读取时会跳过空格、制表符和换行符，直到它遇到一个非空格字符，然后把字符转换成目标类型（在这个例子中是  <code>int</code> ）。</li>\n<li><strong> <code>ifs &gt;&gt; name</code> </strong>：<br />\n这是从文件中读取一个字符串并将其存储到  <code>name</code>  变量中。 <code>&gt;&gt;</code>  操作符会读取直到第一个空格、制表符或换行符为止的字符序列，并将它们作为一个字符串赋值给  <code>name</code> 。</li>\n<li><strong> <code>ifs &gt;&gt; dId</code> </strong>：<br />\n这又是一个整数读取操作，与  <code>ifs &gt;&gt; id</code>  类似，它从文件中读取一个整数并将其存储到  <code>dId</code>  中。</li>\n</ol>\n<p><strong>循环的执行</strong></p>\n<p><code>while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)</code>  这个循环会继续执行，直到其中任意一个  <code>&gt;&gt;</code>  操作失败为止。这里的 “失败” 意味着：</p>\n<ul>\n<li><code>ifs &gt;&gt; id</code> ：如果遇到非数字字符，或者到达文件末尾（EOF），这个操作会失败。</li>\n<li><code>ifs &gt;&gt; name</code> ：如果遇到非字母字符（如数字或空白字符），或者到达文件末尾（EOF），这个操作会失败。</li>\n<li><code>ifs &gt;&gt; dId</code> ：同样，如果遇到无法转换成整数的字符，或者到达文件末尾（EOF），这个操作会失败。</li>\n</ul>\n<p>每一次循环的过程中， <code>while</code>  语句会尝试依次读取这三项数据。如果文件数据格式正确且符合预期，读取会成功；如果遇到文件结束或数据格式不正确（例如数据行缺失了某个字段）， <code>&gt;&gt;</code>  操作将失败，循环会终止。</p>\n<p><strong>例子</strong></p>\n<p>假设文件  <code>workerFile.txt</code>  内容如下：</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1 张三 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2 李四 2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3 王五 3</pre></td></tr></table></figure><ol>\n<li>第一次循环：\n<ul>\n<li><code>ifs &gt;&gt; id</code>  读取  <code>1</code> （ <code>id = 1</code> ）。</li>\n<li><code>ifs &gt;&gt; name</code>  读取  <code>张三</code> （ <code>name = &quot;张三&quot;</code> ）。</li>\n<li><code>ifs &gt;&gt; dId</code>  读取  <code>1</code> （ <code>dId = 1</code> ）。</li>\n<li>由于这三项数据都成功读取， <code>num++</code>  执行， <code>num</code>  增加 1。</li>\n</ul>\n</li>\n<li>第二次循环：\n<ul>\n<li><code>ifs &gt;&gt; id</code>  读取  <code>2</code> （ <code>id = 2</code> ）。</li>\n<li><code>ifs &gt;&gt; name</code>  读取  <code>李四</code> （ <code>name = &quot;李四&quot;</code> ）。</li>\n<li><code>ifs &gt;&gt; dId</code>  读取  <code>2</code> （ <code>dId = 2</code> ）。</li>\n<li>这三项数据也成功读取， <code>num++</code>  执行， <code>num</code>  增加 1。</li>\n</ul>\n</li>\n<li>第三次循环：\n<ul>\n<li><code>ifs &gt;&gt; id</code>  读取  <code>3</code> （ <code>id = 3</code> ）。</li>\n<li><code>ifs &gt;&gt; name</code>  读取  <code>王五</code> （ <code>name = &quot;王五&quot;</code> ）。</li>\n<li><code>ifs &gt;&gt; dId</code>  读取  <code>3</code> （ <code>dId = 3</code> ）。</li>\n<li>这三项数据都成功读取， <code>num++</code>  执行， <code>num</code>  增加 1。</li>\n</ul>\n</li>\n<li>文件末尾， <code>ifs.eof()</code>  变为  <code>true</code> ，读取失败，循环结束。</li>\n</ol>\n</blockquote>\n<p>在 workerManager.cpp 构造函数中继续追加代码：</p>\n<pre><code class=\"language-C++\">// 3、文件存在，并且记录数据\nint num = this-&gt;getEmpNum();\ncout &lt;&lt; &quot;职工人数为：&quot; &lt;&lt; num &lt;&lt; endl;\nthis-&gt;m_EmpNum = num;\n</code></pre>\n<p>手动添加一些职工数据，测试获取职工数量函数</p>\n<p>workerFile.txt：</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1 张三 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2 李四 2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3 王五 3</pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081433838.png\" alt=\"\" /></p>\n<h3 id=\"932-初始化数组\"><a class=\"anchor\" href=\"#932-初始化数组\">#</a> 9.3.2 初始化数组</h3>\n<p>根据职工的数据以及职工数据，初始化 workerManager 中的 Worker** m_EmpArray 指针</p>\n<p>在 WorkerManager.h 中添加成员函数   <code>void init_Emp();</code></p>\n<pre><code class=\"language-C++\">// 初始化职工\nvoid initEmp();\n</code></pre>\n<p>在 WorkerManager.cpp 中实现</p>\n<pre><code class=\"language-C++\">// 初始化职工\nvoid WorkerManager::initEmp() &#123;\n  ifstream ifs;\n  ifs.open(FILENAME, ios::in);\n\n  int id;\n  string name;\n  int dId;\n\n  int index = 0;\n  while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId) &#123;\n    Worker* worker = NULL;\n    if (dId == 1) &#123;  // 普通职工\n      worker = new Employee(id, name, dId);\n    &#125; else if (dId == 2) &#123;  // 经理\n      worker = new Manager(id, name, dId);\n    &#125; else &#123;  // 老板\n      worker = new Boss(id, name, dId);\n    &#125;\n    this-&gt;m_EmpArray[index] = worker;\n    index++;\n  &#125;\n\n  // 关闭文件\n  ifs.close();\n&#125;\n</code></pre>\n<p>在 workerManager.cpp 构造函数中追加代码</p>\n<pre><code class=\"language-C++\">// 开辟空间\nthis-&gt;m_EmpArray = new Worker*[this-&gt;m_EmpNum];\n// 将文件中的数据，存到数组中\nthis-&gt;initEmp();\n// 测试代码\nfor (int i = 0; i &lt; this-&gt;m_EmpNum; i++) &#123;\n  cout &lt;&lt; &quot;职工编号：&quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; &quot;姓名：&quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; &quot;部门编号：&quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;\n&#125;\n</code></pre>\n<p>运行程序，测试从文件中获取的数据</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081500371.png\" alt=\"\" /></p>\n<p>至此初始化数据功能完毕，测试代码可以注释或删除掉！</p>\n<h1 id=\"10-显示职工\"><a class=\"anchor\" href=\"#10-显示职工\">#</a> 10、显示职工</h1>\n<p>功能描述：显示当前所有职工信息</p>\n<h2 id=\"101-显示职工函数声明\"><a class=\"anchor\" href=\"#101-显示职工函数声明\">#</a> 10.1 显示职工函数声明</h2>\n<p>在 workerManager.h 中添加成员函数   <code>void Show_Emp();</code></p>\n<pre><code class=\"language-C++\">// 显示职工\nvoid showEmp();\n</code></pre>\n<h2 id=\"102-显示职工函数实现\"><a class=\"anchor\" href=\"#102-显示职工函数实现\">#</a> 10.2 显示职工函数实现</h2>\n<p>在 workerManager.cpp 中实现成员函数  <code>void Show_Emp();</code></p>\n<pre><code class=\"language-C++\">// 显示职工\nvoid WorkerManager::showEmp() &#123;\n  // 判断文件是否为空\n  if (this-&gt;m_FileIsEmpty) &#123;\n    cout &lt;&lt; &quot;文件不存在或记录为空！&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    for (int i = 0; i &lt; m_EmpNum; i++) &#123;\n      // 利用多态调用程序接口\n      this-&gt;m_EmpArray[i]-&gt;showInfo();\n    &#125;\n  &#125;\n  // 按任意键后清屏\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"103-测试显示职工\"><a class=\"anchor\" href=\"#103-测试显示职工\">#</a> 10.3 测试显示职工</h2>\n<p>在 main 函数分支 2  选项中，调用显示职工接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 显示职工</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">showEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试时分别测试 文件为空和文件不为空两种情况</p>\n<p>测试效果：</p>\n<p>测试 1 - 文件不存在或者为空情况</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081511183.png\" alt=\"\" /></p>\n<p>测试 2 - 文件存在且有记录情况</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081510549.png\" alt=\"\" /></p>\n<p>测试完毕，至此，显示所有职工信息功能实现</p>\n<h1 id=\"11-删除职工\"><a class=\"anchor\" href=\"#11-删除职工\">#</a> 11、删除职工</h1>\n<p>功能描述：按照职工的编号进行删除职工操作</p>\n<h2 id=\"111-删除职工函数声明\"><a class=\"anchor\" href=\"#111-删除职工函数声明\">#</a> 11.1 删除职工函数声明</h2>\n<p>在 workerManager.h 中添加成员函数   <code>void Del_Emp();</code></p>\n<pre><code class=\"language-C++\">// 删除职工\nvoid delEmp();\n</code></pre>\n<h2 id=\"112-职工是否存在函数声明\"><a class=\"anchor\" href=\"#112-职工是否存在函数声明\">#</a> 11.2 职工是否存在函数声明</h2>\n<p>很多功能都需要用到根据职工是否存在来进行操作如：删除职工、修改职工、查找职工</p>\n<p>因此添加该公告函数，以便后续调用</p>\n<p>在 workerManager.h 中添加成员函数   <code>int IsExist(int id);</code></p>\n<pre><code class=\"language-C++\">// 判断职工是否存在，如果存在返回职工所在数组中的位置，不存在返回-1\nint isExist(int id);\n</code></pre>\n<h2 id=\"113-职工是否存在函数实现\"><a class=\"anchor\" href=\"#113-职工是否存在函数实现\">#</a> 11.3 职工是否存在函数实现</h2>\n<p>在 workerManager.cpp 中实现成员函数  <code>int IsExist(int id);</code></p>\n<pre><code class=\"language-C++\">// 判断职工是否存在，如果存在返回职工所在数组中的位置，不存在返回-1\nint WorkerManager::isExist(int id) &#123;\n  int index = -1;\n  for (int i = 0; i &lt; this-&gt;m_EmpNum; i++) &#123;\n    if (this-&gt;m_EmpArray[i]-&gt;m_Id == id) &#123;\n      index = i;\n      break;\n    &#125;\n  &#125;\n  return index;\n&#125;\n</code></pre>\n<h2 id=\"114-删除职工函数实现\"><a class=\"anchor\" href=\"#114-删除职工函数实现\">#</a> 11.4 删除职工函数实现</h2>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081525132.png\" alt=\"\" /></p>\n</blockquote>\n<p>在 workerManager.cpp 中实现成员函数  <code> void Del_Emp();</code></p>\n<pre><code class=\"language-C++\">// 删除职工\nvoid WorkerManager::delEmp() &#123;\n  if (this-&gt;m_FileIsEmpty) &#123;\n    cout &lt;&lt; &quot;文件不存在或记录为空！&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    // 按照职工编号删除\n    cout &lt;&lt; &quot;请输入想要删除职工编号：&quot; &lt;&lt; endl;\n    int id;\n    cin &gt;&gt; id;\n\n    int index = this-&gt;isExist(id);\n    if (index != -1) &#123;  // 说明职工存在，并且要删除掉index位置上的职工\n      // 数据前移\n      for (int i = index; i &lt; this-&gt;m_EmpNum - 1; i++) &#123;\n        this-&gt;m_EmpArray[i] = this-&gt;m_EmpArray[i + 1];\n      &#125;\n      this-&gt;m_EmpNum--;  // 更新数组中记录的人员个数\n      // 同步更新到文件中\n      this-&gt;save();\n      cout &lt;&lt; &quot;删除成功！&quot; &lt;&lt; endl;\n    &#125; else &#123;\n      cout &lt;&lt; &quot;删除失败，未找到该职工&quot; &lt;&lt; endl;\n    &#125;\n  &#125;\n  // 按任意键清屏\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"115-测试删除职工\"><a class=\"anchor\" href=\"#115-测试删除职工\">#</a> 11.5 测试删除职工</h2>\n<p>在 main 函数分支 3  选项中，调用删除职工接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 删除职工</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">delEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试 1 - 删除不存在职工情况</p>\n<p>测试 2 - 删除存在的职工情况</p>\n<p>再次显示所有职工信息，确保已经删除</p>\n<p>查看文件中信息，再次核实员工已被完全删除</p>\n<p>至此，删除职工功能实现完毕！</p>\n<h1 id=\"12-修改职工\"><a class=\"anchor\" href=\"#12-修改职工\">#</a> 12、修改职工</h1>\n<p>功能描述：能够按照职工的编号对职工信息进行修改并保存</p>\n<h2 id=\"121-修改职工函数声明\"><a class=\"anchor\" href=\"#121-修改职工函数声明\">#</a> 12.1 修改职工函数声明</h2>\n<p>在 workerManager.h 中添加成员函数   <code>void Mod_Emp();</code></p>\n<pre><code class=\"language-C++\">// 修改职工\nvoid modEmp();\n</code></pre>\n<h2 id=\"122-修改职工函数实现\"><a class=\"anchor\" href=\"#122-修改职工函数实现\">#</a> 12.2 修改职工函数实现</h2>\n<p>在 workerManager.cpp 中实现成员函数  <code> void Mod_Emp();</code></p>\n<pre><code class=\"language-C++\">// 修改职工\nvoid WorkerManager::modEmp() &#123;\n  if (this-&gt;m_FileIsEmpty) &#123;\n    cout &lt;&lt; &quot;文件不存在或记录为空！&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; &quot;请输入修改职工的编号：&quot; &lt;&lt; endl;\n    int id;\n    cin &gt;&gt; id;\n\n    int ret = this-&gt;isExist(id);\n    if (ret != -1) &#123;\n      // 查找到编号的职工\n      delete this-&gt;m_EmpArray[ret];\n\n      int newId = 0;\n      string newName = &quot;&quot;;\n      int dSelect = 0;\n      cout &lt;&lt; &quot;查到：&quot; &lt;&lt; id &lt;&lt; &quot;号职工，请输入新职工号：&quot; &lt;&lt; endl;\n      cin &gt;&gt; newId;\n      cout &lt;&lt; &quot;请输入新姓名：&quot; &lt;&lt; endl;\n      cin &gt;&gt; newName;\n      cout &lt;&lt; &quot;请输入岗位：&quot; &lt;&lt; endl;\n      cout &lt;&lt; &quot;1、普通职工&quot; &lt;&lt; endl;\n      cout &lt;&lt; &quot;2、经理&quot; &lt;&lt; endl;\n      cout &lt;&lt; &quot;3、老板&quot; &lt;&lt; endl;\n      cin &gt;&gt; dSelect;\n\n      Worker* worker = NULL;\n      switch (dSelect) &#123;\n        case 1:\n          worker = new Employee(newId, newName, dSelect);\n          break;\n        case 2:\n          worker = new Manager(newId, newName, dSelect);\n          break;\n        case 3:\n          worker = new Boss(newId, newName, dSelect);\n          break;\n        default:\n          break;\n      &#125;\n\n      // 更新数据到数组中\n      this-&gt;m_EmpArray[ret] = worker;\n      cout &lt;&lt; &quot;修改成功！&quot; &lt;&lt; endl;\n\n      // 保存到文件中\n      this-&gt;save();\n    &#125; else &#123;\n      cout &lt;&lt; &quot;修改失败，查无此人&quot; &lt;&lt; endl;\n    &#125;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"123-测试修改职工\"><a class=\"anchor\" href=\"#123-测试修改职工\">#</a> 12.3 测试修改职工</h2>\n<p>在 main 函数分支 4  选项中，调用修改职工接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 修改职工</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">modEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试 1 - 修改不存在职工情况</p>\n<p>测试 2 - 修改存在职工情况，例如将职工 &quot;李四&quot; 改为 &quot;赵四&quot;</p>\n<p>修改后再次查看所有职工信息，并确认修改成功</p>\n<p>再次确认文件中信息也同步更新</p>\n<p>至此，修改职工功能已实现！</p>\n<h1 id=\"13-查找职工\"><a class=\"anchor\" href=\"#13-查找职工\">#</a> 13、查找职工</h1>\n<p>功能描述：提供两种查找职工方式，一种按照职工编号，一种按照职工姓名</p>\n<h2 id=\"131-查找职工函数声明\"><a class=\"anchor\" href=\"#131-查找职工函数声明\">#</a> 13.1 查找职工函数声明</h2>\n<p>在 workerManager.h 中添加成员函数   <code>void Find_Emp();</code></p>\n<pre><code class=\"language-c++\">// 查找职工\nvoid findEmp();\n</code></pre>\n<h2 id=\"132-查找职工函数实现\"><a class=\"anchor\" href=\"#132-查找职工函数实现\">#</a> 13.2 查找职工函数实现</h2>\n<p>在 workerManager.cpp 中实现成员函数  <code> void Find_Emp();</code></p>\n<pre><code class=\"language-C++\">// 查找职工\nvoid WorkerManager::findEmp() &#123;\n  if (this-&gt;m_FileIsEmpty) &#123;\n    cout &lt;&lt; &quot;文件不存在或记录为空！&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; &quot;请输入查找的方式：&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;1、按职工编号查找&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;2、按职工姓名查找&quot; &lt;&lt; endl;\n\n    int select = 0;\n    cin &gt;&gt; select;\n    if (select == 1) &#123;\n      // 按编号查\n      int id;\n      cout &lt;&lt; &quot;请输入查找的职工编号：&quot; &lt;&lt; endl;\n      cin &gt;&gt; id;\n\n      int ret = isExist(id);\n      if (ret != -1) &#123;\n        // 找到职工\n        cout &lt;&lt; &quot;查找成功！该职工信息如下：&quot; &lt;&lt; endl;\n        this-&gt;m_EmpArray[ret]-&gt;showInfo();\n      &#125; else &#123;\n        cout &lt;&lt; &quot;查找失败，查无此人&quot; &lt;&lt; endl;\n      &#125;\n    &#125; else if (select == 2) &#123;\n      // 按姓名查\n      string name;\n      cout &lt;&lt; &quot;请输入查找的姓名：&quot; &lt;&lt; endl;\n      cin &gt;&gt; name;\n      bool flag = false;  // 加入判断是否查到的标志，默认未找到职工\n      for (int i = 0; i &lt; m_EmpNum; i++) &#123;\n        if (this-&gt;m_EmpArray[i]-&gt;m_Name == name) &#123;\n          cout &lt;&lt; &quot;查找成功，职工编号为：&quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; &quot;号职工信息如下：&quot; &lt;&lt; endl;\n          flag = true;\n          this-&gt;m_EmpArray[i]-&gt;showInfo();\n        &#125;\n      &#125;\n      if (flag == false) &#123;\n        cout &lt;&lt; &quot;查找失败，查无此人！&quot; &lt;&lt; endl;\n      &#125;\n    &#125; else &#123;\n      cout &lt;&lt; &quot;输入选项有误！&quot; &lt;&lt; endl;\n    &#125;\n  &#125;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"133-测试查找职工\"><a class=\"anchor\" href=\"#133-测试查找职工\">#</a> 13.3 测试查找职工</h2>\n<p>在 main 函数分支 5  选项中，调用查找职工接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 查找职工</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">findEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试 1 - 按照职工编号查找 - 查找不存在职工</p>\n<p>测试 2 - 按照职工编号查找 -  查找存在职工</p>\n<p>测试 3 - 按照职工姓名查找 - 查找不存在职工</p>\n<p><img data-src=\"/Users/lixinyi/Desktop/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E6%80%81%E7%9A%84%E4%BC%81%E4%B8%9A%E8%81%8C%E5%B7%A5%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%96%99/%E8%AE%B2%E4%B9%89/assets/1546505115610.png\" alt=\"1546505115610\" /></p>\n<p>测试 4 - 按照职工姓名查找 - 查找存在职工（如果出现重名，也一并显示，在文件中可以添加重名职工）</p>\n<p>例如 添加两个王五的职工，然后按照姓名查找王五</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411081616843.png\" alt=\"\" /></p>\n<blockquote>\n<p>同名人员信息全部显示</p>\n</blockquote>\n<p>至此，查找职工功能实现完毕！</p>\n<h1 id=\"14-排序\"><a class=\"anchor\" href=\"#14-排序\">#</a> 14、排序</h1>\n<p>功能描述：按照职工编号进行排序，排序的顺序由用户指定</p>\n<h2 id=\"141-排序函数声明\"><a class=\"anchor\" href=\"#141-排序函数声明\">#</a> 14.1 排序函数声明</h2>\n<p>在 workerManager.h 中添加成员函数   <code>void Sort_Emp();</code></p>\n<pre><code class=\"language-C++\">// 按照编号排序\nvoid sortEmp();\n</code></pre>\n<h2 id=\"142-排序函数实现\"><a class=\"anchor\" href=\"#142-排序函数实现\">#</a> 14.2 排序函数实现</h2>\n<p>在 workerManager.cpp 中实现成员函数  <code> void Sort_Emp();</code></p>\n<pre><code class=\"language-C++\">// 按照编号排序\nvoid WorkerManager::sortEmp() &#123;\n  if (this-&gt;m_FileIsEmpty) &#123;\n    cout &lt;&lt; &quot;文件不存在或记录为空！&quot; &lt;&lt; endl;\n    system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n    system(&quot;clear&quot;);\n  &#125; else &#123;\n    cout &lt;&lt; &quot;请选择排序方式：&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;1、按职工号进行升序&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;2、按职工号进行降序&quot; &lt;&lt; endl;\n\n    int select = 0;\n    cin &gt;&gt; select;\n    for (int i = 0; i &lt; m_EmpNum; i++) &#123;\n      int minOrMax = i;  // 声明最小值或最大值下标\n      for (int j = i + 1; j &lt; this-&gt;m_EmpNum; j++) &#123;\n        if (select == 1) &#123;  // 升序\n          if (this-&gt;m_EmpArray[minOrMax]-&gt;m_Id &gt; this-&gt;m_EmpArray[j]-&gt;m_Id) &#123;\n            minOrMax = j;\n          &#125;\n        &#125; else &#123;  // 降序\n          if (this-&gt;m_EmpArray[minOrMax]-&gt;m_Id &lt; this-&gt;m_EmpArray[j]-&gt;m_Id) &#123;\n            minOrMax = j;\n          &#125;\n        &#125;\n      &#125;\n      // 判断一开始认定的最小值或最大值是不是计算的最小值或最大值，如果不是交换数据\n      if (i != minOrMax) &#123;\n        Worker* temp = this-&gt;m_EmpArray[i];\n        this-&gt;m_EmpArray[i] = this-&gt;m_EmpArray[minOrMax];\n        this-&gt;m_EmpArray[minOrMax] = temp;\n      &#125;\n    &#125;\n\n    cout &lt;&lt; &quot;排序成功！排序后的结果为：&quot; &lt;&lt; endl;\n    this-&gt;save();     // 排序后结果保存到文件中\n    this-&gt;showEmp();  // 展示所有职工\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"143-测试排序功能\"><a class=\"anchor\" href=\"#143-测试排序功能\">#</a> 14.3 测试排序功能</h2>\n<p>在 main 函数分支 6  选项中，调用排序职工接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 排序职工</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">sortEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试：</p>\n<p>首先我们添加一些职工，序号是无序的</p>\n<p>测试 - 升序排序</p>\n<p>文件同步更新</p>\n<p>测试 - 降序排序</p>\n<p>文件同步更新</p>\n<p>至此，职工按照编号排序的功能实现完毕！</p>\n<h1 id=\"15-清空文件\"><a class=\"anchor\" href=\"#15-清空文件\">#</a> 15、清空文件</h1>\n<p>功能描述：将文件中记录数据清空</p>\n<h2 id=\"151-清空函数声明\"><a class=\"anchor\" href=\"#151-清空函数声明\">#</a> 15.1 清空函数声明</h2>\n<p>在 workerManager.h 中添加成员函数   <code>void Clean_File();</code></p>\n<pre><code class=\"language-C++\">// 清空文件\nvoid cleanFile();\n</code></pre>\n<h2 id=\"152-清空函数实现\"><a class=\"anchor\" href=\"#152-清空函数实现\">#</a> 15.2 清空函数实现</h2>\n<p>在 workerManager.cpp 中实现员函数  <code> void Clean_File();</code></p>\n<pre><code class=\"language-C++\">// 清空文件\nvoid WorkerManager::cleanFile() &#123;\n  cout &lt;&lt; &quot;确定清空？&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;1、确定&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;2、返回&quot; &lt;&lt; endl;\n\n  int select = 0;\n  cin &gt;&gt; select;\n  if (select == 1) &#123;\n    // 清空文件\n    ofstream ofs(FILENAME, ios::trunc);  // 删除文件后重新创建\n    ofs.close();\n\n    if (this-&gt;m_EmpArray != NULL) &#123;\n      // 删除堆区的每个职工对象\n      for (int i = 0; i &lt; this-&gt;m_EmpNum; i++) &#123;\n        delete this-&gt;m_EmpArray[i];\n        this-&gt;m_EmpArray[i] = NULL;\n      &#125;\n\n      // 删除堆区数组指针\n      delete[] this-&gt;m_EmpArray;\n      this-&gt;m_EmpArray = NULL;\n      this-&gt;m_EmpNum = 0;\n      this-&gt;m_FileIsEmpty = true;\n    &#125;\n    cout &lt;&lt; &quot;清空成功！&quot; &lt;&lt; endl;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"153-测试清空文件\"><a class=\"anchor\" href=\"#153-测试清空文件\">#</a> 15.3 测试清空文件</h2>\n<p>在 main 函数分支 7  选项中，调用清空文件接口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 清空文档</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  wm<span class=\"token punctuation\">.</span><span class=\"token function\">cleanFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试：确认清空文件</p>\n<p>再次查看文件中数据，记录已为空</p>\n<p>打开文件，里面数据已确保清空，该功能需要慎用！</p>\n<p>随着清空文件功能实现，本案例制作完毕  ^ _ ^</p>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E4%BA%8C%E3%80%81C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/",
            "url": "https://60saint.github.io/cpp/%E4%BA%8C%E3%80%81C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/",
            "title": "二.C++核心编程",
            "date_published": "2024-10-14T06:49:40.048Z",
            "content_html": "<p>本阶段主要针对 C++<mark> 面向对象</mark>编程技术做详细讲解，探讨 C++ 中的核心和精髓。</p>\n<h1 id=\"1-内存分区模型\"><a class=\"anchor\" href=\"#1-内存分区模型\">#</a> 1 内存分区模型</h1>\n<p>C++ 程序在执行时，将内存大方向划分为<strong> 4 个区域</strong></p>\n<ul>\n<li>\n<p>代码区：存放函数体的二进制代码，由操作系统进行管理的</p>\n<blockquote>\n<p>写的所有的代码都会放到代码区，所有的英文字母和中文注释都会放到代码区</p>\n<p>先把程序员写的代码转成 0、1 数据，再放到代码区</p>\n</blockquote>\n</li>\n<li>\n<p>全局区：存放全局变量和静态变量以及常量</p>\n</li>\n<li>\n<p>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</p>\n</li>\n<li>\n<p>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</p>\n</li>\n</ul>\n<p><strong>内存四区意义：</strong></p>\n<p>不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程</p>\n<h2 id=\"11-程序运行前\"><a class=\"anchor\" href=\"#11-程序运行前\">#</a> 1.1 程序运行前</h2>\n<p>在程序编译后，生成了 exe 可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>\n<p><strong>代码区：</strong></p>\n<ul>\n<li>\n<p>存放 CPU 执行的机器指令</p>\n<blockquote>\n<p>就是写的所有代码的二进制 0、1</p>\n</blockquote>\n</li>\n<li>\n<p>代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>\n</li>\n<li>\n<p>代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>\n</li>\n</ul>\n<p><strong>全局区：</strong></p>\n<ul>\n<li>全局变量和静态变量存放在此.</li>\n<li>全局区还包含了常量区，字符串常量和 const 修饰的全局常量也存放在此.</li>\n<li><mark>该区域的数据在程序结束后由操作系统释放</mark>.</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n// 全局区：存放全局变量、静态变量、常量\n// 全局变量：只要没有写在函数体中的变量都叫全局变量\nint g_a = 10;\nint g_b = 10;\n\n// const修饰的全局变量，叫全局常量\nconst int c_g_a = 10;\nconst int c_g_b = 10;\n\nint main() &#123;\n  // 创建普通局部变量：只要是写在函数体内的变量都叫局部变量\n  int a = 10;\n  int b = 10;\n  cout &lt;&lt; &quot;局部变量a的地址为：&quot; &lt;&lt; &amp;a &lt;&lt; endl;  // 0x16fdfee28\n  cout &lt;&lt; &quot;局部变量b的地址为：&quot; &lt;&lt; &amp;b &lt;&lt; endl;  // 0x16fdfee24\n\n  cout &lt;&lt; &quot;全局变量g_a的地址为：&quot; &lt;&lt; &amp;g_a &lt;&lt; endl;  // 0x100008000\n  cout &lt;&lt; &quot;全局变量g_b的地址为：&quot; &lt;&lt; &amp;g_b &lt;&lt; endl;  // 0x100008004\n  // 局部变量16fdf开头，全局变量10000开头，不在一个段里。全局变量在全局区里，局部变量在四区中的另一个区域中\n\n  // 静态变量：在普通变量的前面加static，属于静态变量\n  static int s_a = 10;\n  static int s_b = 10;\n  cout &lt;&lt; &quot;静态变量s_a的地址为：&quot; &lt;&lt; &amp;s_a &lt;&lt; endl;  // 0x100008008\n  cout &lt;&lt; &quot;静态变量s_b的地址为：&quot; &lt;&lt; &amp;s_b &lt;&lt; endl;  // 0x10000800c\n  // 全局变量和静态变量放得很近，都在一个区域段中\n\n  // 常量\n  // 1.字符串常量\n  cout &lt;&lt; &quot;字符串常量的地址为：&quot; &lt;&lt; &amp;&quot;hello world&quot; &lt;&lt; endl;  // 0x100003ef9\n  // 2.const修饰的变量\n  // 2.1 const修饰的全局变量\n  cout &lt;&lt; &quot;全局常量 c_g_a的地址：&quot; &lt;&lt; &amp;c_g_a &lt;&lt; endl;  // 0x100003f00\n  cout &lt;&lt; &quot;全局常量 c_g_b的地址：&quot; &lt;&lt; &amp;c_g_b &lt;&lt; endl;  // 0x100003f04\n  // 2.2 const修饰的局部变量\n  const int c_l_a = 10;\n  const int c_l_b = 10;\n  cout &lt;&lt; &quot;局部常量 c_l_a的地址为：&quot; &lt;&lt; &amp;c_l_a &lt;&lt; endl;  // 0x16fdfee20\n  cout &lt;&lt; &quot;局部常量 c_l_b的地址为：&quot; &lt;&lt; &amp;c_l_b &lt;&lt; endl;  // 0x16fdfee1c\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410141549873.png\" alt=\"\" /></p>\n</blockquote>\n<p>总结：</p>\n<ul>\n<li>C++ 中在程序运行前分为全局区和代码区</li>\n<li>代码区特点是共享和只读</li>\n<li>全局区中存放全局变量、静态变量、常量区</li>\n<li>常量区中存放 const 修饰的全局常量  和 字符串常量</li>\n</ul>\n<h2 id=\"12-程序运行后\"><a class=\"anchor\" href=\"#12-程序运行后\">#</a> 1.2 程序运行后</h2>\n<p><strong>栈区：</strong></p>\n<p>由编译器自动分配释放，存放函数的参数值，局部变量等</p>\n<p>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int* func(int b) &#123;// 形参数据也会放在栈区\n  b = 100;\n\tint a = 10;// 局部变量，存放在栈区，栈区的数据在函数执行完后自动释放\n\treturn &amp;a;// 返回局部变量的地址\n&#125;\n\nint main() &#123;\n\n\tint* p = func(1);\n\n\tcout &lt;&lt; *p &lt;&lt; endl;// 10\n\tcout &lt;&lt; *p &lt;&lt; endl;// 267955168\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>函数  <code>func</code>  返回了一个指向局部变量  <code>a</code>  的指针。这是一个典型的错误用法，因为局部变量的生命周期仅限于函数的执行。当函数执行完毕时，局部变量  <code>a</code>  的内存空间会被释放，指向该内存的指针将变得无效。</p>\n<p><strong>第一次和第二次打印的差异</strong>：</p>\n<ul>\n<li>第一次打印  <code>cout &lt;&lt; *p &lt;&lt; endl;</code>  可能仍然输出  <code>10</code> ，因为在栈上， <code>a</code>  的内存空间可能没有被其他数据覆盖（这取决于编译器和运行时环境）。</li>\n<li>第二次打印  <code>cout &lt;&lt; *p &lt;&lt; endl;</code>  可能输出一个随机值（例如  <code>267955168</code> ），因为  <code>a</code>  的内存空间已经被释放，可能被其他函数调用或操作覆盖。</li>\n</ul>\n</blockquote>\n<p><strong>堆区：</strong></p>\n<p>由程序员分配释放，若程序员不释放，程序结束时由操作系统回收</p>\n<blockquote>\n<p>这些数据不会一直放在内存上，只是在程序运行期间，如果程序员不释放它，它就不释放。当程序已经结束了，由系统回收</p>\n</blockquote>\n<p>在 C++ 中主要利用 new 在堆区开辟内存</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int* func() &#123;\n  // 利用new关键字，可以将数据开辟到堆区。它会返回new在堆区开辟的这块内存的地址\n\tint* p = new int(10);// 指针本质也是局部变量，放在栈上，指针指向的数据是放在堆区\n\treturn p;\n&#125;\n\nint main() &#123;\n\n\tint* p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;// 10\n\tcout &lt;&lt; *p &lt;&lt; endl;// 10\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用 new 关键字进行开辟内存</p>\n<h2 id=\"13-new操作符\"><a class=\"anchor\" href=\"#13-new操作符\">#</a> 1.3 new 操作符</h2>\n<p>C++ 中利用<mark> new</mark> 操作符在堆区开辟数据</p>\n<p>堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <mark>delete</mark></p>\n<p>语法： <code> new 数据类型</code></p>\n<p>利用 new 创建的数据，会返回该数据对应的类型的指针</p>\n<p><strong>示例 1： 基本语法</strong></p>\n<pre><code class=\"language-c++\">// 1、new的基本语法\nint* func() &#123;\n\tint* a = new int(10);\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\tint* p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;// 10\n\tcout &lt;&lt; *p &lt;&lt; endl;// 10\n\n  // 堆区的数据，由程序员管理开辟，程序员管理释放\n\t// 如果想释放堆区的数据，利用关键字delete\n\tdelete p;\n\n\t//cout &lt;&lt; *p &lt;&lt; endl; // 报错，内存已经被释放，再次访问就是非法操作\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 2：开辟数组</strong></p>\n<pre><code class=\"language-c++\">// 2、在堆区利用new开辟数组\nint main() &#123;\n  int* arr = new int[10];// 返回这段连续线性空间的首地址\n\n  for (int i = 0; i &lt; 10; i++) &#123;\n    arr[i] = i + 100;\n  &#125;\n  for (int i = 0; i &lt; 10; i++) &#123;\n    cout &lt;&lt; arr[i] &lt;&lt; endl;\n  &#125;\n  \n  // 释放堆区数组 delete 后加 []\n  delete[] arr;\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>在 C++ 中， <code>int* arr = new int[10];</code>  和  <code>int arr[10];</code>  这两种方式都可以用来创建一个整数数组，但它们之间有几个重要的区别：</p>\n<ol>\n<li>\n<p><strong>内存分配方式</strong></p>\n<ul>\n<li><strong> <code>int* arr = new int[10];</code> </strong>：\n<ul>\n<li>这是动态内存分配。使用  <code>new</code>  关键字在堆（heap）上分配内存。</li>\n<li>这意味着数组的大小可以在运行时确定，而不是在编译时。</li>\n<li>可以根据需要动态创建不同大小的数组。例如，可以在运行时根据用户输入的值来决定数组的大小。</li>\n</ul>\n</li>\n<li><strong> <code>int arr[10];</code> </strong>：\n<ul>\n<li>这是静态内存分配。数组在栈（stack）上分配内存。</li>\n<li>数组的大小必须在编译时确定，不能在运行时改变。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>生命周期</strong></p>\n<ul>\n<li><strong>动态数组</strong> ( <code>new int[10]</code> )：\n<ul>\n<li>生命周期由程序员控制。只有在调用  <code>delete[]</code>  时，内存才会被释放。</li>\n<li>如果忘记释放，可能会导致内存泄漏。</li>\n</ul>\n</li>\n<li><strong>静态数组</strong> ( <code>int arr[10]</code> )：\n<ul>\n<li>生命周期与其作用域相关。当数组超出其作用域（例如，当函数返回时）时，内存会自动释放。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>性能</strong></p>\n<ul>\n<li>\n<p><strong>动态内存分配</strong>：</p>\n<p>相比于静态数组，动态分配可能稍慢，因为它涉及到堆内存的管理和分配。</p>\n</li>\n<li>\n<p><strong>静态数组</strong>：</p>\n<p>通常更快，因为栈内存的分配和释放速度较快。</p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"2-引用\"><a class=\"anchor\" href=\"#2-引用\">#</a> 2 引用</h1>\n<h2 id=\"21-引用的基本使用\"><a class=\"anchor\" href=\"#21-引用的基本使用\">#</a> 2.1 引用的基本使用</h2>\n<p>** 作用： ** 给变量起别名</p>\n<p><strong>语法：</strong>  <code>数据类型&amp; 别名 = 原名</code></p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410151104186.png\" alt=\"\" /></p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint&amp; b = a;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 10\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;// 10\n\n\tb = 100;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 100\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;// 100\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"22-引用注意事项\"><a class=\"anchor\" href=\"#22-引用注意事项\">#</a> 2.2 引用注意事项</h2>\n<ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410151109626.png\" alt=\"\" /></p>\n<p>假设下边还有一个变量 c。b 是 a 的别名，不可以后来更改成 c 的别名</p>\n</blockquote>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\t//int&amp; c; //错误，引用必须初始化\n\tint&amp; c = a; //一旦初始化后，就不可以更改\n\tc = b; //这是赋值操作，不是更改引用\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 20\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;// 20\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;// 20\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"23-引用做函数参数\"><a class=\"anchor\" href=\"#23-引用做函数参数\">#</a> 2.3 引用做函数参数</h2>\n<p>** 作用：** 函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p>** 优点：** 可以简化指针修改实参</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">// 1、值传递\nvoid mySwap01(int a, int b) &#123;\n  int temp = a;\n  a = b;\n  b = temp;\n  cout &lt;&lt; &quot;swap01 a = &quot; &lt;&lt; a &lt;&lt; endl;  // 20\n  cout &lt;&lt; &quot;swap01 b = &quot; &lt;&lt; b &lt;&lt; endl;  // 10\n&#125;\n\n// 2、地址传递\nvoid mySwap02(int* a, int* b) &#123;\n  int temp = *a;\n  *a = *b;\n  *b = temp;\n&#125;\n\n// 3、引用传递\nvoid mySwap03(int&amp; a, int&amp; b) &#123;\n  int temp = a;\n  a = b;\n  b = temp;\n&#125;\n\nint main() &#123;\n  int a = 10;\n  int b = 20;\n\n  mySwap01(a, b);               // 值传递，形参不会修饰实参\n  cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;  // 10\n  cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;  // 20\n\n  mySwap02(&amp;a, &amp;b);             // 地址传递，形参会修饰实参\n  cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;  // 20\n  cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;  // 10\n\n  mySwap03(a, b);               // 引用传递，形参会修饰实参\n  cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;  // 10\n  cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;  // 20\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>为什么引用传递，形参会修改实参？</p>\n<p>当调用 mySwap03 的时候，a 是实参中的 a=20。但函数参数用引用的方式接收，所以函数参数中的 a 是实参 a 的别名。对别名做任何的操纵修改，其实就是在修改原名指向的数据</p>\n</blockquote>\n<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>\n<h2 id=\"24-引用做函数返回值\"><a class=\"anchor\" href=\"#24-引用做函数返回值\">#</a> 2.4 引用做函数返回值</h2>\n<p>作用：引用是可以作为函数的返回值存在的</p>\n<p>注意：<strong>不要返回局部变量引用</strong></p>\n<p>用法：函数调用作为左值</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">// 引用做函数的返回值\n// 1、不要返回局部变量的引用\nint&amp; test01() &#123;\n  int a = 10;  // 局部变量存放在四区中的栈区\n  return a;    // returan的就是这个a，并且用引用的方式返回了。相当于这个a有一个别名，把别名返回了\n&#125;\n\n// 2、函数的调用可以作为左值\nint&amp; test02() &#123;\n  static int a = 10;  // 静态变量，存放在全局区，全局区上的数据在程序结束后系统释放\n  return a;\n&#125;\n\nint main() &#123;\n  int&amp; ref = test01();              // 在等号的左侧用ref接收这个别名\n  cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;  // 10。第一次结果正确，是因为编译器做了保留\n  cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;  // 260090848。第二次结果错误，因为a的内存已经释放\n\n  int&amp; ref2 = test02();               // ref2是a的别名\n  cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;  // 10\n  cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;  // 10\n  test02() = 1000;                    // 把1000赋值给原名。如果函数的返回值是引用，这个函数调用可以作为左值\n  cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;  // 1000。用别名去访问原名a的这块内存\n  cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;  // 1000\n&#125;\n</code></pre>\n<h2 id=\"25-引用的本质\"><a class=\"anchor\" href=\"#25-引用的本质\">#</a> 2.5 引用的本质</h2>\n<p>本质：<strong>引用的本质在 c++ 内部实现是一个指针常量.</strong></p>\n<blockquote>\n<p>对于指针常量而言，指针的指向不可以修改，指针指向的值是可以改动的</p>\n</blockquote>\n<p>讲解示例：</p>\n<pre><code class=\"language-C++\">//发现是引用，转换为 int* const ref = &amp;a;\nvoid func(int&amp; ref)&#123;\n\tref = 100; // ref是引用，转换为*ref = 100\n&#125;\nint main()&#123;\n\tint a = 10;\n    \n    //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改\n\tint&amp; ref = a; \n\tref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;\n    \n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;\n    \n\tfunc(a);\n\treturn 0;\n&#125;\n</code></pre>\n<p>结论：C++ 推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>\n<h2 id=\"26-常量引用\"><a class=\"anchor\" href=\"#26-常量引用\">#</a> 2.6 常量引用</h2>\n<p>** 作用：** 常量引用主要用来修饰形参，防止误操作</p>\n<p>在函数形参列表中，可以加<mark> const 修饰形参</mark>，防止形参改变实参</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//引用使用的场景，通常用来修饰形参\nvoid showValue(const int&amp; v) &#123;\n\t//v += 10;// 如果形参不加const，那么在这里修改了v，传进来的main中的实参a也会加10\n\tcout &lt;&lt; v &lt;&lt; endl;// 10\n&#125;\n\nint main() &#123;\n\n\t//int&amp; ref = 10;// 报错。单写10，它是一个常量。而引用必须引一块合法的内存空间，比如在栈上的数据或者堆区的数据。而这个10是一个字面量，在常量区。\n  \n\t//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;\n\tconst int&amp; ref = 10;\n  /*相当于：\n  int temp = 10;\n  const int* const ref2 = &amp;temp;\n  cout &lt;&lt; *ref2 &lt;&lt; endl;// 10\n  */\n\n\t//ref = 100;  // 报错。加入const后变为只读，不可以修改\n\tcout &lt;&lt; ref &lt;&lt; endl;// 10\n\n\t//函数中利用常量引用防止误操作修改实参\n\tint a = 10;\n\tshowValue(a);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h1 id=\"3-函数提高\"><a class=\"anchor\" href=\"#3-函数提高\">#</a> 3 函数提高</h1>\n<h2 id=\"31-函数默认参数\"><a class=\"anchor\" href=\"#31-函数默认参数\">#</a> 3.1 函数默认参数</h2>\n<p>在 C++ 中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法： <code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值\nint func(int a, int b = 10, int c = 10) &#123;\n\treturn a + b + c;\n&#125;\n\n//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数。声明和实现只能有一个有默认参数\nint func2(int a = 10, int b = 10);\nint func2(int a, int b) &#123;\n\treturn a + b;\n&#125;\n\nint main() &#123;\n\n  // 如果调用函数时自己传入数据，就用传入的数据，如果没有才用默认值\n\tcout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;// 50\n\tcout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(100) &lt;&lt; endl;// 120\n  cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func2() &lt;&lt; endl;// 20\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"32-函数占位参数\"><a class=\"anchor\" href=\"#32-函数占位参数\">#</a> 3.2 函数占位参数</h2>\n<p>C++ 中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>语法：</strong>  <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>\n<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数占位参数 ，占位参数也可以有默认参数\n// 给第二个占位参数设置默认值：void func(int a, int = 10)\nvoid func(int a, int) &#123;\n\tcout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tfunc(10,10); //占位参数必须填补\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"33-函数重载\"><a class=\"anchor\" href=\"#33-函数重载\">#</a> 3.3 函数重载</h2>\n<h3 id=\"331-函数重载概述\"><a class=\"anchor\" href=\"#331-函数重载概述\">#</a> 3.3.1 函数重载概述</h3>\n<p>** 作用：** 函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>\n</ul>\n<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数重载需要函数都在同一个作用域下\nvoid func() &#123;\n\tcout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(int a) &#123;// 参数个数不同\n\tcout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(double a) &#123;// 参数类型不同\n\tcout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(int a ,double b) &#123;\n\tcout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(double a ,int b) &#123;// 参数顺序不同\n\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;\n&#125;\n//函数返回值类型不可以作为函数重载条件。func(3.14 , 10);可以调下边这个函数，也可以调上边的函数，编译器不知道到底调哪个，产生歧义，也就是二义性\n//int func(double a, int b) &#123;\n//\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;\n//&#125;\n\nint main() &#123;\n\n\tfunc();// func 的调用！\n\tfunc(10);// func (int a) 的调用！\n\tfunc(3.14);// func (double a)的调用！\n\tfunc(10,3.14);// func (int a ,double b) 的调用！\n\tfunc(3.14 , 10);// func (double a ,int b)的调用！\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"332-函数重载注意事项\"><a class=\"anchor\" href=\"#332-函数重载注意事项\">#</a> 3.3.2 函数重载注意事项</h3>\n<ul>\n<li>引用作为重载条件</li>\n<li>函数重载碰到函数默认参数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数重载注意事项\n//1、引用作为重载条件\nvoid func(int&amp; a) &#123;\n\tcout &lt;&lt; &quot;func (int&amp; a) 调用 &quot; &lt;&lt; endl;\n&#125;\nvoid func(const int&amp; a) &#123;// 类型不同，属于函数重载\n\tcout &lt;&lt; &quot;func (const int&amp; a) 调用 &quot; &lt;&lt; endl;\n&#125;\n\n//2、函数重载碰到函数默认参数\nvoid func2(int a, int b = 10) &#123;\n\tcout &lt;&lt; &quot;func2(int a, int b = 10) 调用&quot; &lt;&lt; endl;\n&#125;\nvoid func2(int a) &#123;// 发生重载，参数个数不同\n\tcout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\t\n\tint a = 10;\n\tfunc(a); //调用无const\n\tfunc(10);//调用有const，相当于调用：const int&amp; a = 10;，合法\n  // func(10);假设如果调用无const，相当于形参接受实参是这样一个代码：int&amp; a = 10;，引用直接等于10这种语法不能通过，因为引用必须要引一个合法的内存空间，要么引栈区要么引堆区，而10放在常量区\n\n\t//func2(10); //报错。当函数重载碰到默认参数，产生歧义即二义性。需要避免，当写函数重载的时候就不要写默认参数\n\n\treturn 0;\n&#125;\n</code></pre>\n<h1 id=\"4-类和对象\"><a class=\"anchor\" href=\"#4-类和对象\">#</a> <strong>4</strong> 类和对象</h1>\n<p>C++ 面向对象的三大特性为：<mark>封装、继承、多态</mark></p>\n<p>C++ 认为<mark>万事万物都皆为对象</mark>，对象上有其属性和行为</p>\n<p><strong>例如：</strong></p>\n<p>人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...</p>\n<p>车也可以作为对象，属性有轮胎、方向盘、车灯..., 行为有载人、放音乐、放空调...</p>\n<p>具有相同性质的<mark>对象</mark>，我们可以抽象称为<mark>类</mark>，人属于人类，车属于车类</p>\n<h2 id=\"41-封装\"><a class=\"anchor\" href=\"#41-封装\">#</a> 4.1 封装</h2>\n<h3 id=\"411-封装的意义\"><a class=\"anchor\" href=\"#411-封装的意义\">#</a> 4.1.1 封装的意义</h3>\n<p>封装是 C++ 面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一：</strong></p>\n<p>在设计类的时候，属性和行为写在一起，表现事物</p>\n<p><strong>语法：</strong>  <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>\n<p>** 示例 1：** 设计一个圆类，求圆的周长</p>\n<p><strong>示例代码：</strong></p>\n<pre><code class=\"language-C++\">const double PI = 3.14;  // 圆周率\n\n// class代表设计一个类，类后面紧跟着的就是类名称\nclass Circle &#123;\n  // 访问权限。public是公共权限\n public:\n  // 属性\n  int m_r;  // 半径\n\n  // 行为\n  double calculateZC() &#123;  // 获取圆的周长\n    return 2 * PI * m_r;\n  &#125;\n&#125;;\n\nint main() &#123;\n  Circle c1;    // 通过圆类创建具体的圆（对象）。即实例化：通过一个类，创建一个对象的过程\n  c1.m_r = 10;  // 给圆对象的属性进行赋值\n  cout &lt;&lt; &quot;圆的周长为：&quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;\n\n  return 0;\n&#125;\n</code></pre>\n<p>** 示例 2：** 设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>\n<p><strong>示例 2 代码：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\n// 学生类\nclass Student &#123;\n  // 类中的属性和行为，统一称为成员。属性也称为成员属性或成员变量；行为也称为成员函数或成员方法\n public:\n  void setName(string name) &#123;\n    m_name = name;\n  &#125;\n  void setID(int id) &#123;\n    m_id = id;\n  &#125;\n  void showStudent() &#123;\n    cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;\n  &#125;\n\n public:\n  string m_name;\n  int m_id;\n&#125;;\n\nint main() &#123;\n  Student stu;\n  stu.setName(&quot;德玛西亚&quot;);\n  stu.setID(250);\n  stu.showStudent();// name:德玛西亚 ID:250\n  \n  Student s2;\n  s2.m_name = &quot;李四&quot;;\n  s2.m_id = 2;\n  s2.showStudent();// name:李四 ID:2\n\n  return 0;\n&#125;\n</code></pre>\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol>\n<li>public        公共权限</li>\n<li>protected 保护权限</li>\n<li>private      私有权限</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//三种权限\n//公共权限  public     类内可以访问  类外可以访问\n//保护权限  protected  类内可以访问  类外不可以访问  儿子也可以访问父亲中的保护内容\n//私有权限  private    类内可以访问  类外不可以访问  儿子不可以访问父亲的私有内容\n\nclass Person &#123;\n\t//姓名  公共权限\n public:\n\tstring m_Name;\n\n\t//汽车  保护权限\n protected:\n\tstring m_Car;\n\n\t//银行卡密码  私有权限\n private:\n\tint m_Password;\n\n public:\n\tvoid func() &#123;\n\t\tm_Name = &quot;张三&quot;;\n\t\tm_Car = &quot;拖拉机&quot;;\n\t\tm_Password = 123456;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tPerson p;\n\tp.m_Name = &quot;李四&quot;;\n\t//p.m_Car = &quot;奔驰&quot;;  //保护权限，类外访问不到\n\t//p.m_Password = 123; //私有权限，类外访问不到\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"412-struct和class区别\"><a class=\"anchor\" href=\"#412-struct和class区别\">#</a> 4.1.2 struct 和 class 区别</h3>\n<p>在 C++ 中 struct 和 class 唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class   默认权限为私有</li>\n</ul>\n<pre><code class=\"language-C++\">class C1 &#123;\n\tint m_A; //默认是私有权限\n&#125;;\n\nstruct C2 &#123;\n\tint m_A;  //默认是公共权限\n&#125;;\n\nint main() &#123;\n\n\tC1 c1;\n\tc1.m_A = 10; //错误，访问权限是私有\n\n\tC2 c2;\n\tc2.m_A = 10; //正确，访问权限是公共\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>在 C++ 中， <code>struct</code>  和  <code>class</code>  的内存存放方式是相似的，主要取决于它们的实例是如何创建的。它们的成员变量在内存中是连续存放的。</p>\n<p><strong>实例的存放位置</strong></p>\n<ul>\n<li><strong>栈（Stack）</strong>：\n<ul>\n<li>当在函数内部创建  <code>C1</code>  或  <code>C2</code>  的实例时（如  <code>C1 c1;</code>  和  <code>C2 c2;</code> ），它们的内存会分配在栈上。</li>\n<li>栈内存的分配和释放速度较快，且在函数返回时自动释放。</li>\n</ul>\n</li>\n<li><strong>堆（Heap）</strong>：\n<ul>\n<li>如果使用  <code>new</code>  关键字创建  <code>C1</code>  或  <code>C2</code>  的实例（如  <code>C1* c1 = new C1();</code> ），那么它们的内存会分配在堆上。</li>\n<li>堆内存需要手动释放，使用  <code>delete</code>  关键字。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"413-成员属性设置为私有\"><a class=\"anchor\" href=\"#413-成员属性设置为私有\">#</a> 4.1.3 成员属性设置为私有</h3>\n<p>** 优点 1：** 将所有成员属性设置为私有，可以自己控制读写权限</p>\n<p>** 优点 2：** 对于写权限，我们可以检测数据的有效性</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Person &#123;\n private:\n  string m_Name;   // 姓名，可读可写\n  int m_Age = 18;  // 年龄，只读。默认值18。也可以写，必须在0到150之间\n  string m_Idol;   // 偶像，只写\n\n  // 提供一些公有的方法对私有的属性进行一些读写的控制\n public:\n  // 设置姓名\n  void setName(string name) &#123;\n    m_Name = name;\n  &#125;\n  // 获取姓名\n  string getName() &#123;\n    return m_Name;\n  &#125;\n  // 获取年龄\n  int getAge() &#123;\n    return m_Age;\n  &#125;\n  // 设置年龄（0～150）\n  void setAge(int age) &#123;\n    if (age &lt; 0 || age &gt; 150) &#123;\n      cout &lt;&lt; &quot;年龄&quot; &lt;&lt; age &lt;&lt; &quot;输入有误，赋值失败&quot; &lt;&lt; endl;\n      return;\n    &#125;\n    m_Age = age;\n  &#125;\n  // 设置偶像\n  void setIdol(string idol) &#123;\n    m_Idol = idol;\n  &#125;\n&#125;;\n\nint main() &#123;\n  Person p;\n\n  // p.m_Name = &quot;张三&quot;;\n  // cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p.m_Name &lt;&lt; endl;\n  // 报错：成员 &quot;Person::m_Name&quot; (已声明 所在行数:7) 不可访问\n\n  p.setName(&quot;张三&quot;);\n  cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p.getName() &lt;&lt; endl;\n  p.setAge(160);\n  cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; p.getAge() &lt;&lt; endl;\n  p.setIdol(&quot;anna&quot;);\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><code>#define _CRT_SECURE_NO_WARNINGS</code>  是一个预处理指令，主要用于 Microsoft Visual C++ 编译器中的安全性警告控制。它的作用是禁用一些关于使用不安全的 C 标准库函数的警告。</p>\n<p><strong>背景</strong></p>\n<p>在使用 C++ 的时候，特别是涉及到 C 标准库的函数（例如  <code>strcpy</code> 、 <code>sprintf</code>  等），这些函数被认为是不安全的，因为它们可能导致缓冲区溢出等安全问题。为了鼓励开发者使用更安全的替代函数（例如  <code>strcpy_s</code> 、 <code>sprintf_s</code>  等），Microsoft 的编译器会在代码中使用这些不安全函数时发出警告。</p>\n<p><strong>具体作用</strong></p>\n<ul>\n<li><strong>禁用警告</strong>：当你在代码中使用某些不安全的函数时，编译器会发出警告。如果你定义了  <code>_CRT_SECURE_NO_WARNINGS</code> ，这些警告就会被禁用。</li>\n<li><strong>方便开发</strong>：在开发和调试阶段，可能会频繁使用一些传统的 C 函数，而不想每次都看到警告信息。定义这个宏可以减少这些干扰。</li>\n</ul>\n</blockquote>\n<p><strong>练习案例 1：设计立方体类</strong></p>\n<p>设计立方体类 (Cube)</p>\n<p>求出立方体的面积和体积</p>\n<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410151715505.png\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cube</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> m_L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> m_W<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 设置长</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    m_L <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 获取长</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> m_L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 设置宽</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    m_W <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 获取宽</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> m_W<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 设置高</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setH</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    m_H <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 获取高</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// 获取立方体面积</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">calculateS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> m_L <span class=\"token operator\">*</span> m_W <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> m_W <span class=\"token operator\">*</span> m_H <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> m_L <span class=\"token operator\">*</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// 获取立方体体积</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">calculateV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> m_L <span class=\"token operator\">*</span> m_W <span class=\"token operator\">*</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// 利用成员函数判断两个立方体是否相等</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isSameByClass</span><span class=\"token punctuation\">(</span>Cube<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m_L <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m_L <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m_H<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 利用全局函数判断两个立方体是否相等</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>Cube<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span> Cube<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 值传递会拷贝出来一份数据，为了传入数据的时候更简单，最好通过引用传递，就不会再拷贝出来一份数据了，而是用原始的数据</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">getL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">getL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  Cube c1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  c1<span class=\"token punctuation\">.</span><span class=\"token function\">setL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  c1<span class=\"token punctuation\">.</span><span class=\"token function\">setW</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  c1<span class=\"token punctuation\">.</span><span class=\"token function\">setH</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1的面积为：\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">calculateS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1的体积为：\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">calculateV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  Cube c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  c2<span class=\"token punctuation\">.</span><span class=\"token function\">setL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  c2<span class=\"token punctuation\">.</span><span class=\"token function\">setW</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  c2<span class=\"token punctuation\">.</span><span class=\"token function\">setH</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">// 利用全局函数判断两个立方体是否相等</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1和c2是相等的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1和c2是不相等的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">// 利用成员函数判断两个立方体是否相等</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  ret <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">isSameByClass</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"成员函数判断：c1和c2是相等的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"成员函数判断：c1和c2是不相等的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>练习案例 2：点和圆的关系</strong></p>\n<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410151738234.png\" alt=\"\" /></p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410151759929.jpg\" alt=\"\" /></p>\n</blockquote>\n<ol>\n<li>\n<p>point.h：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once  </span><span class=\"token comment\">// 防止头文件重复包含</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 标准的命名空间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 点类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> m_X<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 设置 x</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一般在一个类设计的时候，只需要成员函数的声明就可以了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 获取 x</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 设置 y</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 获取 y</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>point.cpp：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 只需要留住函数的所有实现</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置 x</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 函数写在这是一个全局函数，但我们知道这些都是成员函数。所以要加 Point:: 告诉编译器这是 Point 作用域下的成员函数，否则会报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  m_X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 获取 x</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> m_X<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 设置 y</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  m_Y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 获取 y</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> m_Y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>circle.h：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span>  <span class=\"token comment\">// 在一个类中应用到另一个类，只需要把另一个类头文件包含进来</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 圆类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> m_R<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 半径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Point m_Center<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 圆心</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 设置半径</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 获取半径</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">getR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 设置圆心</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setCenter</span><span class=\"token punctuation\">(</span>Point center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 获取圆心</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  Point <span class=\"token function\">getCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>circle.cpp：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"circle.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 设置半径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  m_R <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 获取半径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> m_R<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 设置圆心</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setCenter</span><span class=\"token punctuation\">(</span>Point center<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  m_Center <span class=\"token operator\">=</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 获取圆心</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Point <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> m_Center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>main.cpp：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"circle.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 判断点和圆关系</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">isInCircle</span><span class=\"token punctuation\">(</span>Circle<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> Point<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 计算圆心和点之间距离的平方</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 计算半径的平方</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> rDistance <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 判断关系</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">==</span> rDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆上\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">></span> rDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆外\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆内\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 创建圆</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  Circle c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  c<span class=\"token punctuation\">.</span><span class=\"token function\">setR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  Point center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  center<span class=\"token punctuation\">.</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  center<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  c<span class=\"token punctuation\">.</span><span class=\"token function\">setCenter</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 创建点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  Point p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// 判断关系</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">isInCircle</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>运行 make 命令</strong>：在项目根目录下的终端，输入以下命令来编译项目：</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>make</pre></td></tr></table></figure><p>这将根据  <code>Makefile</code>  中的规则编译源文件并生成可执行文件。</p>\n</li>\n<li>\n<p><strong>运行程序</strong>：编译成功后，可以运行生成的可执行文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./output/main</pre></td></tr></table></figure></li>\n<li>\n<p>项目结构如下：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410151906691.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>清理项目</p>\n<p>如果想清理生成的对象文件和可执行文件，可以运行：</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>make clean</pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"42-对象的初始化和清理\"><a class=\"anchor\" href=\"#42-对象的初始化和清理\">#</a> 4.2 对象的初始化和清理</h2>\n<ul>\n<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>\n<li>C++ 中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>\n</ul>\n<h3 id=\"421-构造函数和析构函数\"><a class=\"anchor\" href=\"#421-构造函数和析构函数\">#</a> 4.2.1 构造函数和析构函数</h3>\n<p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>\n<ul>\n<li>\n<p>一个对象或者变量没有初始状态，对其使用后果是未知</p>\n</li>\n<li>\n<p>同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>\n</li>\n</ul>\n<p>c++ 利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>程序员不提供构造和析构，编译器会提供</strong></p>\n<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>\n<blockquote>\n<p>相当于函数体是空的，一行代码都没有</p>\n</blockquote>\n<ul>\n<li>构造函数：主要作用在于创建对象时为对象的成员属性初始化赋值，构造函数由编译器自动调用，无须手动调用。</li>\n<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>\n</ul>\n<p><strong>构造函数语法：</strong> <code>类名()&#123;&#125;</code></p>\n<ol>\n<li>构造函数，没有返回值也不写 void</li>\n<li>函数名称与类名相同</li>\n<li>构造函数可以有参数，因此可以发生重载</li>\n<li>程序在调用对象时候会自动调用构造函数，无须手动调用，而且只会调用一次</li>\n</ol>\n<p><strong>析构函数语法：</strong>  <code>~类名()&#123;&#125;</code></p>\n<ol>\n<li>析构函数，没有返回值也不写 void</li>\n<li>函数名称与类名相同，在名称前加上符号～</li>\n<li>析构函数不可以有参数，因此不可以发生重载</li>\n<li>程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次</li>\n</ol>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n\t//构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;\n\t&#125;\n\t//析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nvoid test01() &#123;\n\tPerson p;// 在栈上的数据，test01执行完毕后，释放对象。所以在释放这个对象前，就会自动调用它的析构函数\n&#125;\n\nint main() &#123;\n\t\n\ttest01();// 打印&quot;Person的构造函数调用&quot;和&quot;Person的析构函数调用&quot;\n  Person p;// 打印&quot;Person的构造函数调用&quot;和&quot;Person的析构函数调用&quot;\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"422-构造函数的分类及调用\"><a class=\"anchor\" href=\"#422-构造函数的分类及调用\">#</a> 4.2.2 构造函数的分类及调用</h3>\n<p>两种分类方式：</p>\n<ul>\n<li>\n<p>按参数分为： 有参构造和无参构造</p>\n</li>\n<li>\n<p>按类型分为： 普通构造和拷贝构造</p>\n</li>\n</ul>\n<p>三种调用方式：</p>\n<ul>\n<li>括号法</li>\n<li>显示法</li>\n<li>隐式转换法</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n  // 构造函数按照参属分类：无参构造（默认构造）和有参构造\n  Person() &#123;\n    cout &lt;&lt; &quot;Person的无参构造函数调用&quot; &lt;&lt; endl;\n  &#125;\n  Person(int a) &#123;\n    age = a;\n    cout &lt;&lt; &quot;Person的有参构造函数调用&quot; &lt;&lt; endl;\n  &#125;\n\n  // 构造函数按照类型分类：普通构造和拷贝构造\n  Person(const Person&amp; p) &#123;\n    // 拷贝构造函数：要让一个Person复制一份一模一样的Person出来。所以要传一个Person进来，并且把传进来的Person的所有属性拷在要构造的Person身上\n    // 不能把传进来的对象本体修改掉，所以要加一个const限定。其次在拷贝的同时还要按照引用的方式传进来\n    cout &lt;&lt; &quot;Person的拷贝构造函数调用&quot; &lt;&lt; endl;\n    age = p.age;\n  &#125;\n\n  ~Person() &#123;\n    cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;\n  &#125;\n\n public:\n  int age;\n&#125;;\n\n// 调用\nvoid test01() &#123;\n  // 1、括号法\n  Person p;                // 依次打印&quot;Person的无参构造函数调用&quot;、&quot;Person的析构函数调用&quot;\n  Person p2(10);           // 依次打印&quot;Person的有参构造函数调用&quot;、&quot;Person的析构函数调用&quot;\n  Person p3(p2);           // 依次打印&quot;Person的拷贝构造函数调用&quot;、&quot;Person的析构函数调用&quot;\n  cout &lt;&lt; p2.age &lt;&lt; endl;  // 10\n  cout &lt;&lt; p3.age &lt;&lt; endl;  // 10\n  // 注意事项1：调用默认构造函数的时候，不要加()。因为下面这行代码，编译器会认为是一个函数的声明，不会认为在创建对象\n  Person p1();  // 没调用任何构造函数和析构函数，不会创建出来对象\n  void func();  // 这叫函数声明，没有写大括号函数实现。在一个函数体内部可以写另一个函数声明，语法是允许的\n\n  // 2、显示法\n  Person p4;\n  Person p5 = Person(10);  // 有参构造\n  Person p6 = Person(p5);  // 拷贝构造\n  /* 匿名对象。创建了一个对象，只不过这个对象没有名。但如果它放在等号右侧，等号的左侧就是这个对象的名\n  特点：当前行执行结束后，系统会立即回收掉匿名对象。因为没有名，后边就没法使这个对象了*/\n  Person(10);\n  cout &lt;&lt; &quot;aaaaa&quot; &lt;&lt; endl;\n  // 上面两行执行依次打印：&quot;Person的有参构造函数调用&quot;、&quot;Person的析构函数调用&quot;、&quot;aaaaa&quot;\n  // 注意事项2:不要利用拷贝构造函数，初始化匿名对象\n  Person(p6);  // 报错：&quot;Person p6&quot;重定义。编译器会认为Person (p6)等价于Person p6;对象声明\n\n  // 3、隐式转换法\n  Person p7 = 10;  // 相当于写了Person p7 = Person(10);，编译器来转换。有参构造\n  Person p8 = p7;  // 拷贝构造\n&#125;\nint main() &#123;\n  test01();\n  return 0;\n&#125;\n</code></pre>\n<h3 id=\"423-拷贝构造函数调用时机\"><a class=\"anchor\" href=\"#423-拷贝构造函数调用时机\">#</a> 4.2.3 拷贝构造函数调用时机</h3>\n<p>C++ 中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n  Person() &#123;\n    cout &lt;&lt; &quot;Person默认构造函数调用&quot; &lt;&lt; endl;\n  &#125;\n  Person(int age) &#123;\n    cout &lt;&lt; &quot;Person有参构造函数调用&quot; &lt;&lt; endl;\n    m_Age = age;\n  &#125;\n  Person(const Person&amp; p) &#123;\n    cout &lt;&lt; &quot;Person拷贝构造函数调用&quot; &lt;&lt; endl;\n    m_Age = p.m_Age;\n  &#125;\n\n  ~Person() &#123;\n    cout &lt;&lt; &quot;Person析构函数调用&quot; &lt;&lt; endl;\n  &#125;\n\n  int m_Age;\n&#125;;\n\n// 1、使用一个已经创建完毕的对象来初始化一个新对象\nvoid test01() &#123;\n  Person p1(20);\n  Person p2(p1);\n  cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; p2.m_Age &lt;&lt; endl;  // 20\n&#125;\n\n// 2、值传递的方式给函数参数传值\nvoid doWork(Person p) &#123;\n  // 值传递的本质：拷贝一个临时的副本出来，并不会影响实参\n&#125;\nvoid test02() &#123;\n  Person p;\n  doWork(p);  // 调用doWrok的时候，把实参p传给形参的时候，会调用拷贝构造函数\n&#125;\n\n// 3、值方式返回局部对象\nPerson doWork2() &#123;\n  Person p1;\n  cout &lt;&lt; &amp;p1 &lt;&lt; endl;\n  return p1;\n  // 局部变量在函数执行完毕后就被释放，所以返回的不是p1本身。用值方式来返回，会根据p1来创建出来一个新的对象，然后返回给test03\n  // 返回局部对象 p1，按理说应该调用拷贝构造函数\n&#125;\nvoid test03() &#123;\n  Person p = doWork2(); // 按理说这里应该构造一个新的对象 p\n  cout &lt;&lt; &amp;p &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n  test01();\n  test02();\n  test03();\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li>\n<p>调用 test03 后的<strong>预期输出</strong>依次为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person默认构造函数调用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0x16fdfedfc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Person拷贝构造函数调用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Person析构函数调用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0x16fdfefd4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Person析构函数调用</pre></td></tr></table></figure><p>可能认为在  <code>doWork2()</code>  返回  <code>p1</code>  时，应该调用 <strong>拷贝构造函数</strong>，因为  <code>p1</code>  是局部变量，而函数返回时需要将其拷贝或移动到  <code>test03</code>  中的  <code>p</code>  对象。然而，输出中并没有看到 <strong>拷贝构造函数</strong> 的调用。</p>\n</li>\n<li>\n<p><strong>实际输出</strong>依次为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person默认构造函数调用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0x16fdfedfc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0x16fdfedfc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Person析构函数调用</pre></td></tr></table></figure><p>所观察到的行为实际上是由于编译器的优化机制所导致的。具体来说，这种现象是 <strong>返回值优化（Return Value Optimization, RVO）</strong> 或 <strong>命名返回值优化（Named Return Value Optimization, NRVO）</strong> 的结果。</p>\n<p>由于编译器的优化（特别是 RVO 或 NRVO），编译器会<strong>消除</strong>不必要的对象拷贝。在  <code>doWork2</code>  中，编译器知道  <code>p1</code>  会被返回并赋值给  <code>test03</code>  中的  <code>p</code> ，因此它会<strong>直接在  <code>test03</code>  的  <code>p</code>  的内存位置上构造对象</strong>，而不需要在  <code>doWork2</code>  内创建一个新的临时对象并拷贝或移动它。</p>\n<p>也就是说，编译器优化了  <code>p1</code>  的生命周期和内存位置，使得它的内存地址与  <code>test03</code>  中的  <code>p</code>  是相同的。</p>\n</li>\n<li>\n<p><strong>为什么没有调用拷贝构造函数？</strong></p>\n<p>编译器在优化过程中<strong>消除了拷贝构造</strong>，因此你没有看到拷贝构造函数的调用，而是通过 RVO 或 NRVO 直接构造在目标位置上。这是 C++ 标准允许的优化，即使有这个优化，行为依然符合 C++ 规范。</p>\n</li>\n<li>\n<p><strong>解释析构函数调用</strong></p>\n<p>在函数  <code>doWork2()</code>  返回后， <code>p1</code>  没有被显式地销毁，因为  <code>p</code>  和  <code>p1</code>  实际上是同一个对象。程序运行到  <code>test03</code>  的结束时， <code>p</code>  的析构函数被调用，因此你看到析构函数的输出：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person析构函数调用</pre></td></tr></table></figure></li>\n<li>\n<p><strong>总结</strong></p>\n<p>看到的现象是由编译器的返回值优化导致的，编译器避免了创建临时对象，并直接在目标位置构造了返回的对象，因此没有调用拷贝构造函数，且  <code>p1</code>  和  <code>p</code>  实际上是同一个对象，指向同一块内存。</p>\n<p>要看到没有优化的效果，你可以尝试关闭编译器优化，或者在某些情况下通过禁止 RVO 来观察拷贝构造函数的调用。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"424-构造函数调用规则\"><a class=\"anchor\" href=\"#424-构造函数调用规则\">#</a> 4.2.4 构造函数调用规则</h3>\n<p>默认情况下，c++ 编译器至少给一个类添加 3 个函数</p>\n<p>1．默认构造函数 (无参，函数体为空)</p>\n<p>2．默认析构函数 (无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul>\n<li>\n<p>如果用户定义有参构造函数，c++ 不再提供默认无参构造，但是会提供默认拷贝构造</p>\n</li>\n<li>\n<p>如果用户定义拷贝构造函数，c++ 不会再提供其他构造函数</p>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n\t//无参（默认）构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//有参构造函数\n\tPerson(int a) &#123;\n\t\tage = a;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//拷贝构造函数\n\tPerson(const Person&amp; p) &#123;\n\t\tage = p.age;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\n public:\n\tint age;\n&#125;;\n\nvoid test01() &#123;\n\tPerson p1(18);\n  \n\t//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作\n\tPerson p2(p1);\n\tcout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;// 18\n&#125;\n\nvoid test02() &#123;\n\t//如果用户已提供有参构造，编译器不会提供默认构造，会提供拷贝构造\n\tPerson p1; //此时如果用户自己没有提供默认构造，会出错\n\tPerson p2(10); //用户提供的有参\n\tPerson p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供\n\n\t//如果用户已提供拷贝构造，编译器不会提供其他构造函数\n\tPerson p4; //此时如果用户自己没有提供默认构造，会出错\n\tPerson p5(10); //此时如果用户自己没有提供有参，会出错\n\tPerson p6(p5); //用户自己提供拷贝构造\n&#125;\n\nint main() &#123;\n\n\ttest01();\n  test02();\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"425-深拷贝与浅拷贝\"><a class=\"anchor\" href=\"#425-深拷贝与浅拷贝\">#</a> 4.2.5 深拷贝与浅拷贝</h3>\n<p>深浅拷贝是面试经典问题，也是常见的一个坑</p>\n<p>浅拷贝：简单的赋值拷贝操作</p>\n<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n  Person() &#123;\n    cout &lt;&lt; &quot;Person的默认构造函数调用&quot; &lt;&lt; endl;\n  &#125;\n  Person(int age, int height) &#123;\n    m_Age = age;\n    m_Height = new int(height);  // new int返回的就是指向int类型的指针\n    // 堆区的数据由程序员手动开辟，也需要由程序员手动释放\n    cout &lt;&lt; &quot;Person的有参构造函数调用&quot; &lt;&lt; endl;\n  &#125;\n  ~Person() &#123;\n    // 析构代码，将堆区开辟数据做释放操作\n    if (m_Height != NULL) &#123;\n      delete m_Height;  // 释放这块内存\n      m_Height = NULL;  // 防止野指针出现，做滞空操作\n    &#125;\n    cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;\n  &#125;\n\n  int m_Age;\n  int* m_Height;  // 把身高的数据开辟到堆区\n&#125;;\n\nvoid test01() &#123;\n  Person p1(18, 160);\n  cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; p1.m_Age &lt;&lt; &quot; 身高为：&quot; &lt;&lt; *p1.m_Height &lt;&lt; endl;\n  Person p2(p1);\n  cout &lt;&lt; &quot;pe的年龄为：&quot; &lt;&lt; p2.m_Age &lt;&lt; &quot; 身高为：&quot; &lt;&lt; *p2.m_Height &lt;&lt; endl;\n&#125;\nint main() &#123;\n  test01();\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>运行以上代码，程序崩溃</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410241638736.png\" alt=\"\" /></p>\n<p>浅拷贝操作 <code>Person p2(p1)</code>  会逐字节地把 18 拷到 p2 身上</p>\n<p>代码出现问题主要就是 m_Height 身高出现问题了，因为这是一个指针，记录的 0x0011。当 <code>Person p2(p1)</code>  调用拷贝构造函数做浅拷贝操作的时候，相当于把 0x0011 逐字节地拷贝到 p2 了，所以 p2 记录的指针也是 0x0011</p>\n<p>当提供析构代码的时候，p1 和 p2 都会执行析构，栈后进先出，所以 p2 先被释放。p2 被释放的时候会执行析构代码，m_Height0x0011 不为空，释放 0x0011 指向的堆区内存。p1 这个对象在自己被释放的时候也要执行析构代码，它的 m_Height0x0011 不为空，又来释放一次 0x0011 指向的堆区内存，但这块内存已经被 p2 释放过了，p1 再去释放已经是非法操作了</p>\n<p>这就是浅拷贝带来的问题，堆区的内存重复释放</p>\n</blockquote>\n<p>浅拷贝的问题，要利用深拷贝进行解决。深拷贝就是重新在堆区申请一块内存，自己写一个拷贝构造函数，p1 指向一块堆区，p2 也指向一块堆区，堆区存放的数据是一样的，但指针指向的内存是不一样的。p2 和 p1 去执行析构代码的时候，释放的不是同一块堆区，不会有同一个堆区重复释放的问题</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410251059692.png\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的默认构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    m_Height <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的有参构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 自己实现拷贝构造函数，解决浅拷贝带来的问题</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person拷贝构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    m_Age <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//m_Height = p.m_Height;// 编译器默认实现就是这行代码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 深拷贝操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    m_Height <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">.</span>m_Height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_Height <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">delete</span> m_Height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      m_Height <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的析构函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m_Height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 身高为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">.</span>m_Height <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pe的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 身高为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">.</span>m_Height <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>\n<h3 id=\"426-初始化列表\"><a class=\"anchor\" href=\"#426-初始化列表\">#</a> 4.2.6 初始化列表</h3>\n<p><strong>作用：</strong></p>\n<p>C++ 提供了初始化列表语法，用来初始化类中的属性</p>\n<p><strong>语法：</strong> <code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n  // 传统方式初始化\n  // Person(int a, int b, int c) &#123;\n  //\tm_A = a;\n  //\tm_B = b;\n  //\tm_C = c;\n  //&#125;\n\n  // 初始化列表方式初始化\n  // Person() : m_A(10), m_B(20), m_C(30) &#123;&#125;对应的对象创建为Person p;，创建这个对象的同时调用这个构造函数，顺便将对象的属性初始化为10、20、30\n  Person(int a, int b, int c) : m_A(a), m_B(b), m_C(c) &#123;&#125;\n\n  void PrintPerson() &#123;\n    cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;\n    cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;\n    cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;\n  &#125;\n\n private:\n  int m_A;\n  int m_B;\n  int m_C;\n&#125;;\n\nint main() &#123;\n  Person p(1, 2, 3);\n  p.PrintPerson();\n\n  return 0;\n&#125;\n</code></pre>\n<h3 id=\"427-类对象作为类成员\"><a class=\"anchor\" href=\"#427-类对象作为类成员\">#</a> 4.2.7 类对象作为类成员</h3>\n<p>C++ 类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<p>例如：</p>\n<pre><code class=\"language-C++\">class A &#123;&#125;\nclass B &#123;\n    A a；\n&#125;\n</code></pre>\n<p>B 类中有对象 A 作为成员，A 为对象成员</p>\n<p>那么当创建 B 对象时，A 与 B 的构造和析构的顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Phone &#123;\n public:\n\tPhone(string name) &#123;\n\t\tm_PhoneName = name;\n\t\tcout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;\n\t&#125;\n\n\t~Phone() &#123;\n\t\tcout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;\n\t&#125;\n\n\tstring m_PhoneName;\n\n&#125;;\n\nclass Person &#123;\n public:\n\n\t//初始化列表可以告诉编译器调用哪一个构造函数\n\tPerson(string name, string pName) :m_Name(name), m_Phone(pName) &#123;\n    // 传入第二个参数相当于Phone m_Phone = pName;。隐式转换法创建对象，编译器来转换成Phone m_Phone = Phone(pName);\n\t\tcout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;\n\t&#125;\n\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid playGame() &#123;\n\t\tcout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;\n\t&#125;\n\n\tstring m_Name;\n\tPhone m_Phone;\n\n&#125;;\n\nvoid test01() &#123;\n\t//当类中成员是其他类对象时，我们称该成员为 对象成员\n\t//构造的顺序是 ：先调用对象成员的构造，再调用本类构造\n\t//析构顺序与构造相反\n\tPerson p(&quot;张三&quot; , &quot;苹果X&quot;);\n\tp.playGame();\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n  // 依次打印&quot;Phone构造&quot;、&quot;Person构造&quot;、&quot;张三 使用苹果X 牌手机！&quot;、Person析构&quot;、&quot;Phone析构&quot;\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"428-静态成员\"><a class=\"anchor\" href=\"#428-静态成员\">#</a> 4.2.8 静态成员</h3>\n<p>静态成员就是在成员变量和成员函数前加上关键字 static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul>\n<li>\n<p>静态成员变量</p>\n<ul>\n<li>\n<p>所有对象共享同一份数据</p>\n</li>\n<li>\n<p>在编译阶段分配内存</p>\n<blockquote>\n<p>分配内存时机并不是在创建一个对象之后分配在栈上或堆区。在编译阶段就分配内存，相当于程序还没有运行之前，生成了一个 exe 程序，还没有双击它之前就已经给它分配内存了。分在内存的全局区里</p>\n</blockquote>\n</li>\n<li>\n<p>类内声明，类外初始化</p>\n<blockquote>\n<p>这个数据必须得有一个初始值，否则没法去用它</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>示例 ：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n\t\n public:\n\tstatic int m_A;\n\t//静态成员变量特点：\n\t//1 在编译阶段分配内存\n\t//2 类内声明，类外初始化\n\t//3 所有对象共享同一份数据\n\n private:\n\tstatic int m_B; //静态成员变量也是有访问权限的\n&#125;;\nint Person::m_A = 10;// Person作用域下边的m_A静态成员\nint Person::m_B = 10;\n\nvoid test01() &#123;\n  // 静态成员变量不属于某个对象上，所有对象都共享同一份数据\n\t// 因此静态成员变量有两种访问方式\n\n\t//1、通过对象\n\tPerson p1;\n  cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl;// 10\n\tp1.m_A = 100;\n\tcout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl;// 100\n\tPerson p2;\n\tp2.m_A = 200;\n\tcout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; // 200\n\tcout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl;// 200\n\n\t//2、通过类名\n\tcout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl;// 200\n\t//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //类外访问不到私有静态成员变量\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\treturn 0;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>静态成员函数</p>\n<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 静态成员函数特点：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//1 程序共享一个函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//2 静态成员函数只能访问静态成员变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态成员函数可以访问静态成员变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">//m_B = 100; // 错误，不可以访问非静态成员变量。因为 func 在内存中是只有一份的，m_B 这个非静态成员变量必须创建一个对象来进行访问。当调用 func 这个函数的时候，这个函数体内部无法区分到底是哪个对象的 m_B</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 静态成员变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span><span class=\"token comment\">// 非静态成员变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 静态成员函数也是有访问权限的</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func2调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 静态成员变量两种访问方式</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//1、通过对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tPerson p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//2、通过类名</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token class-name\">Person</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//Person::func2 (); // 类外访问不到私有静态成员函数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"43-c对象模型和this指针\"><a class=\"anchor\" href=\"#43-c对象模型和this指针\">#</a> 4.3 C++ 对象模型和 this 指针</h2>\n<h3 id=\"431-成员变量和成员函数分开存储\"><a class=\"anchor\" href=\"#431-成员变量和成员函数分开存储\">#</a> 4.3.1 成员变量和成员函数分开存储</h3>\n<p>在 C++ 中，类内的成员变量和成员函数分开存储</p>\n<p>只有非静态成员变量才属于类的对象上</p>\n<pre><code class=\"language-C++\">class Empty &#123;\n&#125;;\n\nclass Person &#123;\n public:\n\tPerson() &#123;\n\t\tmA = 0;\n\t&#125;\n\tint mA;// 非静态成员变量占对象空间，属于类的对象上\n\tstatic int mB;// 静态成员变量不占对象空间，不属于类的对象上\n  \n\tvoid func() &#123;\n\t\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;\n\t&#125;// 函数也不占对象空间，所有函数共享一个函数实例，不属于类的对象上\n  \n\tstatic void sfunc() &#123;\n\t&#125;// 静态成员函数也不占对象空间，不属于类的对象上\n&#125;;\n\nint main() &#123;\n  Empty e;\n  cout &lt;&lt; sizeof(e) &lt;&lt; endl;\n  // 空对象占用的内存空间为：1（字节）\n  // C++编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置。每个空对象也应该有一个独一无二的内存地址，不能跟其他对象占重的位置\n  \n  Person p;\n  cout &lt;&lt; sizeof(p) &lt;&lt; endl;// 4\n\n\tcout &lt;&lt; sizeof(Person) &lt;&lt; endl;// 4。sizeof(Person) 只计算非静态成员变量的大小\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"432-this指针概念\"><a class=\"anchor\" href=\"#432-this指针概念\">#</a> 4.3.2 this 指针概念</h3>\n<p>通过 4.3.1 我们知道在 C++ 中成员变量和成员函数是分开存储的</p>\n<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>\n<p>那么问题是：这一块代码是如何区分哪个对象调用自己的呢？</p>\n<p>c++ 通过提供特殊的对象指针，this 指针，解决上述问题。<strong>this 指针指向被调用的成员函数所属的对象</strong></p>\n<p>this 指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this 指针不需要定义，直接使用即可</p>\n<p>this 指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用 this 指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用 return *this</li>\n</ul>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n\n\tPerson(int age) &#123;\n\t\t//1、当形参和成员变量同名时，可用this指针来区分\n    //this指针指向被调用的成员函数所属的对象。谁调用这个有参构造，this就指向谁\n\t\tthis-&gt;age = age;\n\t&#125;\n\n  // 如果该函数返回值类型是Person，那么打印p2.age = 20。因为以值的方式来返回，调用完第一次该函数，p2加了10岁之后，返回的是按照p2拷贝构造的一个新数据，调用了拷贝构造函数，因为用值的方式返回会复制一份新的数据出来，相当于返回的Person和p2自身是不一样的数据。每调用一次该函数，返回的都是新拷贝出来的对象，而不是调用这个函数的对象本身。但如果是用引用的方式来返回，不会创建新的对象，而是一直返回p2\n\tPerson&amp; PersonAddPerson(Person&amp; p) &#123;\n\t\tthis-&gt;age += p.age;\n\t\t//返回对象本身\n\t\treturn *this;// this指向p2的指针，而*this指向的就是p2这个对象本体\n\t&#125;\n\n\tint age;\n&#125;;\n\nvoid test01() &#123;\n\tPerson p1(10);\n\tcout &lt;&lt; &quot;p1.age = &quot; &lt;&lt; p1.age &lt;&lt; endl;// 10\n\n\tPerson p2(10);\n  p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);// 链式编程思想\n\tcout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;// 40\n&#125;\n\nint main() &#123;\n\ttest01();\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"433-空指针访问成员函数\"><a class=\"anchor\" href=\"#433-空指针访问成员函数\">#</a> 4.3.3 空指针访问成员函数</h3>\n<p>C++ 中空指针也是可以调用成员函数的，但是也要注意有没有用到 this 指针</p>\n<p>如果用到 this 指针，需要加以判断保证代码的健壮性</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//空指针访问成员函数\nclass Person &#123;\n public:\n\n\tvoid ShowClassName() &#123;\n\t\tcout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid ShowPerson() &#123;\n\t\tif (this == NULL) &#123;\n\t\t\treturn;\n\t\t&#125;// 若没有该判断，p-&gt;ShowPerson();报错\n\t\tcout &lt;&lt; mAge &lt;&lt; endl;// 其实在属性前面都默认加了一个this-&gt;，表示这是当前对象的属性。this指向p的指针，是一个空指针NULL，相当于this是一个空的东西，不可能从没有确定的对象上访问它的成员\n\t&#125;\n\n public:\n\tint mAge;\n&#125;;\n\nvoid test01() &#123;\n\tPerson* p = NULL;\n\tp-&gt;ShowClassName(); //空指针，可以调用成员函数\n\tp-&gt;ShowPerson();  //但是如果成员函数中用到了this指针，就不可以了\n&#125;\n\nint main() &#123;\n\ttest01();\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"434-const修饰成员函数\"><a class=\"anchor\" href=\"#434-const修饰成员函数\">#</a> 4.3.4 const 修饰成员函数</h3>\n<p><strong>常函数：</strong></p>\n<ul>\n<li>成员函数后加 const 后我们称为这个函数为<strong>常函数</strong></li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字 mutable 后，在常函数中依然可以修改</li>\n</ul>\n<p><strong>常对象：</strong></p>\n<ul>\n<li>声明对象前加 const 称该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n\tPerson() &#123;\n\t\tm_A = 0;\n\t\tm_B = 0;\n\t&#125;\n\n\t//如果想让指针指向的值也不可以修改，需要声明常函数\n\tvoid showPerson() const &#123;\n    /*\n    this指针的本质是一个指针常量Person* const this\n\t\tthis = NULL; //不能修改指针的指向\n\t\tthis-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的\n\t\t如果想让this指针指向的值也不允许修改，就要再加一个const变成const Person* const this。编译器就把这个const加在成员函数名后，相当于常函数。常函数里修改this指向的对象的属性值this-&gt;mA = 100;就报错了\n\t\t*/\n    m_A = 100;// 报错\n\n\t\t//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量\n\t\tthis-&gt;m_B = 100;\n\t&#125;\n  \n  void func() &#123;\n    m_A = 100;\n  &#125;\n\n public:\n\tint m_A;\n\tmutable int m_B; // 特殊变量，即使在常函数中，也可以修改这个值\n&#125;;\n\nvoid test01() &#123;\n  Person p;\n  p.showPerson();\n&#125;\n\n//const修饰对象  常对象\nvoid test02() &#123;\n\n\tconst Person person; //在对象前加const，变为常对象  \n\tcout &lt;&lt; person.m_A &lt;&lt; endl;\n\t//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问\n\tperson.m_B = 100; //但是常对象可以修改mutable修饰的成员变量\n\n\t//常对象只能调用常函数\n  person.showPerson();\n\t//person.func(); // 报错，因为常对象不能调用普通的成员函数。普通成员函数可以修改属性，而常对象本身就不允许修改属性，违背协定\n&#125;\n\nint main() &#123;\n\ttest01();\n  test02();\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"44-友元\"><a class=\"anchor\" href=\"#44-友元\">#</a> 4.4 友元</h2>\n<p>生活中你的家有客厅 (Public)，有你的卧室 (Private)</p>\n<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>\n<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>\n<p>友元的关键字为  <mark>friend</mark></p>\n<p>友元的三种实现</p>\n<ul>\n<li>全局函数做友元</li>\n<li>类做友元</li>\n<li>成员函数做友元</li>\n</ul>\n<h3 id=\"441-全局函数做友元\"><a class=\"anchor\" href=\"#441-全局函数做友元\">#</a> 4.4.1 全局函数做友元</h3>\n<pre><code class=\"language-C++\">// 建筑物类\nclass Building &#123;\n\t//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容\n\tfriend void goodGay(Building* building);\n\n public:\n\tBuilding() &#123;\n\t\tthis-&gt;m_SittingRoom = &quot;客厅&quot;;\n\t\tthis-&gt;m_BedRoom = &quot;卧室&quot;;\n\t&#125;\n\n public:\n\tstring m_SittingRoom; //客厅\n private:\n\tstring m_BedRoom; //卧室\n&#125;;\n\n// 全局函数\nvoid goodGay(Building* building) &#123;\n\tcout &lt;&lt; &quot;好基友全局函数正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;好基友全局函数正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nint main()&#123;\n\tBuilding b;\n\tgoodGay(&amp;b);\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"442-类做友元\"><a class=\"anchor\" href=\"#442-类做友元\">#</a> 4.4.2 类做友元</h3>\n<pre><code class=\"language-C++\">class Building &#123;\n  // 告诉编译器 GoodGay类是Building类的好朋友，可以访问到Building类中私有成员\n  friend class GoodGay;\n\n public:\n  Building();\n\n public:\n  string m_SittingRoom;  // 客厅\n private:\n  string m_BedRoom;  // 卧室\n&#125;;\n\nclass GoodGay &#123;\n public:\n  GoodGay();\n  void visit();  // 参观函数，访问Building中的属性\n\n private:\n  Building* building;\n&#125;;\n\n// 类外写成员函数\nBuilding::Building() &#123;\n  this-&gt;m_SittingRoom = &quot;客厅&quot;;\n  this-&gt;m_BedRoom = &quot;卧室&quot;;\n&#125;\nGoodGay::GoodGay() &#123;\n  building = new Building;// new在堆区创建了一个建筑物对象，并让building指向new出来的对象\n&#125;\nvoid GoodGay::visit() &#123;\n  cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n  cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;// 当让类作为好朋友之后，类中的成员函数都可以访问Building中的私有成员了\n&#125;\n\nint main() &#123;\n  GoodGay gg;\n  gg.visit();\n  return 0;\n&#125;\n</code></pre>\n<h3 id=\"443-成员函数做友元\"><a class=\"anchor\" href=\"#443-成员函数做友元\">#</a> 4.4.3 成员函数做友元</h3>\n<pre><code class=\"language-C++\">class Building &#123;\n\t//告诉编译器  GoodGay类中的visit成员函数 是Building好朋友，可以访问私有成员\n\tfriend void GoodGay::visit();\n\n public:\n\tBuilding();\n\n public:\n\tstring m_SittingRoom; //客厅\n private:\n\tstring m_BedRoom;//卧室\n&#125;;\n\nclass GoodGay &#123;\n public:\n\tGoodGay();\n\tvoid visit(); // 只让visit函数作为Building的好朋友，可以发访问Building中私有成员\n\tvoid visit2(); // 让visit2函数不可以访问Building中私有成员\n\n private:\n\tBuilding* building;\n&#125;;\n\nBuilding::Building() &#123;\n\tm_SittingRoom = &quot;客厅&quot;;\n\tm_BedRoom = &quot;卧室&quot;;\n&#125;\nGoodGay::GoodGay() &#123;\n\tbuilding = new Building;\n&#125;\nvoid GoodGay::visit() &#123;\n\tcout &lt;&lt; &quot;visit函数正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;visit函数正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\nvoid GoodGay::visit2() &#123;\n\tcout &lt;&lt; &quot;visit2正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\t//cout &lt;&lt; &quot;visit2正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nint main()&#123;\n  GoodGay gg;\n\tgg.visit();\n  gg.visit2();\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"45-运算符重载\"><a class=\"anchor\" href=\"#45-运算符重载\">#</a> 4.5 运算符重载</h2>\n<p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>\n<blockquote>\n<p>加号对于内置数据类型比如两个整型，编译器知道该怎么运算。但假设是两个自定义的数据类型比如两个人 person 进行相加该怎么运算，编译器就不知道了。所以如果想告诉编译器两个自定义数据类型如何进行相加 / 减 / 乘 / 除，就需要利用运算符重载这个技术</p>\n</blockquote>\n<h3 id=\"451-加号运算符重载\"><a class=\"anchor\" href=\"#451-加号运算符重载\">#</a> 4.5.1 加号运算符重载</h3>\n<blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Person p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p1<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Person p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p2<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Person p3 <span class=\"token operator\">=</span> p1 <span class=\"token operator\">+</span> p2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 想创建第三个人，等于前两个人进行相加运算，相当于让 p1 的 m_A 属性加上 p2 的 m_A 属性赋值给 p3 的 m_A 属性，p1 的 m_B 属性加上 p2 的 m_B 属性赋值给 p3 的 m_B 属性。编译器实现不了</span></pre></td></tr></table></figure><p>先抛开运算符重载这个新技术，通过自己写一个成员函数，实现两个对象相加属性后返回新的对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person <span class=\"token function\">PersonAddPerson</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Person temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  temp<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_A <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  temp<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_B <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个函数的名称是程序员自己起的。编译器给起了一个通用名称 <code>operator+</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过成员函数重载 + 号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Person <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Person temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  temp<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_A <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  temp<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_B <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Person p3 = p1.operator+(p2);</code>  简化为 <code>Person p3 = p1 + p2;</code></p>\n</blockquote>\n<p>作用：实现两个自定义数据类型相加的运算</p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n\tPerson() &#123;&#125;;\n\tPerson(int a, int b) &#123;\n\t\tthis-&gt;m_A = a;\n\t\tthis-&gt;m_B = b;\n\t&#125;\n\t// 1.成员函数实现 + 号运算符重载\n\tPerson operator+(const Person&amp; p) &#123;\n\t\tPerson temp;\n\t\ttemp.m_A = this-&gt;m_A + p.m_A;\n\t\ttemp.m_B = this-&gt;m_B + p.m_B;\n\t\treturn temp;\n\t&#125;\n\n public:\n\tint m_A;\n\tint m_B;\n&#125;;\n\n// 2.全局函数实现 + 号运算符重载\nPerson operator+(const Person&amp; p1, const Person&amp; p2) &#123;\n\tPerson temp;\n\ttemp.m_A = p1.m_A + p2.m_A;\n\ttemp.m_B = p1.m_B + p2.m_B;\n\treturn temp;\n&#125;\n// Person p3 = operator+(p1, p2);简化为Person p3 = p1 + p2;\n\n// 3.运算符重载 可以发生函数重载 \nPerson operator+(const Person&amp; p2, int val) &#123;\n\tPerson temp;\n\ttemp.m_A = p2.m_A + val;\n\ttemp.m_B = p2.m_B + val;\n\treturn temp;\n&#125;\n\nint main() &#123;\n\n\tPerson p1(10, 10);\n\tPerson p2(20, 20);\n\n\t//成员函数方式\n\tPerson p3 = p2 + p1;  //相当于 p2.operaor+(p1)\n\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;\n\n\tPerson p4 = p3 + 10; //相当于 operator+(p3,10)\n\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>在表达式 <code>Person p3 = p2 + p1;</code>  中， <code>p2</code>  是  <code>Person</code>  类型的对象， <code>p1</code>  也是  <code>Person</code>  类型的对象。根据 C++ 的运算符重载规则，编译器会优先选择成员函数重载，而不是调用全局函数实现 + 号运算符重载，原因如下：</p>\n<ul>\n<li><strong>优先级</strong>：当左侧操作数是类的实例时，编译器会优先考虑成员函数重载。这是因为成员函数可以直接访问类的成员变量，而全局函数则需要通过参数来访问。</li>\n<li><strong>调用方式</strong>：在  <code>p2 + p1</code>  中， <code>p2</code>  是  <code>Person</code>  类型的对象，因此编译器会尝试调用  <code>p2</code>  的成员函数  <code>operator+</code> ，即  <code>p2.operator+(p1)</code> 。</li>\n</ul>\n</blockquote>\n<p>总结 1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>\n<blockquote>\n<p>C++ 不允许对内置数据类型（如  <code>int</code> 、 <code>float</code> 、 <code>char</code>  等）进行运算符重载。运算符的行为是由语言本身定义的，不能被用户修改</p>\n</blockquote>\n<p>总结 2：不要滥用运算符重载</p>\n<h3 id=\"452-左移运算符重载\"><a class=\"anchor\" href=\"#452-左移运算符重载\">#</a> 4.5.2 左移运算符重载</h3>\n<p>作用：可以输出自定义数据类型</p>\n<blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以输出整型变量。不能直接输出 p 这个对象，需要重载 <code>&lt;&lt;</code>  符号，让编译器知道 p 该怎么输出里边的属性</p>\n</blockquote>\n<pre><code class=\"language-C++\">class Person &#123;\n\tfriend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);\n\n public:\n\tPerson(int a, int b) &#123;\n\t\tthis-&gt;m_A = a;\n\t\tthis-&gt;m_B = b;\n\t&#125;\n\n\t// 不会利用成员函数重载左移运算符，因为p.operator&lt;&lt;(cout)不是我们想要的效果，简化版本p &lt;&lt; cout;，无法实现cout在左侧\n\t//void operator&lt;&lt;(Person&amp; p)&#123;\n\t//&#125;\n\nprivate:\n\tint m_A;\n\tint m_B;\n&#125;;\n\n// 只能利用全局函数实现左移重载\n// 本质operator&lt;&lt;(cout, p)，简化cout &lt;&lt; p。cout是标准输出流对象，通过标准输出流这个类创建出来的对象\n// ostream对象全局只能有一个，所以要用引用的方式传递进形参，不能创建一个新的出来\nostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;\n\tout &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;\n\treturn out;\n&#125;\n\nint main() &#123;\n\tPerson p1(10, 20);\n\tcout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程。如果operator&lt;&lt;函数返回的是void，那么就无法继续后面的&lt;&lt; &quot;hello world&quot; &lt;&lt; endl了\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>\n</blockquote>\n<h3 id=\"453-递增运算符重载\"><a class=\"anchor\" href=\"#453-递增运算符重载\">#</a> 4.5.3 递增运算符重载</h3>\n<p>作用：通过重载递增运算符，实现自己的整型数据</p>\n<pre><code class=\"language-C++\">// 自定义整型\nclass MyInteger &#123;\n  friend ostream&amp; operator&lt;&lt;(ostream&amp; cout, MyInteger myint);\n\n public:\n  MyInteger() &#123;\n    m_Num = 0;\n  &#125;\n\n  // 重载前置++运算符\n  MyInteger&amp; operator++() &#123;\n    // 如果返回的是MyInteger类型，那么test01输出myint就是1。因为第一次自增后返回的新对象，并没有返回myint本身，所以第二次自增操作的新对象，myint保持不变\n    // 返回引用是为了一直对一个数据进行递增操作\n    m_Num++;\n    return *this;\n  &#125;\n  // 重载后置++运算符\n  MyInteger operator++(int) &#123;\n    // int代表占位参数，可以用于区分前置和后置递增\n    // 返回的是一个局部对象，在当前函数执行完之后就被释放掉了，若还要返回引用就是非法操作了\n    MyInteger temp = *this;\n    m_Num++;\n    return temp;\n  &#125;\n\n private:\n  int m_Num;\n&#125;;\n\n// 重载 &lt;&lt; 运算符\nostream&amp; operator&lt;&lt;(ostream&amp; cout, MyInteger myint) &#123;\n  cout &lt;&lt; myint.m_Num;\n  return cout;\n&#125;\n\nvoid test01() &#123;\n  MyInteger myint;\n  cout &lt;&lt; ++(++myint) &lt;&lt; endl;// 2\n  cout &lt;&lt; myint &lt;&lt; endl;// 2\n&#125;\n\nvoid test02() &#123;\n  MyInteger myint;\n  cout &lt;&lt; myint++ &lt;&lt; endl;// 0\n  cout &lt;&lt; myint &lt;&lt; endl;// 1\n  cout &lt;&lt; myint++ &lt;&lt; endl;// 1\n  cout &lt;&lt; myint &lt;&lt; endl;// 2\n&#125;\n\nint main() &#123;\n  test01();\n  test02();\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 前置递增返回引用，后置递增返回值</p>\n</blockquote>\n<h3 id=\"454-赋值运算符重载\"><a class=\"anchor\" href=\"#454-赋值运算符重载\">#</a> 4.5.4 赋值运算符重载</h3>\n<p>c++ 编译器至少给一个类添加 4 个函数</p>\n<ol>\n<li>默认构造函数 (无参，函数体为空)</li>\n<li>默认析构函数 (无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n<li>赋值运算符 operator=, 对属性进行值拷贝</li>\n</ol>\n<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n\tPerson(int age) &#123;\n\t\t//将年龄数据开辟到堆区\n\t\tm_Age = new int(age);\n\t&#125;\n\t~Person() &#123;\n\t\tif (m_Age != NULL) &#123;\n\t\t\tdelete m_Age;\n\t\t\tm_Age = NULL;\n\t\t&#125;\n\t&#125;\n\n\t//重载赋值运算符 \n\tPerson&amp; operator=(Person &amp;p) &#123;\n\t\tif (m_Age != NULL) &#123;// 先判断是否有属性在堆区，如果有先释放干净，然后再深拷贝\n\t\t\tdelete m_Age;\n\t\t\tm_Age = NULL;\n\t\t&#125;\n    \n\t\t//编译器提供的代码是浅拷贝\n\t\t//m_Age = p.m_Age;\n\t\t//提供深拷贝 解决浅拷贝的问题\n\t\tm_Age = new int(*p.m_Age);\n\n\t\t//返回自身\n\t\treturn *this;\n\t&#125;\n\n\t//年龄的指针\n\tint* m_Age;\n&#125;;\n\nvoid test01() &#123;\n\tPerson p1(18);\n\tPerson p2(20);\n\tPerson p3(30);\n\n\tp3 = p2 = p1; //赋值操作\n\n\tcout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;// 18\n\tcout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;// 18\n\tcout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;// 18\n&#125;\n\nint main() &#123;\n\ttest01();\n\n\t//int a = 10;\n\t//int b = 20;\n\t//int c = 30;\n\t//c = b = a;\n\t//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 10\n\t//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;// 10\n\t//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;// 10\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"455-关系运算符重载\"><a class=\"anchor\" href=\"#455-关系运算符重载\">#</a> 4.5.5 关系运算符重载</h3>\n<p>** 作用：** 重载关系运算符，可以让两个自定义类型对象进行对比操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\n public:\n\tPerson(string name, int age) &#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;;\n\n\tbool operator==(Person&amp; p) &#123;\n\t\tif (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123;\n\t\t\treturn true;\n\t\t&#125; else &#123;\n\t\t\treturn false;\n\t\t&#125;\n\t&#125;\n\n\tbool operator!=(Person&amp; p) &#123;\n\t\tif (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123;\n\t\t\treturn false;\n\t\t&#125; else &#123;\n\t\t\treturn true;\n\t\t&#125;\n\t&#125;\n\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nint main() &#123;\n\tPerson a(&quot;孙悟空&quot;, 18);\n\tPerson b(&quot;孙悟空&quot;, 18);\n\n\tif (a == b) &#123;\n\t\tcout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;\n\t&#125;\n\n\tif (a != b) &#123;\n\t\tcout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;\n\t&#125; else &#123;\n\t\tcout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;\n\t&#125;\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"456-函数调用运算符重载\"><a class=\"anchor\" href=\"#456-函数调用运算符重载\">#</a> 4.5.6 函数调用运算符重载</h3>\n<ul>\n<li>函数调用运算符 ()  也可以重载</li>\n<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>\n<li>仿函数没有固定写法，非常灵活</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">// 打印输出类\nclass MyPrint &#123;\n public:\n\tvoid operator()(string text) &#123;\n\t\tcout &lt;&lt; text &lt;&lt; endl;\n\t&#125;\n&#125;;\nvoid MyPrint02(string text) &#123;\n  cout &lt;&lt; text &lt;&lt; endl;\n&#125;\nvoid test01() &#123;\n\t//重载的（）操作符\n\tMyPrint myFunc;\n\tmyFunc(&quot;hello world&quot;);// 由于使用起来非常类似于函数调用，因此称为仿函数\n  MyPrint02(&quot;hello world&quot;);\n&#125;\n\nclass MyAdd &#123;\n public:\n\tint operator()(int v1, int v2) &#123;\n\t\treturn v1 + v2;\n\t&#125;\n&#125;;\nvoid test02() &#123;\n\tMyAdd add;\n\tint ret = add(10, 10);\n\tcout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl;\n\n\t//匿名函数对象调用  \n\tcout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;// MyAdd()创建一个临时的匿名对象，当前行执行完立即被释放\n&#125;\n\nint main() &#123;\n\ttest01();\n\ttest02();\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"46-继承\"><a class=\"anchor\" href=\"#46-继承\">#</a> 4.6 继承</h2>\n<p><strong>继承是面向对象三大特性之一</strong></p>\n<p>有些类与类之间存在特殊的关系，例如下图中：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411051704613.png\" alt=\"\" /></p>\n<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>\n<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>\n<h3 id=\"461-继承的基本语法\"><a class=\"anchor\" href=\"#461-继承的基本语法\">#</a> 4.6.1 继承的基本语法</h3>\n<p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>\n<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>\n<p><strong>普通实现：</strong></p>\n<pre><code class=\"language-C++\">//Java页面\nclass Java  &#123;\n public:\n\tvoid header() &#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer() &#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left() &#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content() &#123;\n\t\tcout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//Python页面\nclass Python &#123;\n public:\n\tvoid header() &#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer() &#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left() &#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content() &#123;\n\t\tcout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//C++页面\nclass CPP &#123;\n public:\n\tvoid header() &#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer() &#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left() &#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content() &#123;\n\t\tcout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nint main() &#123;\n  //Java页面\n\tcout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;\n\tJava ja;\n\tja.header();\n\tja.footer();\n\tja.left();\n\tja.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//Python页面\n\tcout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;\n\tPython py;\n\tpy.header();\n\tpy.footer();\n\tpy.left();\n\tpy.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//C++页面\n\tcout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;\n\tCPP cp;\n\tcp.header();\n\tcp.footer();\n\tcp.left();\n\tcp.content();\n  \n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>继承实现：</strong></p>\n<pre><code class=\"language-C++\">//公共页面\nclass BasePage &#123;\n public:\n\tvoid header() &#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer() &#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left() &#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//Java页面\nclass Java : public BasePage &#123;\n public:\n\tvoid content() &#123;\n\t\tcout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n//Python页面\nclass Python : public BasePage &#123;\n public:\n\tvoid content() &#123;\n\t\tcout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n//C++页面\nclass CPP : public BasePage &#123;\n public:\n\tvoid content() &#123;\n\t\tcout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\t//Java页面\n\tcout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;\n\tJava ja;\n\tja.header();\n\tja.footer();\n\tja.left();\n\tja.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//Python页面\n\tcout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;\n\tPython py;\n\tpy.header();\n\tpy.footer();\n\tpy.left();\n\tpy.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//C++页面\n\tcout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;\n\tCPP cp;\n\tcp.header();\n\tcp.footer();\n\tcp.left();\n\tcp.content();\n  \n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<p>继承的好处：<mark>可以减少重复的代码</mark></p>\n<p>class A : public B;</p>\n<p>A 类称为子类 或 派生类</p>\n<p>B 类称为父类 或 基类</p>\n<p><strong>派生类中的成员，包含两大部分</strong>：</p>\n<p>一类是从基类继承过来的，一类是自己增加的成员。</p>\n<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>\n<h3 id=\"462-继承方式\"><a class=\"anchor\" href=\"#462-继承方式\">#</a> 4.6.2 继承方式</h3>\n<p>继承的语法： <code>class 子类 : 继承方式 父类</code></p>\n<p><strong>继承方式一共有三种：</strong></p>\n<ul>\n<li>公共继承</li>\n<li>保护继承</li>\n<li>私有继承</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411051722534.png\" alt=\"\" /></p>\n<blockquote>\n<p>父类中私有的内容，子类不管用哪种继承方式都不可以访问</p>\n<p>如果是公共继承，那么在父类中公共的属性在子类中依然是公共的属性，在父类中是保护的属性在子类中依然是保护的属性</p>\n<p>如果是保护继承，那么父类中公共权限的内容到子类中变为了保护权限，父类中保护权限的内容也变为了保护权限</p>\n<p>如果是私有继承，父类中公共权限的内容到子类变为了私有权限，父类中的保护权限内容到子类中也变为了私有权限</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base1 &#123;\n public: \n\tint m_A;\n protected:\n\tint m_B;\n private:\n\tint m_C;\n&#125;;\n//公共继承\nclass Son1 : public Base1 &#123;\n public:\n\tvoid func() &#123;\n\t\tm_A = 10; //可访问 public权限\n\t\tm_B = 10; //可访问 protected权限\n\t\t//m_C = 10; //不可访问\n\t&#125;\n&#125;;\nvoid myClass() &#123;\n\tSon1 s1;\n\ts1.m_A = 100; // 其他类只能访问到公共权限\n  //s1.m_B = 100; // 报错，因为m_B到子类Son1继承了之后是保护权限，类外访问不到\n&#125;\n\n//保护继承\nclass Base2 &#123;\n public:\n\tint m_A;\n protected:\n\tint m_B;\n private:\n\tint m_C;\n&#125;;\nclass Son2 : protected Base2 &#123;\n public:\n\tvoid func() &#123;\n\t\tm_A = 100; //可访问 protected权限\n\t\tm_B = 100; //可访问 protected权限\n\t\t//m_C = 100; //不可访问\n\t&#125;\n&#125;;\nvoid myClass2() &#123;\n\tSon2 s;\n\t//s.m_A = 1000; //不可访问\n&#125;\n\n//私有继承\nclass Base3 &#123;\n public:\n\tint m_A;\n protected:\n\tint m_B;\n private:\n\tint m_C;\n&#125;;\nclass Son3 : private Base3 &#123;\n public:\n\tvoid func() &#123;\n\t\tm_A = 100; //可访问 private权限\n\t\tm_B = 100; //可访问 private权限\n\t\t//m_C = 100; //不可访问\n\t&#125;\n&#125;;\nvoid test03() &#123;\n  Son3 s1;\n  //s1.m_A = 1000;// 到Son3中变为私有成员，类外访问不到\n  //s1.m_B = 1000;// 到Son3中变为私有成员，类外访问不到\n&#125;\nclass GrandSon3 : public Son3 &#123;\n public:\n\tvoid func() &#123;\n\t\t//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到\n\t\t//m_A = 1000;\n\t\t//m_B = 1000;\n\t\t//m_C = 1000;\n\t&#125;\n&#125;;\n</code></pre>\n<h3 id=\"463-继承中的对象模型\"><a class=\"anchor\" href=\"#463-继承中的对象模型\">#</a> 4.6.3 继承中的对象模型</h3>\n<p>** 问题：** 从父类继承过来的成员，哪些属于子类对象中？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base &#123;\n public:\n\tint m_A;\n protected:\n\tint m_B;\n private:\n\tint m_C;\n&#125;;\n\n//公共继承\nclass Son : public Base &#123;\n public:\n\tint m_D;\n&#125;;\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;// Son 类对象所占用的内存大小：16字节\n  // 父类中所有非静态成员属性都会被子类继承下去\n  // 父类中私有成员属性是被编译器给隐藏了，因此是访问不到，但是确实被继承下去了\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>\n</blockquote>\n<h3 id=\"464-继承中构造和析构顺序\"><a class=\"anchor\" href=\"#464-继承中构造和析构顺序\">#</a> 4.6.4 继承中构造和析构顺序</h3>\n<p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>\n<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base  &#123;\n public:\n\tBase() &#123;\n\t\tcout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Base() &#123;\n\t\tcout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Son : public Base &#123;\n public:\n\tSon() &#123;\n\t\tcout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Son() &#123;\n\t\tcout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nint main() &#123;\n  Base b;// 依次打印&quot;Base构造函数!&quot;和&quot;Base析构函数!&quot;\n  \n  // 当你创建子类对象的时候，由于做了一个继承的操作，所以肯定会把父类中所有属性拿到手，那么也会创建出来一个父类对象，同时调用父类对象中的构造函数，以及最后销毁的同时也要把父类的析构走一遍\n  // 继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反\n\tSon s;\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>\n</blockquote>\n<h3 id=\"465-继承同名成员处理方式\"><a class=\"anchor\" href=\"#465-继承同名成员处理方式\">#</a> 4.6.5 继承同名成员处理方式</h3>\n<p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base &#123;\n public:\n\tBase() &#123;\n\t\tm_A = 100;\n\t&#125;\n\tvoid func() &#123;\n\t\tcout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid func(int a) &#123;\n\t\tcout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;\n\t&#125;\n\n public:\n\tint m_A;\n&#125;;\n\nclass Son : public Base &#123;\n public:\n\tSon() &#123;\n\t\tm_A = 200;\n\t&#125;\n\n\tvoid func() &#123;\n\t\tcout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;\n\t&#125;\n  \n public:\n\tint m_A;\n&#125;;\n\nint main() &#123;\n\tSon s;\n\n\tcout &lt;&lt; &quot;Son下的m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;// 200\n\tcout &lt;&lt; &quot;Base下的m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;// 100。如果通过子类对象访问到父类中同名成员属性，需要加作用域\n\n\ts.func();// &quot;Son - func()调用&quot;。直接调用，调用的是子类中的同名成员\n\ts.Base::func();// &quot;Base - func()调用&quot;\n\ts.Base::func(10);// &quot;Base - func(int a)调用&quot;\n  //s.func(100);// 报错\n  // 如果子类中出现和父类同名的成员函数，子类会隐藏父类中所有版本的同名成员函数\n\t// 如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域\n  // 如果去掉子类的func函数，那么s.func(100);会直接调用父类的func(int a)\n  \n\treturn EXIT_SUCCESS;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ol>\n<li>子类对象可以直接访问到子类中同名成员</li>\n<li>子类对象加作用域可以访问到父类同名成员</li>\n<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>\n</ol>\n<h3 id=\"466-继承同名静态成员处理方式\"><a class=\"anchor\" href=\"#466-继承同名静态成员处理方式\">#</a> 4.6.6 继承同名静态成员处理方式</h3>\n<p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>\n<p>静态成员和非静态成员出现同名，处理方式一致</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base &#123;\n public:\n\tstatic void func() &#123;\n\t\tcout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;\n\t&#125;\n\tstatic void func(int a) &#123;\n\t\tcout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;\n\t&#125;\n\tstatic int m_A;\n&#125;;\nint Base::m_A = 100;\n\nclass Son : public Base &#123;\n public:\n\tstatic void func() &#123;\n\t\tcout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;\n\t&#125;\n\tstatic int m_A;\n&#125;;\nint Son::m_A = 200;\n\n//同名成员属性\nvoid test01() &#123;\n\t// 1、通过对象访问\n\tSon s;\n\tcout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;// 200\n\tcout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;// 100\n\n\t// 2、通过类名访问\n\tcout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl;// 200\n\tcout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;// 100。第一个::代表通过类名方式访问，第二个::代表访问父类作用域下\n&#125;\n\n//同名成员函数\nvoid test02() &#123;\n\t// 1、通过对象访问\n\tSon s;\n\ts.func();// &quot;Son - static void func()&quot;\n\ts.Base::func();// &quot;Base - static void func()&quot;\n\n  // 2、通过类名访问\n\tSon::func();// &quot;Son - static void func()&quot;\n\tSon::Base::func();// &quot;Base - static void func()&quot;\n  //Son::func(100);// 报错\n\t//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问\n\tSon::Base::func(100);// &quot;Base - static void func(int a)&quot;\n&#125;\n\nint main() &#123;\n\ttest01();\n\ttest02();\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>\n</blockquote>\n<h3 id=\"467-多继承语法\"><a class=\"anchor\" href=\"#467-多继承语法\">#</a> 4.6.7 多继承语法</h3>\n<p>C++ 允许<strong>一个类继承多个类</strong></p>\n<p>语法： <code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>\n<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>\n<p><strong>C++ 实际开发中不建议用多继承</strong></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base1 &#123;\n public:\n\tBase1() &#123;\n\t\tm_A = 100;\n\t&#125;\n public:\n\tint m_A;\n&#125;;\n\nclass Base2 &#123;\n public:\n\tBase2() &#123;\n\t\tm_A = 200;  // 开始是m_B 不会出问题，但是改为mA就会出现不明确\n\t&#125;\n public:\n\tint m_A;\n&#125;;\n\n// 语法：class 子类 ：继承方式 父类1, 继承方式 父类2 \nclass Son : public Base2, public Base1 &#123;\n public:\n\tSon() &#123;\n\t\tm_C = 300;\n\t\tm_D = 400;\n\t&#125;\n public:\n\tint m_C;\n\tint m_D;\n&#125;;\n\nint main() &#123;\n\n\tSon s;\n\tcout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(s) &lt;&lt; endl;// 16\n  //cout &lt;&lt; s.m_A &lt;&lt; endl;// 报错：不明确。二义性出现了\n\tcout &lt;&lt; s.Base1::m_A &lt;&lt; endl;// 100\n\tcout &lt;&lt; s.Base2::m_A &lt;&lt; endl;// 200\n  //多继承容易产生成员同名的情况\n  //当父类中出现同名成员，需要加类名作用域区分调用哪一个基类的成员\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>\n</blockquote>\n<h3 id=\"468-菱形继承\"><a class=\"anchor\" href=\"#468-菱形继承\">#</a> 4.6.8 菱形继承</h3>\n<p><strong>菱形继承概念：</strong></p>\n<ul>\n<li>\n<p>两个派生类继承同一个基类</p>\n</li>\n<li>\n<p>又有某个类同时继承者两个派生类</p>\n</li>\n<li>\n<p>这种继承被称为菱形继承，或者钻石继承</p>\n</li>\n</ul>\n<p><strong>典型的菱形继承案例：</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411051910954.png\" alt=\"\" /></p>\n<p><strong>菱形继承问题：</strong></p>\n<ol>\n<li>\n<pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。\n</code></pre>\n</li>\n<li>\n<pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。\n</code></pre>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Animal &#123;\n public:\n\tint m_Age;\n&#125;;\n\n// 利用虚继承解决菱形继承的问题。继承前加virtual关键字后，变为虚继承\n// 此时公共的父类Animal称为虚基类\nclass Sheep : virtual public Animal &#123;&#125;;\nclass Tuo   : virtual public Animal &#123;&#125;;\nclass SheepTuo : public Sheep, public Tuo &#123;&#125;;\n\nint main() &#123;\n\tSheepTuo st;\n  \n\tst.Sheep::m_Age = 100;\n\tst.Tuo::m_Age = 200;\n  // 当菱形继承，两个父类拥有相同数据，需要加以作用域区分\n  // 这份数据我们知道只有一份就可以，菱形继承导致数据有两份，资源浪费\n  \n  cout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;// 200\n\tcout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt; st.Tuo::m_Age &lt;&lt; endl;// 200。当发生虚继承之后，这份数据就只有一个了\n  cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;// 200。不会出现不明确的情况了，因为这个数据只有一个\n  \n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411051932727.png\" alt=\"\" /></p>\n<p>右边是加 virtual 关键字前，数据有 2 份，一份是从 Sheep 过来的，一份是从 Tuo 过来的</p>\n<p>左边是加 virtual 关键字后，m_Age 只有一份了，而从 Sheep 和 Tuo 继承下来的是 vbptr（virtual base pointer，虚基类指针），它会指向 vbtable（virtual base table，虚基类表）</p>\n<p>也就是说 Sheep 会指向它的虚基类表，即下面的 <code>SheepTuo::$vbtable@Sheep@:</code> 。这个表中记录了一个偏移量 8。给 Sheep 的 0 加上 8 之后等于 8，找到 m_Age。指针通过偏移量也能找到 m_Age，所以 m_Age 只有一份</p>\n<p>同样当子类 Tuo 继承 Animal 的时候，Tuo 也有它的 vbptr 指向它的虚基类表 <code>SheepTuo::$vbtable@Tuo@:</code> ，偏移量是 4。Tuo 的 4+4 也得 8</p>\n<p>其实 Sheep 和 Tuo 只是分别继承了一个指针</p>\n</blockquote>\n<p>总结：</p>\n<ul>\n<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>\n<li>利用虚继承可以解决菱形继承问题</li>\n</ul>\n<h2 id=\"47-多态\"><a class=\"anchor\" href=\"#47-多态\">#</a> 4.7 多态</h2>\n<h3 id=\"471-多态的基本概念\"><a class=\"anchor\" href=\"#471-多态的基本概念\">#</a> 4.7.1 多态的基本概念</h3>\n<p><strong>多态是 C++ 面向对象三大特性之一</strong></p>\n<p>多态分为两类</p>\n<ul>\n<li>静态多态：函数重载 和 运算符重载属于静态多态，复用函数名</li>\n<li>动态多态：派生类和虚函数实现运行时多态</li>\n</ul>\n<p>静态多态和动态多态区别：</p>\n<ul>\n<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>\n<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>\n</ul>\n<p>下面通过案例进行讲解多态</p>\n<blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猫在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小狗在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 执行说话的函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">doSpeak</span><span class=\"token punctuation\">(</span>Animal<span class=\"token operator\">&amp;</span> animal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">//animal.speak (); 地址早绑定，在编译阶段确定函数地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tanimal<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打印 \"动物在说话\"。因为现在是一个 Animal 对象，它调用 speak 函数不管传猫传狗，都会走 Animal 里边的 speak 函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tCat cat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">doSpeak</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Animal&amp; animal = cat; 父类引用在指向一个子类对象。C++ 中允许父子之间的类型转换，不需要做强制类型转换</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tDog dog<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">doSpeak</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果想执行让猫说话，那么 doSpeak 函数的地址就不能提前绑定，需要在运行阶段进行绑定，地址晚绑定。在父类 speak 函数前加一个关键字 virtual</p>\n</blockquote>\n<pre><code class=\"language-C++\">class Animal &#123;\n public:\n\t//speak函数就是虚函数\n\t//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。\n\tvirtual void speak() &#123;\n\t\tcout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\nclass Cat : public Animal &#123;\n public:\n\tvoid speak() &#123;\n\t\tcout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\nclass Dog : public Animal &#123;\n public:\n\tvoid speak() &#123;\n\t\tcout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n//我们希望传入什么对象，那么就调用什么对象的函数\n//如果函数地址在编译阶段就能确定，那么静态联编\n//如果函数地址在运行阶段才能确定，就是动态联编\n\nvoid doSpeak(Animal&amp; animal) &#123;\n\tanimal.speak();// speak函数的地址不能提前确定出来，要看animal是什么对象。当运行的时候，speak函数发现传的是猫，那就走猫说话的代码，传的是狗就走狗的函数代码。speak属于多种形态了，由于传入的对象不同走不同的函数，确定的不同函数地址\n&#125;\n/*动态多态满足条件： \n  1、有继承关系\n  2、子类重写父类中的虚函数。重写：函数返回值类型、函数名、参数列表完全相同\n  动态多态使用：\n  父类指针或引用指向子类对象，就可以实现动态的多态了。当去调虚函数speak的时候，就会产生地址晚绑定，运行时候再绑定地址了*/\n\nint main() &#123;\n\n\tCat cat;\n\tdoSpeak(cat);// 小猫在说话\n\n\tDog dog;\n\tdoSpeak(dog);// 小狗在说话\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>多态满足条件</p>\n<ul>\n<li>有继承关系</li>\n<li>子类重写父类中的虚函数</li>\n</ul>\n<p>多态使用条件</p>\n<ul>\n<li>父类指针或引用指向子类对象</li>\n</ul>\n<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>\n<blockquote>\n<p>补充：多态的原理剖析</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof Animal = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1。Animal 类只有一个非静态的成员函数，不属于类的对象上，Animal 类似于一个空类，空类的大小是 1 字节</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof Animal = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 4。这 4 个字节是一个指针 vfptr（virtual function pointer，虚函数指针），指向一个虚函数表 vftable（virtual function table），表内部记录虚函数的入口地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411061426671.png\" alt=\"\" /></p>\n<p>如果没有发生重写的情况，就是一个继承，把父类中所有的内容全都拿过来一份，包括指针。子类中也有一个 vfptr 并且指向了一个子类的虚函数表，记录的也是一个虚函数</p>\n<p>当子类重写父类的虚函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猫在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof Animal = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>子类中的虚函数表内部会替换成子类的函数地址 <code>&amp;Cat::speak</code> .。父类虚函数表中的函数入口地址依然是有的，子类只是替换子类的虚函数表</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当父类的指针或者引用指向子类对象时，发生多态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Animal<span class=\"token operator\">&amp;</span> animal <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>animal<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当 animal 去调用 speak 函数的时候，由于指向的是一个 Cat 对象，所以会从 Cat 的虚函数表中去找 speak 函数，相当于在运行阶段发生了动态多态，最后调用 Cat 的说话。如果 animal 指向 Dog 对象，那就从 Dog 的虚函数表中调用 Dog 的说话</p>\n</blockquote>\n<h3 id=\"472-多态案例一-计算器类\"><a class=\"anchor\" href=\"#472-多态案例一-计算器类\">#</a> 4.7.2 多态案例一 - 计算器类</h3>\n<p>案例描述：</p>\n<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>\n<p>多态的优点：</p>\n<ul>\n<li>代码组织结构清晰</li>\n<li>可读性强</li>\n<li>利于前期和后期的扩展以及维护</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//普通实现\nclass Calculator &#123;\n public:\n\tint getResult(string oper) &#123;\n\t\tif (oper == &quot;+&quot;) &#123;\n\t\t\treturn m_Num1 + m_Num2;\n\t\t&#125;\n\t\telse if (oper == &quot;-&quot;) &#123;\n\t\t\treturn m_Num1 - m_Num2;\n\t\t&#125;\n\t\telse if (oper == &quot;*&quot;) &#123;\n\t\t\treturn m_Num1 * m_Num2;\n\t\t&#125;\n\t\t// 如果要提供新的运算，需要修改getResult函数体源码\n    // 在真实开发中提倡开闭原则：对扩展进行开放，对修改进行关闭\n\t&#125;\n public:\n\tint m_Num1;\n\tint m_Num2;\n&#125;;\n\nint main() &#123;\n\t//普通实现测试\n\tCalculator c;\n\tc.m_Num1 = 10;\n\tc.m_Num2 = 10;\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl;\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;\n  \n\treturn 0;\n&#125;\n</code></pre>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 多态实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 实现计算器抽象类：什么功能都不写，只是把 getResult 函数抽象出来</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 多态优点：代码组织结构清晰，可读性强。利于前期和后期的扩展以及维护，比如现在想写一个除法，不用修改原来写的内容，只需要再往后扩展一个计算器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractCalculator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_Num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_Num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 加法计算器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AddCalculator</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">AbstractCalculator</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_Num1 <span class=\"token operator\">+</span> m_Num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 减法计算器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SubCalculator</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">AbstractCalculator</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_Num1 <span class=\"token operator\">-</span> m_Num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 乘法计算器</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MulCalculator</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">AbstractCalculator</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_Num1 <span class=\"token operator\">*</span> m_Num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 创建加法计算器</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tAbstractCalculator<span class=\"token operator\">*</span> abc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> AddCalculator<span class=\"token punctuation\">;</span><span class=\"token comment\">// 多态使用条件：父类指针或者引用指向子类对象</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tabc<span class=\"token operator\">-></span>m_Num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tabc<span class=\"token operator\">-></span>m_Num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span>m_Num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" + \"</span> <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span>m_Num2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">delete</span> abc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用完了记得销毁</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 创建减法计算器</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tabc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SubCalculator<span class=\"token punctuation\">;</span><span class=\"token comment\">// 重新让指针指向一个减法的计算器。刚才销毁掉指针是把堆区的数据释放了，但指针的类型没有变，还是父类的指针</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tabc<span class=\"token operator\">-></span>m_Num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tabc<span class=\"token operator\">-></span>m_Num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span>m_Num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span>m_Num2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">delete</span> abc<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 创建乘法计算器</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tabc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MulCalculator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tabc<span class=\"token operator\">-></span>m_Num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tabc<span class=\"token operator\">-></span>m_Num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span>m_Num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" * \"</span> <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span>m_Num2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">&lt;&lt;</span> abc<span class=\"token operator\">-></span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">delete</span> abc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>；</pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>总结：C++ 开发提倡利用多态设计程序架构，因为多态优点很多</p>\n</blockquote>\n<h3 id=\"473-纯虚函数和抽象类\"><a class=\"anchor\" href=\"#473-纯虚函数和抽象类\">#</a> 4.7.3 纯虚函数和抽象类</h3>\n<p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>\n<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>\n<p>纯虚函数语法： <code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>\n<p>当类中有了<mark>纯</mark>虚函数，这个类也称为<mark>抽象类</mark></p>\n<p><strong>抽象类特点</strong>：</p>\n<ul>\n<li>无法实例化对象</li>\n<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base &#123;\n public:\n\t//纯虚函数\n\t//类中只要有一个纯虚函数就称为抽象类\n\t//抽象类无法实例化对象\n\t//子类必须重写父类中的纯虚函数，否则也属于抽象类\n\tvirtual void func() = 0;\n&#125;;\n\nclass Son : public Base &#123;\n public:\n\tvirtual void func() &#123;\n\t\tcout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;\n\t&#125;;\n&#125;;\n\nint main() &#123;\n\n  //Base b;// 报错：不允许使用抽象类类型&quot;Base&quot;的对象。抽象类无法实例化对象\n\tBase* base = NULL;\n\t//base = new Base; // 报错：不允许使用抽象类类型&quot;Base&quot;的对象\n\tbase = new Son;\n\tbase-&gt;func();\n\tdelete base;//记得销毁\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>补充： <code>delete base;</code>  出现了一个警告信息： <code>delete called on 'Base' that is abstract but has non-virtual destructor</code> 。这个警告的意思是你在删除一个抽象类的指针（ <code>Base*</code> ），而这个抽象类没有虚析构函数。这会导致潜在的内存泄漏或未定义行为，因为在删除基类指针时，派生类的析构函数不会被调用</p>\n<p>为了避免这个问题，你需要在基类  <code>Base</code>  中添加一个虚析构函数。这样，当你通过基类指针删除派生类对象时，派生类的析构函数会被正确调用，从而确保资源的正确释放。</p>\n<p>以下是修改后的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 添加虚析构函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 可以在这里添加清理代码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  Base<span class=\"token operator\">*</span> base <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  base <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Son<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  base<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">delete</span> base<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 现在可以安全地删除</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>解释</strong></p>\n<ol>\n<li>\n<p><strong>虚析构函数</strong>：</p>\n<p>在  <code>Base</code>  类中添加了  <code>virtual ~Base() &#123;&#125;</code> ，这使得  <code>Base</code>  类成为一个具有虚析构函数的类。这样，当你删除一个指向  <code>Son</code>  的  <code>Base</code>  指针时， <code>Son</code>  的析构函数会被调用，确保所有资源都被正确释放。</p>\n</li>\n<li>\n<p><strong>使用  <code>override</code>  关键字</strong>：</p>\n<p>在  <code>Son</code>  类中，使用  <code>override</code>  关键字来明确表示  <code>func</code>  函数是重写基类的虚函数。这有助于提高代码的可读性和安全性。</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"474-多态案例二-制作饮品\"><a class=\"anchor\" href=\"#474-多态案例二-制作饮品\">#</a> 4.7.4 多态案例二 - 制作饮品</h3>\n<p><strong>案例描述：</strong></p>\n<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>\n<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411061538992.png\" alt=\"\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//抽象制作饮品\nclass AbstractDrinking &#123;\n public:\n\t//烧水\n\tvirtual void Boil() = 0;\n\t//冲泡\n\tvirtual void Brew() = 0;\n\t//倒入杯中\n\tvirtual void PourInCup() = 0;\n\t//加入辅料\n\tvirtual void PutSomething() = 0;\n\t//规定流程\n\tvoid makeDrink() &#123;\n\t\tBoil();\n\t\tBrew();\n\t\tPourInCup();\n\t\tPutSomething();\n\t&#125;\n&#125;;\n\n//制作咖啡\nclass Coffee : public AbstractDrinking &#123;\n public:\n\t//烧水\n\tvirtual void Boil() &#123;\n\t\tcout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl;\n\t&#125;\n\t//冲泡\n\tvirtual void Brew() &#123;\n\t\tcout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl;\n\t&#125;\n\t//倒入杯中\n\tvirtual void PourInCup() &#123;\n\t\tcout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl;\n\t&#125;\n\t//加入辅料\n\tvirtual void PutSomething() &#123;\n\t\tcout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//制作茶水\nclass Tea : public AbstractDrinking &#123;\n public:\n\t//烧水\n\tvirtual void Boil() &#123;\n\t\tcout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl;\n\t&#125;\n\t//冲泡\n\tvirtual void Brew() &#123;\n\t\tcout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl;\n\t&#125;\n\t//倒入杯中\n\tvirtual void PourInCup() &#123;\n\t\tcout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl;\n\t&#125;\n\t//加入辅料\n\tvirtual void PutSomething() &#123;\n\t\tcout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//业务函数\nvoid doWork(AbstractDrinking* drink) &#123;\n\tdrink-&gt;makeDrink();// 接口都一样是makeDrink，由于传入的对象不一样，会调用不同子类中的函数。这就属于多态，一个接口有多种形态\n\tdelete drink;\n&#125;\n\nint main() &#123;\n\n\tdoWork(new Coffee);\n\tcout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;\n\tdoWork(new Tea);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"475-虚析构和纯虚析构\"><a class=\"anchor\" href=\"#475-虚析构和纯虚析构\">#</a> 4.7.5 虚析构和纯虚析构</h3>\n<p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>\n<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p>虚析构和纯虚析构共性：</p>\n<ul>\n<li>可以解决父类指针释放子类对象</li>\n<li>都需要有具体的函数实现</li>\n</ul>\n<p>虚析构和纯虚析构区别：</p>\n<ul>\n<li>\n<p>如果是<mark>纯</mark>虚析构，该类属于抽象类，无法实例化对象</p>\n<blockquote>\n<p>如果类里只写了虚析构，没有纯虚函数的情况下，那么还是可以实例化对象的</p>\n</blockquote>\n</li>\n</ul>\n<p>虚析构语法：</p>\n<p><code>virtual ~类名()&#123;&#125;</code></p>\n<p>纯虚析构语法：</p>\n<p><code> virtual ~类名() = 0;</code></p>\n<p><code>类名::~类名()&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 创建子类对象的时候先调用父类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Animal 构造函数调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t～<span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Animal析构函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cat构造函数调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tm_Name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在堆区创建了一个属性，应该在 Cat 的析构函数把堆区创建的姓名释放掉</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>m_Name <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"小猫在说话!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cat析构函数调用!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span> m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tm_Name <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tstring<span class=\"token operator\">*</span> m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tAnimal<span class=\"token operator\">*</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tanimal<span class=\"token operator\">-></span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">delete</span> animal<span class=\"token punctuation\">;</span><span class=\"token comment\">// 父类指针在析构的时候，不会调用子类析构函数，导致子类如果有堆区属性，出现内存泄漏</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码依次打印：&quot;Animal 构造函数调用！&quot;、&quot;Cat 构造函数调用！&quot;、&quot;小猫在说话！&quot;、&quot;Animal 析构函数调用&quot;。Cat 的析构函数没有调，说明堆区的 m_Name 数据没有释放干净，导致了内存泄漏</p>\n<p>问题产生原因是用父类的指针指向子类对象，所以 <code>delete animal</code> delete 父类指针的时候并不会走子类的析构代码</p>\n<p>解决方法就是把父类的析构改为虚析构，就会走子类的析构代码了</p>\n<pre><code class=\"language-C++\">class Animal &#123;\n public:\n\tAnimal() &#123;\n\t\tcout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;\n\t&#125;\n\tvirtual void Speak() = 0;\n\n\t//析构函数加上virtual关键字，变成虚析构函数。利用虚析构可以解决父类指针释放子类对象时不干净的问题。加了下列虚构函数后，依次打印：&quot;Animal 构造函数调用！&quot;、&quot;Cat构造函数调用！&quot;、&quot;小猫在说话!&quot;、&quot;Cat析构函数调用!&quot;、&quot;Animal虚析构函数调用！&quot;\n\t//virtual ~Animal()\n\t//&#123;\n\t//\tcout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;\n\t//&#125;\n  \n\tvirtual ~Animal() = 0;// 纯虚析构。只写这行代码，不写Animal::~Animal()代码段时会报错。因为这行代码写完后只有一个声明，没有代码实现。虚析构也好，纯虚析构也好，必须需要声明也需要实现，因为假设父类中也有数据开辟到堆区了，实现体就有用了，可以把父类中的堆区数据delete释放干净\n&#125;;\nAnimal::~Animal() &#123;\n\tcout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;\n&#125;\n//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。\n\nclass Cat : public Animal &#123;\n public:\n\tCat(string name) &#123;\n\t\tcout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;\n\t\tm_Name = new string(name)\n\t&#125;\n\tvirtual void Speak() &#123;\n\t\tcout &lt;&lt; *m_Name &lt;&lt;  &quot;小猫在说话!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Cat() &#123;\n\t\tcout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;\n\t\tif (this-&gt;m_Name != NULL) &#123;\n\t\t\tdelete m_Name;\n\t\t\tm_Name = NULL;\n\t\t&#125;\n\t&#125;\n\n public:\n\tstring* m_Name;\n&#125;;\n\nint main() &#123;\n\n\tAnimal* animal = new Cat(&quot;Tom&quot;);\n\tanimal-&gt;Speak();\n\n\t//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏\n\t//怎么解决？给基类增加一个虚析构函数\n\t//虚析构函数就是用来解决通过父类指针释放子类对象\n\tdelete animal;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ol>\n<li>\n<p>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>\n</li>\n<li>\n<p>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>\n</li>\n<li>\n<p>拥有纯虚析构函数的类也属于抽象类</p>\n</li>\n</ol>\n<h3 id=\"476-多态案例三-电脑组装\"><a class=\"anchor\" href=\"#476-多态案例三-电脑组装\">#</a> 4.7.6 多态案例三 - 电脑组装</h3>\n<p><strong>案例描述：</strong></p>\n<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>\n<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如 Intel 厂商和 Lenovo 厂商</p>\n<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>\n<p>测试时组装三台不同的电脑进行工作</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202411061653169.png\" alt=\"\" /></p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\n// 抽象不同零件类\n// 抽象CPU类\nclass CPU &#123;\n public:\n  // 抽象的计算函数\n  virtual void calculate() = 0;\n&#125;;\n// 抽象显卡类\nclass VideoCard &#123;\n public:\n  // 抽象的显示函数\n  virtual void display() = 0;\n&#125;;\n// 抽象内存条类\nclass Memory &#123;\n public:\n  // 抽象的存储函数\n  virtual void storage() = 0;\n&#125;;\n\n// 电脑类\nclass Computer &#123;\n public:\n  Computer(CPU* cpu, VideoCard* vc, Memory* mem) &#123;\n    m_cpu = cpu;\n    m_vc = vc;\n    m_mem = mem;\n  &#125;\n  // 提供工作的函数\n  void work() &#123;\n    // 让零件工作起来，调用接口\n    m_cpu-&gt;calculate();\n    m_vc-&gt;display();\n    m_mem-&gt;storage();\n  &#125;\n  // 提供析构函数，释放3个电脑零件\n  ~Computer() &#123;\n    if (m_cpu != NULL) &#123;\n      delete m_cpu;\n      m_cpu = NULL;\n    &#125;\n    if (m_vc != NULL) &#123;\n      delete m_vc;\n      m_vc = NULL;\n    &#125;\n    if (m_mem != NULL) &#123;\n      delete m_mem;\n      m_mem = NULL;\n    &#125;\n  &#125;\n\n private:\n  CPU* m_cpu;       // CPU的零件指针\n  VideoCard* m_vc;  // 显卡零件指针\n  Memory* m_mem;    // 内存条零件指针\n&#125;;\n\n// 具体厂商\n// Intel厂商\nclass IntelCPU : public CPU &#123;\n public:\n  virtual void calculate() &#123;\n    cout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl;\n  &#125;\n&#125;;\nclass IntelVideoCard : public VideoCard &#123;\n public:\n  virtual void display() &#123;\n    cout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl;\n  &#125;\n&#125;;\nclass IntelMemory : public Memory &#123;\n public:\n  virtual void storage() &#123;\n    cout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl;\n  &#125;\n&#125;;\n// Lenovo厂商\nclass LenovoCPU : public CPU &#123;\n public:\n  virtual void calculate() &#123;\n    cout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl;\n  &#125;\n&#125;;\nclass LenovoVideoCard : public VideoCard &#123;\n public:\n  virtual void display() &#123;\n    cout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl;\n  &#125;\n&#125;;\nclass LenovoMemory : public Memory &#123;\n public:\n  virtual void storage() &#123;\n    cout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl;\n  &#125;\n&#125;;\n\nint main() &#123;\n  // 第一台电脑零件\n  CPU* intelCPU = new IntelCPU;  // 用父类的指针来指向子类对象，利用多态\n  VideoCard* intelCard = new IntelVideoCard;\n  Memory* intelMem = new IntelMemory;\n  cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;\n  // 创建第一台电脑\n  Computer* computer1 = new Computer(intelCPU, intelCard, intelMem);\n  computer1-&gt;work();\n  delete computer1;  // 在释放电脑的时候，会走电脑的析构函数，可以在Computer的析构函数中把上面3个零件指针释放掉\n\n  cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;\n  // 第二台电脑组装\n  Computer* computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);\n  computer2-&gt;work();\n  delete computer2;\n\n  cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;\n  // 第三台电脑组装\n  Computer* computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);\n  computer3-&gt;work();\n  delete computer3;\n\n  return 0;\n&#125;\n</code></pre>\n<h1 id=\"5-文件操作\"><a class=\"anchor\" href=\"#5-文件操作\">#</a> 5 文件操作</h1>\n<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>\n<p>通过<strong>文件可以将数据持久化</strong></p>\n<p>C++ 中对文件操作需要包含头文件 <mark>&lt; fstream &gt;</mark></p>\n<blockquote>\n<p>C++ 对于文件操作也是基于面向对象的技术，它提供了一个叫文件流的管理的一个类，在使用文件操作的时候首先要包含头文件 &lt;fstream&gt; 文件流</p>\n</blockquote>\n<p>文件类型分为两种：</p>\n<ol>\n<li>\n<p><strong>文本文件</strong>     -  文件以文本的<strong> ASCII 码</strong>形式存储在计算机中</p>\n<blockquote>\n<p>文本文件去写的文件的数据，双击之后可以用记事本或工具打开，能看到里边的内容，内容以明文的形式存在，能看懂。所以通常如果没有特殊需求，用文本文件就可以了</p>\n</blockquote>\n</li>\n<li>\n<p><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</p>\n</li>\n</ol>\n<p>操作文件的三大类:</p>\n<ol>\n<li>ofstream：写操作</li>\n<li>ifstream： 读操作</li>\n<li>fstream ： 读写操作</li>\n</ol>\n<h2 id=\"51-文本文件\"><a class=\"anchor\" href=\"#51-文本文件\">#</a> 5.1 文本文件</h2>\n<h3 id=\"511-写文件\"><a class=\"anchor\" href=\"#511-写文件\">#</a> 5.1.1 写文件</h3>\n<p>写文件步骤如下：</p>\n<ol>\n<li>\n<p>包含头文件</p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li>\n<p>创建流对象</p>\n<p>ofstream ofs;</p>\n<blockquote>\n<p>通过 ofstream 输出流这个类创建出来一个对象，通过这个对象可以跟文件打交道，往里边写内容</p>\n</blockquote>\n</li>\n<li>\n<p>打开文件</p>\n<p>ofs.open (&quot;文件路径&quot;, 打开方式);</p>\n</li>\n<li>\n<p>写数据</p>\n<p>ofs &lt;&lt; &quot;写入的数据&quot;;</p>\n<blockquote>\n<p>有一个 cout 左移运算符往屏幕上输出东西，cout 叫输出流对象。ofs 代表的就是文件的输出流对象，往文件中输出内容</p>\n</blockquote>\n</li>\n<li>\n<p>关闭文件</p>\n<p>ofs.close();</p>\n</li>\n</ol>\n<p>文件打开方式：</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置：文件尾</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除，再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>注意：</strong> 文件打开方式可以配合使用，利用</td>\n<td>操作符</td>\n</tr>\n</tbody>\n</table>\n<p>** 例如：** 用二进制方式写文件  <code>ios::binary | ios:: out</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;fstream&gt;  // 1、包含头文件fstream\n\nint main() &#123;\n  // 2、创建流对象\n  ofstream ofs;\n\n  // 3、指定打开方式\n  ofs.open(&quot;test.txt&quot;, ios::out);\n  // 文件的存放位置取决于运行程序的当前工作目录\n  // 当前工作目录 是指程序运行时的目录。通常情况下，这个目录是在命令行中执行程序时所在的目录。\n\n  // 4、写内容\n  ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;\n  ofs &lt;&lt; &quot;姓别：男&quot; &lt;&lt; endl;\n  ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;\n\n  // 5、关闭文件\n  ofs.close();\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>文件操作必须包含头文件 fstream</li>\n<li>读文件可以利用 ofstream  ，或者 fstream 类</li>\n<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>\n<li>利用 &lt;&lt; 可以向文件中写数据</li>\n<li>操作完毕，要关闭文件</li>\n</ul>\n<h3 id=\"512-读文件\"><a class=\"anchor\" href=\"#512-读文件\">#</a> 5.1.2 读文件</h3>\n<p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>\n<p>读文件步骤如下：</p>\n<ol>\n<li>\n<p>包含头文件</p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li>\n<p>创建流对象</p>\n<p>ifstream ifs;</p>\n</li>\n<li>\n<p>打开文件并判断文件是否打开成功</p>\n<p>ifs.open (&quot;文件路径&quot;, 打开方式);</p>\n</li>\n<li>\n<p>读数据</p>\n<p>四种方式读取</p>\n</li>\n<li>\n<p>关闭文件</p>\n<p>ifs.close();</p>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;fstream&gt;  // 1、包含头文件\n\nint main() &#123;\n  // 2、创建流对象\n  ifstream ifs;\n\n  // 3、打开文件，并且判断是否打开成功\n  ifs.open(&quot;test.txt&quot;, ios::in);\n  if (!ifs.is_open()) &#123;\n    cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;\n    return 0;\n  &#125;\n\n  // 4、读数据\n  // 第一种：字符数组初始化全为0，把文件中的数据全都放在字符数组中\n  char buf[1024] = &#123;0&#125;;\n  while (ifs &gt;&gt; buf) &#123;  // 利用ifs右移运算符放到buf数组中，当数据全部读入之后while循环也会退出去。内部机制就是一行一行读，读到头了会返回一个假标志\n    cout &lt;&lt; buf &lt;&lt; endl;\n  &#125;\n  // 第二种：用ifs的成员函数getline一行一行获取\n  char buf2[1024] = &#123;0&#125;;\n  while (ifs.getline(buf2, sizeof(buf2))) &#123;\n    // getline要两个参数。第一个char*，把数据放到哪个地方，数组名就指向第一个元素的地址；第二个count，意思是最多读多少个字节数，准备了多大空间，也可以直接写1024，因为一个char占1个字节\n    cout &lt;&lt; buf2 &lt;&lt; endl;\n  &#125;\n  // 第三种：用全局的函数getline把所有数据放到C++的字符串中\n  string buf3;\n  while (getline(ifs, buf3)) &#123;\n    // 全局的getline要2个函数，第一个basic_istream基础的输入流对象，第二个读取到哪个字符串中\n    cout &lt;&lt; buf3 &lt;&lt; endl;\n  &#125;\n  // 第四种：把文件中所有数据一个一个字符全读出来，读完后放在字符里边。不推荐，因为一个一个字符读肯定没有一行一行读的速度快\n  char c;\n  while ((c = ifs.get()) != EOF) &#123;\n    // get函数每一次就读一个字符，把读到的字符放到字符c里边。最后判断是不是读到文件尾了，如果没有读到文件尾EOF(end of file)就一直读\n    cout &lt;&lt; c;\n  &#125;\n\n  // 5、关闭文件\n  ifs.close();\n\n  return 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>读文件可以利用 ifstream  ，或者 fstream 类</li>\n<li>利用 is_open 函数可以判断文件是否打开成功</li>\n<li>close 关闭文件</li>\n</ul>\n<h2 id=\"52-二进制文件\"><a class=\"anchor\" href=\"#52-二进制文件\">#</a> 5.2 二进制文件</h2>\n<p>以二进制的方式对文件进行读写操作</p>\n<p>打开方式要指定为 <mark>ios::binary</mark></p>\n<h3 id=\"521-写文件\"><a class=\"anchor\" href=\"#521-写文件\">#</a> 5.2.1 写文件</h3>\n<p>二进制方式写文件主要利用流对象调用成员函数 write</p>\n<p>函数原型 ： <code>ostream&amp; write(const char* buffer,int len);</code></p>\n<p>参数解释：字符指针 buffer 指向要写入的数据的地址。len 是要写多少数据（单位：字节）</p>\n<blockquote>\n<p>二进制操作文件就比较强大了，它不单单可以操纵内置的数据类型像 int /double/float，也可以操纵自定义的数据类型（比如类）写到文件里边</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">using namespace std;\n#include &lt;fstream&gt;//1、包含头文件\n#include &lt;string&gt;\n\nclass Person &#123;\n public:\n\tchar m_Name[64];// 用C语言的字符数组代表字符串\n\tint m_Age;\n&#125;;\n\nint main() &#123;\n\n\t/*2、创建输出流对象\n  ofstream ofs;\n  3、打开文件\n\tofs.open(&quot;person.txt&quot;, ios::out | ios::binary);*/\n\tofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);// ofstream类有构造函数，可以在创建对象的同时就指定路径以及打开方式\n\n\t//4、写文件\n  Person p = &#123;&quot;张三&quot;, 18&#125;;\n\tofs.write((const char*)&amp;p, sizeof(p));// &amp;p把数据的地址取到，并且强转成const char*。因为 write 方法的参数类型是 const char*，它期望接收一个指向字符数组的指针。const char* 是一个指向常量字符的指针，它表示指向字符数组的指针，且这些字符的内容不能被修改。使用 const 关键字可以确保指针指向的数据在使用过程中不会被意外修改。\n\n\t//5、关闭文件\n\tofs.close();\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>文件输出流对象 可以通过 write 函数，以二进制方式写数据</li>\n</ul>\n<h3 id=\"522-读文件\"><a class=\"anchor\" href=\"#522-读文件\">#</a> 5.2.2 读文件</h3>\n<p>二进制方式读文件主要利用流对象调用成员函数 read</p>\n<p>函数原型： <code>istream&amp; read(char* buffer, int len);</code></p>\n<p>参数解释：字符指针 buffer 指向把数据读到的地址。len 是准备的空间有多少（字节）</p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">#include &lt;fstream&gt;// 1、包含头文件\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass Person &#123;\n public:\n\tchar m_Name[64];\n\tint m_Age;\n&#125;;\n\nint main() &#123;\n\n  // 2、创建流对象 &amp; 3、打开文件\n\tifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);\n\tif (!ifs.is_open()) &#123;// 判断文件是否打开成功\n\t\tcout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;\n    return 0;\n\t&#125;\n\n  // 4、读文件\n\tPerson p;\n\tifs.read((char*)&amp;p, sizeof(p));\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;\n  \n  // 5、关闭文件\n  ifs.close();\n  \n\treturn 0;\n&#125;\n</code></pre>\n<ul>\n<li>文件输入流对象 可以通过 read 函数，以二进制方式读数据</li>\n</ul>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E4%B8%80.%E5%AE%9E%E6%88%98-%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://60saint.github.io/cpp/%E4%B8%80.%E5%AE%9E%E6%88%98-%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "一.实战-通讯录管理系统",
            "date_published": "2024-10-14T02:11:28.851Z",
            "content_html": "<h1 id=\"1-系统需求\"><a class=\"anchor\" href=\"#1-系统需求\">#</a> 1 系统需求</h1>\n<p>通讯录是一个可以记录亲人、好友信息的工具。</p>\n<p>本教程主要利用 C++ 来实现一个通讯录管理系统</p>\n<p>系统中需要实现的功能如下：</p>\n<ul>\n<li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录 1000 人</li>\n<li>显示联系人：显示通讯录中所有联系人信息</li>\n<li>删除联系人：按照姓名进行删除指定联系人</li>\n<li>查找联系人：按照姓名查看指定联系人信息</li>\n<li>修改联系人：按照姓名重新修改指定联系人</li>\n<li>清空联系人：清空通讯录中所有信息</li>\n<li>退出通讯录：退出当前使用的通讯录</li>\n</ul>\n<h1 id=\"2-菜单功能\"><a class=\"anchor\" href=\"#2-菜单功能\">#</a> 2 菜单功能</h1>\n<p><strong>功能描述：</strong> 用户选择功能的界面</p>\n<p>菜单界面效果如下图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410141310483.jpg\" alt=\"\" /></p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>封装函数显示该界面  如  <code>void showMenu()</code></li>\n<li>在 main 函数中调用封装好的函数</li>\n</ol>\n<p><strong>代码：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\n// 封装函数显示菜单界面\nvoid showMenu() &#123;\n  cout &lt;&lt; &quot;***************************&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*****  1、添加联系人  *****&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*****  2、显示联系人  *****&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*****  3、删除联系人  *****&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*****  4、查找联系人  *****&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*****  5、修改联系人  *****&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*****  6、清空联系人  *****&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;*****  0、退出通讯录  *****&quot; &lt;&lt; endl;\n  cout &lt;&lt; &quot;***************************&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n  showMenu();\n\n  // system(&quot;pause&quot;);// 按任意键继续。system(&quot;pause&quot;)暂停程序的执行，这在 Windows 系统上是有效的，但在 macOS 或 Linux 系统上并不存在 pause 命令，因此会出现 command not found 的错误\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);// 在终端中等待用户输入\n  return 0;\n&#125;\n</code></pre>\n<h1 id=\"3-退出功能\"><a class=\"anchor\" href=\"#3-退出功能\">#</a> 3 退出功能</h1>\n<p>功能描述：退出通讯录系统</p>\n<p>思路：根据用户不同的选择，进入不同的功能，可以选择 switch 分支结构，将整个架构进行搭建</p>\n<p>当用户选择 0 时候，执行退出，选择其他先不做操作，也不会退出程序</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n  int select = 0;  // 创建用户选择输入的变量\n\n  while (true) &#123;\n    // 菜单调用\n    showMenu();\n\n    cin &gt;&gt; select;\n    switch (select) &#123;\n      case 1:  // 添加联系人\n        break;\n      case 2:  // 显示联系人\n        break;\n      case 3:  // 删除联系人\n        break;\n      case 4:  // 查找联系人\n        break;\n      case 5:  // 修改联系人\n        break;\n      case 6:  // 清空联系人\n        break;\n      case 0:  // 退出通讯录\n        cout &lt;&lt; &quot;欢迎下次使用&quot; &lt;&lt; endl;\n        system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);  // 在终端中等待用户输入\n        return 0;\n        break;\n      default:\n        break;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>效果图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410141310423.jpg\" alt=\"\" /></p>\n<h1 id=\"4-添加联系人\"><a class=\"anchor\" href=\"#4-添加联系人\">#</a> 4 添加联系人</h1>\n<p>功能描述：</p>\n<p>实现添加联系人功能，联系人上限为 1000 人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p>\n<p>添加联系人实现步骤：</p>\n<ol>\n<li>\n<p>设计联系人结构体</p>\n</li>\n<li>\n<p>设计通讯录结构体</p>\n<blockquote>\n<p>有一个联系人了，她代表不了一个通讯录，一个人不能作为整体的通讯录。所以还要再设计一个通讯录结构体，去存放最多 1000 个联系人，这个通讯录还要记录当前已经有多少联系人了</p>\n</blockquote>\n</li>\n<li>\n<p>main 函数中创建通讯录</p>\n</li>\n<li>\n<p>封装添加联系人函数</p>\n</li>\n<li>\n<p>测试添加联系人功能</p>\n</li>\n</ol>\n<h2 id=\"41-设计联系人结构体\"><a class=\"anchor\" href=\"#41-设计联系人结构体\">#</a> 4.1 设计联系人结构体</h2>\n<p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p>\n<p>设计如下：</p>\n<pre><code class=\"language-C++\">#include &lt;string&gt;\n\n// 设计联系人结构体\nstruct Person &#123;\n  string m_Name;\n  int m_Sex;  // 性别：1男 2女\n  int m_Age;\n  string m_Phone;\n  string m_Addr;\n&#125;;\n</code></pre>\n<h2 id=\"42-设计通讯录结构体\"><a class=\"anchor\" href=\"#42-设计通讯录结构体\">#</a> 4.2 设计通讯录结构体</h2>\n<p>设计时候可以在通讯录结构体中，维护一个容量为 1000 的存放联系人的数组，并记录当前通讯录中联系人数量</p>\n<p>设计如下</p>\n<pre><code class=\"language-C++\">#define MAX 1000\n\n// 设计通讯录结构体\nstruct Addressbooks &#123;\n\tstruct Person personArray[MAX];\n\tint m_Size;\n&#125;;\n</code></pre>\n<h2 id=\"43-main函数中创建通讯录\"><a class=\"anchor\" href=\"#43-main函数中创建通讯录\">#</a> 4.3 main 函数中创建通讯录</h2>\n<p>添加联系人函数封装好后，在 main 函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p>\n<p>mian 函数起始位置添加：</p>\n<pre><code class=\"language-c++\">Addressbooks abs;  // 创建通讯录结构体变量\nabs.m_Size = 0;    // 初始化通讯录中当前人员个数\n</code></pre>\n<h2 id=\"44-封装添加联系人函数\"><a class=\"anchor\" href=\"#44-封装添加联系人函数\">#</a> 4.4 封装添加联系人函数</h2>\n<p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p>\n<p>添加联系人代码：</p>\n<pre><code class=\"language-C++\">void addPerson(Addressbooks* abs) &#123;\n  // 判断通讯录是否已满，如果满了就不再天际\n  if (abs-&gt;m_Size == MAX) &#123;\n    cout &lt;&lt; &quot;通讯录已满，无法添加！&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    string name;\n    cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;\n    cin &gt;&gt; name;\n    abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;\n\n    cout &lt;&lt; &quot;请输入性别：&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;1 --- 男&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;2 --- 女&quot; &lt;&lt; endl;\n    int sex = 0;\n    while (true) &#123;\n      cin &gt;&gt; sex;\n      if (sex == 1 || sex == 2) &#123;\n        abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;\n        break;\n      &#125;\n      cout &lt;&lt; &quot;输入有误，请重新输入&quot; &lt;&lt; endl;\n    &#125;\n\n    cout &lt;&lt; &quot;请输入年龄：&quot; &lt;&lt; endl;\n    int age = 0;\n    while (true) &#123;\n      cin &gt;&gt; age;\n      if (age &gt;= 0 &amp;&amp; age &lt;= 150) &#123;\n        abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;\n        break;\n      &#125;\n      cout &lt;&lt; &quot;输入有误，请重新输入&quot; &lt;&lt; endl;\n    &#125;\n\n    cout &lt;&lt; &quot;请输入联系电话：&quot; &lt;&lt; endl;\n    string phone;\n    cin &gt;&gt; phone;\n    abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;\n\n    cout &lt;&lt; &quot;请输入家庭住址：&quot; &lt;&lt; endl;\n    string address;\n    cin &gt;&gt; address;\n    abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;\n\n    // 更新通讯录人数\n    abs-&gt;m_Size++;\n\n    cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; endl;\n    system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n    system(&quot;clear&quot;);  // 清屏操作。Windows 系统中清屏使用 system(&quot;cls&quot;);\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"45-测试添加联系人功能\"><a class=\"anchor\" href=\"#45-测试添加联系人功能\">#</a> 4.5 测试添加联系人功能</h2>\n<p>选择界面中，如果玩家选择了 1，代表添加联系人，我们可以测试下该功能</p>\n<p>在 switch case 语句中，case1 里添加：</p>\n<pre><code class=\"language-C++\">case 1:  //添加联系人\n\taddPerson(&amp;abs);\n\tbreak;\n</code></pre>\n<p>测试效果如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410141307507.png\" alt=\"\" /></p>\n<h1 id=\"5-显示联系人\"><a class=\"anchor\" href=\"#5-显示联系人\">#</a> 5 显示联系人</h1>\n<p>功能描述：显示通讯录中已有的联系人信息</p>\n<p>显示联系人实现步骤：</p>\n<ol>\n<li>封装显示联系人函数</li>\n<li>测试显示联系人功能</li>\n</ol>\n<h2 id=\"51-封装显示联系人函数\"><a class=\"anchor\" href=\"#51-封装显示联系人函数\">#</a> 5.1 封装显示联系人函数</h2>\n<p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于 0，显示通讯录中信息</p>\n<p>显示联系人代码：</p>\n<pre><code class=\"language-C++\">// 2、显示所有联系人\nvoid showPerson(Addressbooks* abs) &#123;\n  // 判断通讯录中人数是否为0，如果为0，提示记录为空\n  if (abs-&gt;m_Size == 0) &#123;\n    cout &lt;&lt; &quot;当前记录为空&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    for (int i = 0; i &lt; abs-&gt;m_Size; i++) &#123;\n      cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; &quot;\\t&quot;;\n      cout &lt;&lt; &quot;性别：&quot; &lt;&lt; (abs-&gt;personArray[i].m_Sex == 1 ? &quot;男&quot; : &quot;女&quot;) &lt;&lt; &quot;\\t&quot;;\n      cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; &quot;\\t&quot;;\n      cout &lt;&lt; &quot;电话：&quot; &lt;&lt; abs-&gt;personArray[i].m_Phone &lt;&lt; &quot;\\t&quot;;\n      cout &lt;&lt; &quot;住址：&quot; &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;\n    &#125;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"52-测试显示联系人功能\"><a class=\"anchor\" href=\"#52-测试显示联系人功能\">#</a> 5.2 测试显示联系人功能</h2>\n<p>在 switch case 语句中，case 2 里添加</p>\n<pre><code class=\"language-C++\">case 2:  //显示联系人\n\tshowPerson(&amp;abs);\n\tbreak;\n</code></pre>\n<h1 id=\"6-删除联系人\"><a class=\"anchor\" href=\"#6-删除联系人\">#</a> 6 删除联系人</h1>\n<p>功能描述：按照姓名进行删除指定联系人</p>\n<p>删除联系人实现步骤：</p>\n<ol>\n<li>封装检测联系人是否存在</li>\n<li>封装删除联系人函数</li>\n<li>测试删除联系人功能</li>\n</ol>\n<h2 id=\"61-封装检测联系人是否存在\"><a class=\"anchor\" href=\"#61-封装检测联系人是否存在\">#</a> 6.1 封装检测联系人是否存在</h2>\n<p>设计思路：</p>\n<p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p>\n<p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回 - 1</p>\n<p>检测联系人是否存在代码：</p>\n<pre><code class=\"language-C++\">// 检测联系人是否存在，如果存在，返回联系人所在数组中的具体位置，不存在返回-1\nint isExist(Addressbooks* abs, string name) &#123;\n  for (int i = 0; i &lt; abs-&gt;m_Size; i++) &#123;\n    if (abs-&gt;personArray[i].m_Name == name) &#123;\n      return i;\n    &#125;\n  &#125;\n  return -1;\n&#125;\n</code></pre>\n<blockquote>\n<p>如果想在 case3 里直接测试 isExist 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 添加联系人</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">addPerson</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 显示联系人</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 删除联系人</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入删除联系人姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cin <span class=\"token operator\">>></span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isExist</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>abs<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"查无此人\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"找到此人\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译时 switch 会报错：</p>\n<pre><code>控制传输跳过的实例化:C/C++(546)\nmain.cpp(125, 5): 变量 &quot;name&quot; (已声明 所在行数:134)\n</code></pre>\n<p>这是因为在  <code>case 3</code>  中，在  <code>switch</code>  语句内重新声明了  <code>string name;</code> ，而在  <code>case 3</code>  之前的  <code>case 1</code>  中， <code>name</code>  变量已经被声明并使用过。</p>\n<p>在 C++ 中， <code>switch</code>  语句的每个  <code>case</code>  标签都在同一个作用域内，因此在同一个  <code>switch</code>  语句中不能重复声明同名变量。为了解决这个问题，可以将  <code>name</code>  的声明移到  <code>switch</code>  语句的外部，或者使用一个块作用域来限制变量的作用域。</p>\n<ol>\n<li>\n<p>方法一：将  <code>name</code>  的声明移到  <code>switch</code>  语句的外部，确保  <code>name</code>  变量只声明一次：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Addressbooks abs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  abs<span class=\"token punctuation\">.</span>m_Size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> select <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 name 的声明移到 switch 语句外部</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">showMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cin <span class=\"token operator\">>></span> select<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">addPerson</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入删除联系人姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cin <span class=\"token operator\">>></span> name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用之前声明的 name</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isExist</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>abs<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"查无此人\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"找到此人\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 查找联系人</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 修改联系人</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 清空联系人</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 退出通讯录</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"欢迎下次使用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read -n 1 -s -p 'Press any key to continue...'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在终端中等待用户输入</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：使用一个块作用域来限制变量的作用域</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入删除联系人姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  cin <span class=\"token operator\">>></span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isExist</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>abs<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"查无此人\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"找到此人\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n<h2 id=\"62-封装删除联系人函数\"><a class=\"anchor\" href=\"#62-封装删除联系人函数\">#</a> 6.2 封装删除联系人函数</h2>\n<p>根据用户输入的联系人判断该通讯录中是否有此人</p>\n<p>查找到进行删除，并提示删除成功</p>\n<p>查不到提示查无此人。</p>\n<pre><code class=\"language-C++\">// 3、删除指定联系人\nvoid deletePerson(Addressbooks* abs) &#123;\n  cout &lt;&lt; &quot;请输入您要删除的联系人&quot; &lt;&lt; endl;\n  string name;\n  cin &gt;&gt; name;\n\n  int ret = isExist(abs, name);\n  if (ret != -1) &#123;\n    // 查找到人，要进行删除操作\n    for (int i = ret; i &lt; abs-&gt;m_Size; i++) &#123;\n      abs-&gt;personArray[i] = abs-&gt;personArray[i + 1];\n    &#125;\n    abs-&gt;m_Size--;\n    cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"63-测试删除联系人功能\"><a class=\"anchor\" href=\"#63-测试删除联系人功能\">#</a> 6.3 测试删除联系人功能</h2>\n<p>在 switch case 语句中，case3 里添加：</p>\n<pre><code class=\"language-C++\">case 3:  //删除联系人\n\tdeletePerson(&amp;abs);\n\tbreak;\n</code></pre>\n<h2 id=\"7-查找联系人\"><a class=\"anchor\" href=\"#7-查找联系人\">#</a> 7 查找联系人</h2>\n<p>功能描述：按照姓名查看指定联系人信息</p>\n<p>查找联系人实现步骤</p>\n<ol>\n<li>封装查找联系人函数</li>\n<li>测试查找指定联系人</li>\n</ol>\n<h2 id=\"71-封装查找联系人函数\"><a class=\"anchor\" href=\"#71-封装查找联系人函数\">#</a> 7.1 封装查找联系人函数</h2>\n<p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p>\n<p>查找联系人代码：</p>\n<pre><code class=\"language-C++\">// 4、查找指定联系人信息\nvoid findPerson(Addressbooks* abs) &#123;\n  cout &lt;&lt; &quot;请输入您要查找的联系人&quot; &lt;&lt; endl;\n  string name;\n  cin &gt;&gt; name;\n\n  // 判断指定的联系人是否存在通讯录中\n  int ret = isExist(abs, name);\n  if (ret != -1) &#123;\n    cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; &quot;\\t&quot;;\n    cout &lt;&lt; &quot;性别：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Sex &lt;&lt; &quot;\\t&quot;;\n    cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; &quot;\\t&quot;;\n    cout &lt;&lt; &quot;电话：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; &quot;\\t&quot;;\n    cout &lt;&lt; &quot;住址：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"72-测试查找指定联系人\"><a class=\"anchor\" href=\"#72-测试查找指定联系人\">#</a> 7.2 测试查找指定联系人</h2>\n<p>在 switch case 语句中，case4 里添加：</p>\n<pre><code class=\"language-C++\">case 4:  //查找联系人\n\tfindPerson(&amp;abs);\n\tbreak;\n</code></pre>\n<h1 id=\"8-修改联系人\"><a class=\"anchor\" href=\"#8-修改联系人\">#</a> 8 修改联系人</h1>\n<p>功能描述：按照姓名重新修改指定联系人</p>\n<p>修改联系人实现步骤</p>\n<ol>\n<li>封装修改联系人函数</li>\n<li>测试修改联系人功能</li>\n</ol>\n<h2 id=\"81-封装修改联系人函数\"><a class=\"anchor\" href=\"#81-封装修改联系人函数\">#</a> 8.1 封装修改联系人函数</h2>\n<p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p>\n<p>修改联系人代码：</p>\n<pre><code class=\"language-C++\">// 5、修改指定联系人信息\nvoid modifyPerson(Addressbooks* abs) &#123;\n  cout &lt;&lt; &quot;请输入您要修改的联系人&quot; &lt;&lt; endl;\n  string name;\n  cin &gt;&gt; name;\n  int ret = isExist(abs, name);\n  if (ret != -1) &#123;\n    string name;\n    cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;\n    cin &gt;&gt; name;\n    abs-&gt;personArray[ret].m_Name = name;\n\n    cout &lt;&lt; &quot;请输入性别：&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;1 --- 男&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;2 --- 女&quot; &lt;&lt; endl;\n    int sex = 0;\n    while (true) &#123;\n      cin &gt;&gt; sex;\n      if (sex == 1 || sex == 2) &#123;\n        abs-&gt;personArray[ret].m_Sex = sex;\n        break;\n      &#125;\n      cout &lt;&lt; &quot;输入有误，请重新输入&quot; &lt;&lt; endl;\n    &#125;\n\n    cout &lt;&lt; &quot;请输入年龄：&quot; &lt;&lt; endl;\n    int age = 0;\n    cin &gt;&gt; age;\n    abs-&gt;personArray[ret].m_Age = age;\n\n    cout &lt;&lt; &quot;请输入联系电话&quot; &lt;&lt; endl;\n    string phone;\n    cin &gt;&gt; phone;\n    abs-&gt;personArray[ret].m_Phone = phone;\n\n    cout &lt;&lt; &quot;请输入家庭住址&quot; &lt;&lt; endl;\n    string address;\n    cin &gt;&gt; address;\n    abs-&gt;personArray[ret].m_Addr = address;\n\n    cout &lt;&lt; &quot;修改成功！&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;\n  &#125;\n\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"82-测试修改联系人功能\"><a class=\"anchor\" href=\"#82-测试修改联系人功能\">#</a> 8.2 测试修改联系人功能</h2>\n<p>在 switch case 语句中，case 5 里添加：</p>\n<pre><code class=\"language-C++\">case 5:  //修改联系人\n\tmodifyPerson(&amp;abs);\n\tbreak;\n</code></pre>\n<h1 id=\"9-清空联系人\"><a class=\"anchor\" href=\"#9-清空联系人\">#</a> 9 清空联系人</h1>\n<p>功能描述：清空通讯录中所有信息</p>\n<p>清空联系人实现步骤</p>\n<ol>\n<li>封装清空联系人函数</li>\n<li>测试清空联系人</li>\n</ol>\n<h2 id=\"91-封装清空联系人函数\"><a class=\"anchor\" href=\"#91-封装清空联系人函数\">#</a> 9.1 封装清空联系人函数</h2>\n<p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为 0，做逻辑清空即可。</p>\n<p>清空联系人代码：</p>\n<pre><code class=\"language-C++\">// 6、清空所有联系人\nvoid cleanPerson(Addressbooks* abs) &#123;\n  abs-&gt;m_Size = 0;  // 将当前记录联系人数量置为0，做逻辑青空操作\n  cout &lt;&lt; &quot;通讯录已清空&quot; &lt;&lt; endl;\n  system(&quot;read -n 1 -s -p 'Press any key to continue...'&quot;);\n  system(&quot;clear&quot;);\n&#125;\n</code></pre>\n<h2 id=\"92-测试清空联系人\"><a class=\"anchor\" href=\"#92-测试清空联系人\">#</a> 9.2 测试清空联系人</h2>\n<p>在 switch case 语句中，case 6 里添加：</p>\n<pre><code class=\"language-C++\">case 6:  //清空联系人\n\tcleanPerson(&amp;abs);\n\tbreak;\n</code></pre>\n<p><strong>至此，通讯录管理系统完成！</strong></p>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E4%BD%BF%E7%94%A8VS-Code%E8%BF%9B%E8%A1%8CC++%E5%87%BD%E6%95%B0%E5%88%86%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/",
            "url": "https://60saint.github.io/cpp/%E4%BD%BF%E7%94%A8VS-Code%E8%BF%9B%E8%A1%8CC++%E5%87%BD%E6%95%B0%E5%88%86%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/",
            "title": "使用VS Code进行C++函数分文件编写",
            "date_published": "2024-10-13T05:56:30.093Z",
            "content_html": "<h1 id=\"下载安装cc-project-generator扩展\"><a class=\"anchor\" href=\"#下载安装cc-project-generator扩展\">#</a> 下载安装：C/C++ Project Generator 扩展</h1>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131350485.png\" alt=\"\" /></p>\n<p>下载安装完成后，按 ctrl+shift+p 打开命令面板，输入 create C++ project，按回车后可以选择保存工程的文件夹</p>\n<p>创建好会后生成几个目录：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131351250.png\" alt=\"\" /></p>\n<p>.vscode：里面放一些配置文件之类的，如 launch.json、setting.json、tasks.json</p>\n<p>include：存放头文件</p>\n<p>lib：存放项目所依赖的外部库文件</p>\n<p>output：存放生成的可执行文件</p>\n<p>src：存放源码文件</p>\n<p>还有个 Makefile 文件</p>\n<h1 id=\"实例验证\"><a class=\"anchor\" href=\"#实例验证\">#</a> 实例验证</h1>\n<p>在 include 文件夹中新建一个.h 文件：swap.h，声明了一个函数，功能为交换两个数的值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 函数的声明</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 src 文件夹中新建 swap.cpp、main.cpp</p>\n<p>swap.cpp 如下：写函数具体的实现逻辑</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"swap.h\"</span><span class=\"token comment\">// 需要包含 swap 头文件</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数的定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>main.cpp 如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"swap.h\"</span><span class=\"token comment\">// 需要包含 swap 头文件</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>运行：</strong></p>\n<p>在终端输入 <code>make</code>  命令编译后可以直接执行：</p>\n<p>output/main</p>\n<p>./output/main</p>\n<p>.\\output/main</p>\n<p>output\\main</p>\n<p>./output\\main</p>\n<p>.\\output\\main</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131356791.png\" alt=\"\" /></p>\n<p>当然也可以直接按 F5 运行</p>\n<p><mark>但记住不要使用右键 Run Code 运行，好像是会识别不了头文件，会报错</mark></p>\n",
            "tags": [
                "C++",
                "C++",
                "VSCode",
                "环境"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/%E4%B8%80.C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "url": "https://60saint.github.io/cpp/%E4%B8%80.C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "title": "一.C++基础语法入门",
            "date_published": "2024-10-08T16:00:00.000Z",
            "content_html": "<h1 id=\"1-c初识\"><a class=\"anchor\" href=\"#1-c初识\">#</a> 1 C++ 初识</h1>\n<h2 id=\"11-第一个c程序\"><a class=\"anchor\" href=\"#11-第一个c程序\">#</a> 1.1 第一个 C++ 程序</h2>\n<p>编写一个 C++ 程序总共分为 4 个步骤</p>\n<ul>\n<li>创建项目</li>\n<li>创建文件</li>\n<li>编写代码</li>\n<li>运行程序</li>\n</ul>\n<h3 id=\"111-创建项目\"><a class=\"anchor\" href=\"#111-创建项目\">#</a> 1.1.1 创建项目</h3>\n<p>Visual Studio 是我们用来编写 C++ 程序的主要工具，我们先将它打开</p>\n<h3 id=\"112-创建文件\"><a class=\"anchor\" href=\"#112-创建文件\">#</a> 1.1.2 创建文件</h3>\n<p>右键源文件，选择添加 -&gt; 新建项</p>\n<p>给 C++ 文件起个名称，然后点击添加即可。</p>\n<h3 id=\"113-编写代码\"><a class=\"anchor\" href=\"#113-编写代码\">#</a> 1.1.3 编写代码</h3>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n  cout &lt;&lt; &quot;hello World&quot; &lt;&lt; endl;\n  return 0;\n&#125;\n</code></pre>\n<h3 id=\"114-运行程序\"><a class=\"anchor\" href=\"#114-运行程序\">#</a> 1.1.4 运行程序</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410091447921.png\" alt=\"\" /></p>\n<h2 id=\"12-注释\"><a class=\"anchor\" href=\"#12-注释\">#</a> 1.2 注释</h2>\n<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>： <code>// 描述信息</code>\n<ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，<mark>对该行代码说明</mark></li>\n</ul>\n</li>\n<li><strong>多行注释</strong>：  <code>/* 描述信息 */</code>\n<ul>\n<li>通常放在一段代码的上方，<mark>对该段代码做整体说明</mark></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h2 id=\"13-变量\"><a class=\"anchor\" href=\"#13-变量\">#</a> 1.3 变量</h2>\n<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<blockquote>\n<p>假设一段内存中存放了数据 10，请问有什么办法拿到这个数据呢？</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410091520764.png\" alt=\"\" /></p>\n<p>方法一：记录内存地址编号，通常用十六进制的数字。有了这个编号，就能拿到 10。问题来了：假设有 100 个数字，就要记 100 个地址编号，太麻烦了</p>\n<p>方法二：给这段内存起一个名称比如 a，它就能代表这段内存，能拿到 10。非常方便，不用记地址编号。这个 a 就是变量，方便我们管理内存空间</p>\n</blockquote>\n<p><strong>语法</strong>： <code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n\t//变量的定义\n\t//变量创建的语法：数据类型  变量名 = 初始值\n\tint a = 10;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C++ 在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h2 id=\"14-常量\"><a class=\"anchor\" href=\"#14-常量\">#</a> 1.4 常量</h2>\n<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++ 定义常量两种方式</p>\n<ol>\n<li>\n<p><strong>#define</strong> 宏常量：  <code>#define 常量名 常量值</code></p>\n<ul>\n<li><mark>通常在文件上方定义</mark>，表示一个常量</li>\n</ul>\n</li>\n<li>\n<p><strong>const</strong> 修饰的变量  <code>const 数据类型 常量名 = 常量值</code></p>\n<ul>\n<li><mark>通常在变量定义前加关键字 const</mark>，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\n// 1、#define宏常量\n#define Day 7\n\nint main() &#123;\n  // Day = 14; // 错误，Day是常量，一旦修改就会报错\n  cout &lt;&lt; &quot;一周总共有：&quot; &lt;&lt; Day &lt;&lt; &quot;天&quot; &lt;&lt; endl;\n\n  // 2、const修饰的变量\n  const int month = 12;\n  // month = 14; // 错误，const修饰的变量也称为常量\n  cout &lt;&lt; &quot;一年总共有：&quot; &lt;&lt; month &lt;&lt; &quot;个月份&quot; &lt;&lt; endl;\n\n  return 0;\n&#125;\n</code></pre>\n<h2 id=\"15-关键字\"><a class=\"anchor\" href=\"#15-关键字\">#</a> 1.5 关键字</h2>\n<p>** 作用：** 关键字是 C++ 中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++ 关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++的关键字，否则会产生歧义。</code></p>\n<h2 id=\"16-标识符命名规则\"><a class=\"anchor\" href=\"#16-标识符命名规则\">#</a> 1.6 标识符命名规则</h2>\n<p><strong>作用</strong>：C++ 规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n<h1 id=\"2-数据类型\"><a class=\"anchor\" href=\"#2-数据类型\">#</a> 2 数据类型</h1>\n<p>C++ 规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>\n<h2 id=\"21-整型\"><a class=\"anchor\" href=\"#21-整型\">#</a> 2.1 整型</h2>\n<p><strong>作用</strong>：整型变量表示的是<mark>整数类型</mark>的数据</p>\n<p>C++ 中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>short (短整型)</td>\n<td>2 字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int (整型)</td>\n<td>4 字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long (长整形)</td>\n<td>Windows 为 4 字节，Linux 为 4 字节 (32 位)，8 字节 (64 位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long (长长整形)</td>\n<td>8 字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 1、短整型（-32768 ～ 32767）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">short</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">32768</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 2、整型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">32768</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> num1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> num2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410091600205.png\" alt=\"\" /></p>\n</blockquote>\n<blockquote>\n<p>日常开发中，int 最常用，如果没有特殊情况，基本上用 int 表示整数就足够了</p>\n</blockquote>\n<h2 id=\"22-sizeof关键字\"><a class=\"anchor\" href=\"#22-sizeof关键字\">#</a> 2.2 sizeof 关键字</h2>\n<p>** 作用：** 利用 sizeof 关键字可以<mark>统计数据类型所占内存大小</mark>（单位：字节）</p>\n<p><strong>语法：</strong>  <code>sizeof( 数据类型 / 变量)</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n  short num1 = 10;\n\tcout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(num1) &lt;&lt; endl;// 2\n\tcout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;// 4\n\tcout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;// 8\n  long long num2 = 10;\n\tcout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(num2) &lt;&lt; endl;// 8\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><strong>整型结论</strong>：<mark>short &lt; int &lt;= long &lt;= long long</mark></p>\n</blockquote>\n<h2 id=\"23-实型浮点型\"><a class=\"anchor\" href=\"#23-实型浮点型\">#</a> 2.3 实型（浮点型）</h2>\n<p><strong>作用</strong>：用于<mark>表示小数</mark></p>\n<p>浮点型变量分为两种：</p>\n<ol>\n<li>单精度 float</li>\n<li>双精度 double</li>\n</ol>\n<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th><strong>有效数字范围</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float</td>\n<td>4 字节</td>\n<td>7 位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 字节</td>\n<td>15～16 位有效数字</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>C++ 中有效数字不单只统计小数点后的数，小数点前的整数部分也算有效数字。比如 3.14 有三位有效数字</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\tfloat f1 = 3.1415926f;// 若不写f，编辑器会默认把这个小数当成双精度。如果用float接收它，编辑器会把3.14转换成单精度，多做一步转换\n\tdouble d1 = 3.1415926;\n\tcout &lt;&lt; f1 &lt;&lt; endl;\n\tcout &lt;&lt; d1&lt;&lt; endl;\n\tcout &lt;&lt; &quot;float  sizeof = &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;double sizeof = &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;\n\n\t//科学计数法\n\tfloat f2 = 3e2; // 3 * 10 ^ 2 \n\tcout &lt;&lt; &quot;f2 = &quot; &lt;&lt; f2 &lt;&lt; endl;\n\tfloat f3 = 3e-2;  // 3 * 10 ^ (-2)\n\tcout &lt;&lt; &quot;f3 = &quot; &lt;&lt; f3 &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410091646185.png\" alt=\"\" /></p>\n<p>C++ 中默认情况下，输出一个小数<strong>最多</strong>显示 6 位有效数字。如果想查看更多的有效数字，需要额外做一些配置</p>\n</blockquote>\n<h2 id=\"24-字符型\"><a class=\"anchor\" href=\"#24-字符型\">#</a> 2.4 字符型</h2>\n<p>** 作用：** 字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong> <code>char ch = 'a';</code></p>\n<blockquote>\n<p>注意 1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意 2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul>\n<li>C 和 C++ 中字符型变量只占用<mark> 1 个字节</mark>。</li>\n<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCII 编码放入到存储单元</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t// 1、字符型变量创建方式\n\tchar ch = 'a';\n\tcout &lt;&lt; ch &lt;&lt; endl;\n  \n  // 2、字符型变量所占内存大小\n\tcout &lt;&lt; sizeof(char) &lt;&lt; endl;// 1\n\n  // 3、字符型变量常见错误\n\t// ch2 = &quot;b&quot;; // 错误，不可以用双引号\n\t// ch2 = 'abcde'; // 错误，单引号内只能引用一个字符\n\n  // 4、字符型变量对应ASCII编码\n\tcout &lt;&lt; (int)ch &lt;&lt; endl;// 查看字符a对应的ASCII码。打印97\n\tch = 97;// 可以直接用ASCII给字符型变量赋值\n\tcout &lt;&lt; ch &lt;&lt; endl;// a\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>ASCII 码表格：</p>\n<table>\n<thead>\n<tr>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>控制字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>&quot;</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>/</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`        |</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody>\n</table>\n<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>\n<ul>\n<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>\n<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>\n</ul>\n<h2 id=\"25-转义字符\"><a class=\"anchor\" href=\"#25-转义字符\">#</a> 2.5 转义字符</h2>\n<p>** 作用：** 用于表示一些<mark>不能显示出来的 ASCII 字符</mark></p>\n<p>现阶段我们常用的转义字符有： <code> \\n  \\\\  \\t</code></p>\n<table>\n<thead>\n<tr>\n<th><strong>转义字符</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>ASCII</strong> 码值（十进制）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警报</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格 (BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页 (FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td><strong>换行 (LF) ，将当前位置移到下一行开头</strong></td>\n<td><strong>010</strong></td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车 (CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td><strong>水平制表 (HT)  （跳到下一个 TAB 位置）</strong></td>\n<td><strong>009</strong></td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表 (VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td><strong>\\\\</strong></td>\n<td><strong>代表一个反斜线字符 &quot;&quot;</strong></td>\n<td><strong>092</strong></td>\n</tr>\n<tr>\n<td>'</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>?</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>数字 0</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>8 进制转义字符，d 范围 0~7</td>\n<td>3 位 8 进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>16 进制转义字符，h 范围 0<sub>9，a</sub>f，A~F</td>\n<td>3 位 16 进制</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t\n\tcout &lt;&lt; &quot;\\\\&quot; &lt;&lt; endl;// 输出&quot;\\&quot;会报错\n  \n  cout &lt;&lt; &quot;\\tHello&quot; &lt;&lt; endl;// Hello前8个空格\n\tcout &lt;&lt; &quot;aaaa\\tHello&quot; &lt;&lt; endl;// aaaa和Hello中间4个空格，空格有多长取决于\\t前面占了几个字符。如果前面是aaa，则会拼接5个空格，一共加起来是8个字符\n  cout &lt;&lt; &quot;aaaaaaaa\\tHello&quot; &lt;&lt; endl;// aaaaaaaa和Hello中间8个空格\n  // 一般来说水平制表符的最大用处就是在输出窗口有对齐效果，可以整齐输出数据\n  \n\tcout &lt;&lt; &quot;\\n&quot; &lt;&lt; endl;// C++中endl;作换行。在C语言用转义字符\\n作换行\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"26-字符串型\"><a class=\"anchor\" href=\"#26-字符串型\">#</a> 2.6 字符串型</h2>\n<p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol>\n<li>\n<p><strong>C 风格字符串</strong>：  <code>char 变量名[] = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tchar str1[] = &quot;hello world&quot;;\n\tcout &lt;&lt; str1 &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C 风格的字符串要用双引号括起来</p>\n</blockquote>\n</li>\n<li>\n<p><strong>C++ 风格字符串</strong>：   <code>string  变量名 = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main() &#123;\n\n\tstring str = &quot;hello world&quot;;\n\tcout &lt;&lt; str &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C++ 风格字符串，需要加入头文件 ==#include &lt;string&gt;==</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"27-布尔类型-bool\"><a class=\"anchor\" href=\"#27-布尔类型-bool\">#</a> 2.7 布尔类型 bool</h2>\n<p>** 作用：** 布尔数据类型代表真或假的值</p>\n<p>bool 类型只有两个值：</p>\n<ul>\n<li>true  --- 真（本质是 1）</li>\n<li>false --- 假（本质是 0）</li>\n</ul>\n<p><strong>bool 类型占<mark> 1 个字节</mark>大小</strong></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tbool flag = true;\n\tcout &lt;&lt; flag &lt;&lt; endl; // 1\n\n\tflag = false;\n\tcout &lt;&lt; flag &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; &quot;size of bool = &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; // 1\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"28-数据的输入\"><a class=\"anchor\" href=\"#28-数据的输入\">#</a> 2.8 数据的输入</h2>\n<p><strong>作用：用于从键盘获取数据</strong></p>\n<p>** 关键字：**cin</p>\n<p><strong>语法：</strong>  <code>cin &gt;&gt; 变量 </code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main()&#123;\n\n\t//整型输入\n\tint a = 0;\n\tcout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; a;\n\tcout &lt;&lt; &quot;整型变量a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t//浮点型输入\n\tfloat f = 3.14f;\n\tcout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; f;\n\tcout &lt;&lt; &quot;浮点型变量f = &quot; &lt;&lt; f &lt;&lt; endl;\n\n\t//字符型输入\n\tchar ch = 0;\n\tcout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; ch;\n\tcout &lt;&lt; &quot;字符型变量ch = &quot; &lt;&lt; ch &lt;&lt; endl;\n\n\t//字符串型输入\n\tstring str;\n\tcout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; str;\n\tcout &lt;&lt; &quot;字符串str = &quot; &lt;&lt; str &lt;&lt; endl;\n\n\t//布尔类型输入\n\tbool flag = true;\n\tcout &lt;&lt; &quot;请输入布尔型变量：&quot;  &lt;&lt; endl;\n\tcin &gt;&gt; flag;\n  // 输入任何字符串或字符，都输出0。输入非0的任何数字，都输出1；输入0，输出0\n\tcout &lt;&lt; &quot;布尔类型flag = &quot; &lt;&lt; flag &lt;&lt; endl;\n  \n\treturn EXIT_SUCCESS;\n&#125;\n</code></pre>\n<h1 id=\"3-运算符\"><a class=\"anchor\" href=\"#3-运算符\">#</a> 3 运算符</h1>\n<p>** 作用：** 用于执行代码的运算</p>\n<p>本章我们主要讲解以下几类运算符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符类型</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>算术运算符</td>\n<td>用于处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>用于将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>用于表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>用于根据表达式的值返回真值或假值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"31-算术运算符\"><a class=\"anchor\" href=\"#31-算术运算符\">#</a> 3.1 算术运算符</h2>\n<p><strong>作用</strong>：用于处理四则运算</p>\n<p>算术运算符包括以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>10 + 5</td>\n<td>15</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10 - 5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10 * 5</td>\n<td>50</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模 (取余)</td>\n<td>10 % 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2; b=++a;</td>\n<td>a=3; b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2; b=a++;</td>\n<td>a=3; b=2;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>前置递减</td>\n<td>a=2; b=--a;</td>\n<td>a=1; b=1;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>后置递减</td>\n<td>a=2; b=a--;</td>\n<td>a=1; b=2;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">// 加减乘除\nint main() &#123;\n\n\tint a1 = 10;\n\tint b1 = 3;\n\tcout &lt;&lt; a1 + b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 - b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 * b1 &lt;&lt; endl;\n  \n\tcout &lt;&lt; a1 / b1 &lt;&lt; endl;// 输出3。两个整数相除结果依然是整数\n\tint a2 = 10;\n\tint b2 = 20;\n\tcout &lt;&lt; a2 / b2 &lt;&lt; endl;// 0\n  \n\tint a3 = 10;\n\tint b3 = 0;\n\t//cout &lt;&lt; a3 / b3 &lt;&lt; endl; // 报错，除数不可以为0\n\n\t//两个小数可以相除\n\tdouble d1 = 0.5;\n\tdouble d2 = 0.22;\n\tcout &lt;&lt; d1 / d2 &lt;&lt; endl;// 2.27273，运算的结果也可以是小数\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：在除法运算中，除数不能为 0</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">//取模\nint main() &#123;\n\n\tint a1 = 10;\n\tint b1 = 3;\n\tcout &lt;&lt; 10 % 3 &lt;&lt; endl;// 1\n\n\tint a2 = 10;\n\tint b2 = 20;\n\tcout &lt;&lt; a2 % b2 &lt;&lt; endl;// 10\n\n\tint a3 = 10;\n\tint b3 = 0;\n\t//cout &lt;&lt; a3 % b3 &lt;&lt; endl; // 报错。取模运算时，除数也不能为0\n\n\t//两个小数不可以取模\n\tdouble d1 = 3.14;\n\tdouble d2 = 1.1;\n\t//cout &lt;&lt; d1 % d2 &lt;&lt; endl;// 报错\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：只有整型变量可以进行取模运算</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">//递增\nint main() &#123;\n\n\t//后置递增\n\tint a = 10;\n\ta++; //等价于a = a + 1\n\tcout &lt;&lt; a &lt;&lt; endl; // 11\n\n\t//前置递增\n\tint b = 10;\n\t++b;\n\tcout &lt;&lt; b &lt;&lt; endl; // 11\n\n\t//前置和后置的区别\n\t//前置递增先对变量进行++，再计算表达式\n\tint a2 = 10;\n\tint b2 = ++a2 * 10;\n  cout &lt;&lt; a2 &lt;&lt; endl;// 11\n\tcout &lt;&lt; b2 &lt;&lt; endl;// 110\n\t//后置递增先计算表达式，后对变量进行++\n\tint a3 = 10;\n\tint b3 = a3++ * 10;\n  cout &lt;&lt; a3 &lt;&lt; endl;// 11\n\tcout &lt;&lt; b3 &lt;&lt; endl;// 100\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：前置递增先对变量进行 ++，再计算表达式，后置递增相反</p>\n</blockquote>\n<h2 id=\"32-赋值运算符\"><a class=\"anchor\" href=\"#32-赋值运算符\">#</a> 3.2 赋值运算符</h2>\n<p>** 作用：** 用于将表达式的值赋给变量</p>\n<p>赋值运算符包括以下几个符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=2; b=3;</td>\n<td>a=2; b=3;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加等于</td>\n<td>a=0; a+=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减等于</td>\n<td>a=5; a-=3;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘等于</td>\n<td>a=2; a*=2;</td>\n<td>a=4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除等于</td>\n<td>a=4; a/=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>模等于</td>\n<td>a=3; a%2;</td>\n<td>a=1;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//赋值运算符\nint main() &#123;\n  \n\t// =\n\tint a = 10;\n\ta = 100;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 100\n\n\t// +=\n\ta = 10;\n\ta += 2; // a = a + 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 12\n\n\t// -=\n\ta = 10;\n\ta -= 2; // a = a - 2\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 8\n\n\t// *=\n\ta = 10;\n\ta *= 2; // a = a * 2\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 20\n\n\t// /=\n\ta = 10;\n\ta /= 2;  // a = a / 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 5\n\n\t// %=\n\ta = 10;\n\ta %= 2;  // a = a % 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 0\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"33-比较运算符\"><a class=\"anchor\" href=\"#33-比较运算符\">#</a> 3.3 比较运算符</h2>\n<p>** 作用：** 用于表达式的比较，并返回一个真值或假值</p>\n<p>比较运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>相等于</td>\n<td>4 == 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>4 != 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>4 &lt; 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>4 &gt; 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>4 &lt;= 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n  // 不加小括号会报错。由于运算符有优先级的比较，想让比较运算符先做运算，就加小括号，先运算小括号内，再运算后面的输出换行\n\tcout &lt;&lt; (a == b) &lt;&lt; endl; // 0 \n\tcout &lt;&lt; (a != b) &lt;&lt; endl; // 1\n\tcout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0\n\tcout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1\n\tcout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0\n\tcout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C 和 C++ 语言的比较运算中， <mark>“真” 用数字 “1” 来表示， “假” 用数字 “0” 来表示。</mark></p>\n</blockquote>\n<h2 id=\"34-逻辑运算符\"><a class=\"anchor\" href=\"#34-逻辑运算符\">#</a> 3.4 逻辑运算符</h2>\n<p>** 作用：** 用于根据表达式的值返回真值或假值</p>\n<p>逻辑运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非</td>\n<td>!a</td>\n<td>如果 a 为假，则！a 为真；  如果 a 为真，则！a 为假。</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>如果 a 和 b 都为真，则结果为真，否则为假。</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>如果 a 和 b 有一个为真，则结果为真，二者都为假时，结果为假。</td>\n</tr>\n</tbody>\n</table>\n<p>** 示例 1：** 逻辑非</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 非\nint main() &#123;\n\n\tint a = 10;\n\n\tcout &lt;&lt; !a &lt;&lt; endl; // 0\n\tcout &lt;&lt; !!a &lt;&lt; endl; // 1\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 真变假，假变真</p>\n</blockquote>\n<p>** 示例 2：** 逻辑与</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 与\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1\n\n\ta = 10;\n\tb = 0;\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 \n\n\ta = 0;\n\tb = 0;\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：逻辑<mark>与</mark>运算符总结： <mark>同真为真，其余为假</mark></p>\n</blockquote>\n<p>** 示例 3：** 逻辑或</p>\n<pre><code class=\"language-c++\">//逻辑运算符  --- 或\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1\n\n\ta = 10;\n\tb = 0;\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1 \n\n\ta = 0;\n\tb = 0;\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 0\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>逻辑<mark>或</mark>运算符总结： <mark>同假为假，其余为真</mark></p>\n</blockquote>\n<h1 id=\"4-程序流程结构\"><a class=\"anchor\" href=\"#4-程序流程结构\">#</a> 4 程序流程结构</h1>\n<p>C/C++ 支持最基本的三种程序运行结构：<mark>顺序结构、选择结构、循环结构</mark></p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h2 id=\"41-选择结构\"><a class=\"anchor\" href=\"#41-选择结构\">#</a> 4.1 选择结构</h2>\n<h3 id=\"411-if语句\"><a class=\"anchor\" href=\"#411-if语句\">#</a> 4.1.1 if 语句</h3>\n<p>** 作用：** 执行满足条件的语句</p>\n<p>if 语句的三种形式</p>\n<ul>\n<li>\n<p>单行格式 if 语句</p>\n</li>\n<li>\n<p>多行格式 if 语句</p>\n</li>\n<li>\n<p>多条件的 if 语句</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>单行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111430734.png\" alt=\"\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n  // 选择结构-单行if语句\n  // 输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印\n\n  int score = 0;\n  cout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;\n  cin &gt;&gt; score;\n  cout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;\n\n  // if语句\n  // 注意事项，在if判断语句后面，不要加分号\n  if (score &gt; 600) &#123;\n    cout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;\n  &#125;\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：if 条件表达式后不要加分号</p>\n</blockquote>\n</li>\n<li>\n<p>多行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111430464.png\" alt=\"\" /></p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入考试分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  cin <span class=\"token operator\">>></span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我考上了一本大学\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我未考上一本大学\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>多条件的 if 语句： <code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></p>\n<p>!!<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzYwc0FJTlQvaW1hZ2VzQGxhdGVzdC8yMDI0MTAxMTE0MzEyNzkucG5n\"></span></p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入考试分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  cin <span class=\"token operator\">>></span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我考上了一本大学\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我考上了二本大学\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我考上了三本大学\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我未考上本科\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>嵌套 if 语句</strong>：在 if 语句中，可以嵌套使用 if 语句，达到更精确的条件判断</p>\n<p>案例需求：</p>\n<ul>\n<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>\n<li>分数如果大于 600 分视为考上一本，大于 500 分考上二本，大于 400 考上三本，其余视为未考上本科；</li>\n<li>在一本分数中，如果大于 700 分，考入北大，大于 650 分，考入清华，大于 600 考入人大。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\n  int score = 0;\n  cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\n  cin &gt;&gt; score;\n\n  if (score &gt; 600) &#123;\n    cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\n    if (score &gt; 700) &#123;\n      cout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;\n    &#125; else if (score &gt; 650) &#123;\n      cout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;\n    &#125; else &#123;\n      cout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;\n    &#125;\n\n  &#125; else if (score &gt; 500) &#123;\n    cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;\n  &#125; else if (score &gt; 400) &#123;\n    cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;\n  &#125;\n\n  return 0;\n&#125;\n</code></pre>\n<p><strong>练习案例：</strong> 三只小猪称体重</p>\n<p>有三只小猪 ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111431908.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>解题思路：</p>\n<p>先判断 A 和 B 谁重</p>\n<ol>\n<li>A 重 -&gt; 让 A 和 C 比较\n<ul>\n<li>A 重 -&gt; 结果是 A 最重</li>\n<li>C 重 -&gt; 结果是 C 最重</li>\n</ul>\n</li>\n<li>B 重 -&gt; 让 B 和 C 比较\n<ul>\n<li>B 重 -&gt; 结果是 B 最重</li>\n<li>C 重 -&gt; 结果是 C 最重</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 1、创建三只小猪的体重变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 2、让用户输入三只小猪的重量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入小猪A的体重\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cin <span class=\"token operator\">>></span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入小猪B的体重\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  cin <span class=\"token operator\">>></span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入小猪C的体重\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  cin <span class=\"token operator\">>></span> num3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 3、判断哪只最重</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猪A最重\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猪C最重\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">></span> num3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猪B最重\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猪C最重\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"412-三目运算符\"><a class=\"anchor\" href=\"#412-三目运算符\">#</a> 4.1.2 三目运算符</h3>\n<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong> <code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式 1 的值为真，执行表达式 2，并返回表达式 2 的结果；</p>\n<p>如果表达式 1 的值为假，执行表达式 3，并返回表达式 3 的结果。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n  // 创建三个变量 a b c，将a和b做比较，将变量大的值赋值给变量c\n\tint a = 10;\n\tint b = 20;\n\tint c = 0;\n\tc = a &gt; b ? a : b;\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\n\n\t// C++中三目运算符返回的是变量,可以继续赋值\n\t(a &gt; b ? a : b) = 100;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 10\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;// 100\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;// 20\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：和 if 语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>\n</blockquote>\n<h3 id=\"413-switch语句\"><a class=\"anchor\" href=\"#413-switch语句\">#</a> 4.1.3 switch 语句</h3>\n<p>** 作用：** 执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">switch (表达式) &#123;\n  case 结果1:\n    执行语句;\n    break;\n  case 结果2:\n    执行语句;\n    break;\n\t...\n\tdefault:\n    执行语句;\n    break;\n&#125;\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n  // 请给电影评分\n  // 10 ~ 9   经典\n  // 8 ~ 7    非常好\n  // 6 ~ 5    一般\n  // 5分以下   烂片\n\n  int score = 0;\n  cout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;\n  cin &gt;&gt; score;\n\n  switch (score) &#123;\n    case 10:\n    case 9:\n      cout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;\n      break;\n    case 8:\n    case 7:\n      cout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;\n      break;\n    case 6:\n    case 5:\n      cout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;\n      break;\n    default:\n      cout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;\n      break;\n  &#125;\n  // 如果去掉所有break;，输入10的话就会向下依次打印&quot;经典&quot;、&quot;非常好&quot;、&quot;一般&quot;、&quot;烂片&quot;，输入6的话就会依次向下打印&quot;一般&quot;、&quot;烂片&quot;\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意 1：switch 语句括号中表达式类型只能是整型或者字符型</p>\n</blockquote>\n<blockquote>\n<p>注意 2：case 里如果没有 break，那么程序会一直向下执行</p>\n</blockquote>\n<blockquote>\n<p>总结：与 if 语句比，对于多条件判断时，switch 的结构清晰，执行效率比 if 执行速度高一些，缺点是 switch 不可以判断区间</p>\n</blockquote>\n<h2 id=\"42-循环结构\"><a class=\"anchor\" href=\"#42-循环结构\">#</a> 4.2 循环结构</h2>\n<h3 id=\"421-while循环语句\"><a class=\"anchor\" href=\"#421-while循环语句\">#</a> 4.2.1 while 循环语句</h3>\n<p>** 作用：** 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> while(循环条件)&#123; 循环语句 &#125;</code></p>\n<p><strong>解释：</strong><mark>只要循环条件的结果为真，就执行循环语句</mark></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111746169.png\" alt=\"\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint num = 0;\n\twhile (num &lt; 10) &#123;\n\t\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\t&#125;\n\t\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>\n</blockquote>\n<p><strong>while 循环练习案例：</strong><mark>猜数字</mark></p>\n<p>** 案例描述：** 系统随机生成一个 1 到 100 之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111746526.jpg\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 添加随机数种子，利用当前系统时间生成随机数，若没有随机数种子则每次运行代码随机数都一样</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//time 需要包含 ctime 系统时间头文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 1、系统生成随机数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//rand () % 100 意思是随机数对 100 取余，即生成 0～99 随机数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 2、玩家进行猜测</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 玩家输入的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  cin <span class=\"token operator\">>></span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">!=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 3、判断玩家的猜测</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"猜测过大\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"猜测过小\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cin <span class=\"token operator\">>></span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"恭喜您猜对了\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 猜对：退出游戏</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 猜错：提示猜的结果过大或过小，重新返回第 2 步</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"422-dowhile循环语句\"><a class=\"anchor\" href=\"#422-dowhile循环语句\">#</a> 4.2.2 do...while 循环语句</h3>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong>  <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>\n<p>** 注意：** 与 while 的区别在于<mark> do...while 会先执行一次循环语句</mark>，再判断循环条件</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111747727.png\" alt=\"\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint num = 0;\n\n\tdo &#123;\n\t\tcout &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\t&#125; while (num &lt; 10);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：与 while 循环区别在于，do...while 先执行一次循环语句，再判断循环条件</p>\n</blockquote>\n<p><strong>练习案例：水仙花数</strong></p>\n<p>** 案例描述：** 水仙花数是指一个 3 位数，它的每个位上的数字的 3 次幂之和等于它本身</p>\n<p>例如：1^3 + 5^3+ 3^3 = 153</p>\n<p>请利用 do...while 语句，求出所有 3 位数中的水仙花数</p>\n<blockquote>\n<p>解题思路：</p>\n<ol>\n<li>循环遍历所有的三位数（100～999）</li>\n<li>在所有的三位数中找到水仙花数\n<ol>\n<li>获取个位：num % 10，对数字取模于 10 可以获取个位</li>\n<li>获取十位：(num / 10) %10，先整除于 10，得到两位数，再取模于 10，得到十位</li>\n<li>获取百位：num / 100，直接整除于 100，获取百位</li>\n<li>判断：个位 ^3 + 十位 ^3 + 百位 ^3 = 本身</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> unit <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tens <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> hundreds <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unit <span class=\"token operator\">*</span> unit <span class=\"token operator\">*</span> unit <span class=\"token operator\">+</span> tens <span class=\"token operator\">*</span> tens <span class=\"token operator\">*</span> tens <span class=\"token operator\">+</span> hundreds <span class=\"token operator\">*</span> hundreds <span class=\"token operator\">*</span> hundreds <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"423-for循环语句\"><a class=\"anchor\" href=\"#423-for循环语句\">#</a> 4.2.3 for 循环语句</h3>\n<p>** 作用：** 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n  \n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>详解：</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111747827.png\" alt=\"\" /></p>\n<blockquote>\n<p>注意：for 循环中的表达式，要用分号进行分隔</p>\n</blockquote>\n<blockquote>\n<p>总结：while , do...while, for 都是开发中常用的循环语句，for 循环结构比较清晰，比较常用</p>\n</blockquote>\n<p><strong>练习案例：敲桌子</strong></p>\n<p>案例描述：从 1 开始数到数字 100， 如果数字个位含有 7，或者数字十位含有 7，或者该数字是 7 的倍数，我们打印敲桌子，其余数字直接打印输出。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111753044.gif\" alt=\"\" /></p>\n<blockquote>\n<p>解题思路：</p>\n<ol>\n<li>\n<p>循环遍历 1 到 100 这些数字</p>\n</li>\n<li>\n<p>从这 100 个数字中找到特殊数字，改为 “敲桌子”</p>\n<p>特殊数字：</p>\n<ul>\n<li>7 的倍数，num % 7 = 0</li>\n<li>个位有 7，num % 10 = 7</li>\n<li>十位有 7，num / 10 = 7</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 如果是 7 的倍数、个位有 7、十位有 7，打印敲桌子</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"敲桌子\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 如果不是特殊数字，才打印数字</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"424-嵌套循环\"><a class=\"anchor\" href=\"#424-嵌套循环\">#</a> 4.2.4 嵌套循环</h3>\n<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>\n<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111829354.png\" alt=\"\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//外层循环执行1次，内层循环执行1轮\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tfor (int j = 0; j &lt; 10; j++) &#123;\n\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n  \n\treturn 0;\n&#125;\n</code></pre>\n<p>** 练习案例：** 乘法口诀表</p>\n<p>案例描述：利用嵌套循环，实现九九乘法表</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111831686.jpg\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 乘法口诀表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" x \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"43-跳转语句\"><a class=\"anchor\" href=\"#43-跳转语句\">#</a> 4.3 跳转语句</h2>\n<h3 id=\"431-break语句\"><a class=\"anchor\" href=\"#431-break语句\">#</a> 4.3.1 break 语句</h3>\n<p><strong>作用:</strong> 用于跳出<mark>选择结构</mark>或者<mark>循环结构</mark></p>\n<p>break 使用的时机：</p>\n<ul>\n<li>出现在 switch 条件语句中，作用是终止 case 并跳出 switch</li>\n<li>出现在循环语句中，作用是跳出当前的循环语句</li>\n<li>出现在嵌套循环中，跳出最近的内层循环语句</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//1、在switch 语句中使用break\n\tcout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;\n\n\tint num = 0;\n\tcin &gt;&gt; num;\n\tswitch (num) &#123;\n    case 1:\n      cout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;\n      break;\n    case 2:\n      cout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;\n      break;\n    case 3:\n      cout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;\n      break;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//2、在循环语句中用break\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tif (i == 5) &#123;\n\t\t\tbreak; //跳出循环语句\n\t\t&#125;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//在嵌套循环语句中使用break，退出内层循环\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tfor (int j = 0; j &lt; 10; j++) &#123;\n\t\t\tif (j == 5) &#123;\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\t\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"432-continue语句\"><a class=\"anchor\" href=\"#432-continue语句\">#</a> 4.3.2 continue 语句</h3>\n<p>** 作用：** 在<mark>循环语句</mark>中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfor (int i = 0; i &lt; 100; i++) &#123;\n\t\tif (i % 2 == 0) &#123;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：continue 并没有使整个循环终止，而 break 会跳出循环</p>\n</blockquote>\n<h3 id=\"433-goto语句\"><a class=\"anchor\" href=\"#433-goto语句\">#</a> 4.3.3 goto 语句</h3>\n<p>** 作用：** 可以无条件跳转语句</p>\n<p><strong>语法：</strong>  <code>goto 标记;</code></p>\n<p>** 解释：** 如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tcout &lt;&lt; &quot;1&quot; &lt;&lt; endl;\n\n\tgoto FLAG;\n\n\tcout &lt;&lt; &quot;2&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;3&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;4&quot; &lt;&lt; endl;\n\n\tFLAG:\n\tcout &lt;&lt; &quot;5&quot; &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：在程序中不建议使用 goto 语句，以免造成程序流程混乱</p>\n</blockquote>\n<h1 id=\"5-数组\"><a class=\"anchor\" href=\"#5-数组\">#</a> 5 数组</h1>\n<h2 id=\"51-概述\"><a class=\"anchor\" href=\"#51-概述\">#</a> 5.1 概述</h2>\n<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p>** 特点 1：** 数组中的每个<mark>数据元素都是相同的数据类型</mark></p>\n<p>** 特点 2：** 数组是由<mark>连续的内存</mark>位置组成的</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410111905201.png\" alt=\"\" /></p>\n<h2 id=\"52-一维数组\"><a class=\"anchor\" href=\"#52-一维数组\">#</a> 5.2 一维数组</h2>\n<h3 id=\"521-一维数组定义方式\"><a class=\"anchor\" href=\"#521-一维数组定义方式\">#</a> 5.2.1 一维数组定义方式</h3>\n<p>一维数组定义的三种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 数组长度 ];</code></li>\n<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>\n<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>\n</ol>\n<p>示例</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//定义方式1\n\t//数据类型 数组名[元素个数];\n\tint score[10];\n\t//利用下标赋值\n\tscore[0] = 100;\n\tscore[1] = 99;\n\tscore[2] = 85;\n\t//利用下标输出\n\tcout &lt;&lt; score[0] &lt;&lt; endl;\n\tcout &lt;&lt; score[1] &lt;&lt; endl;\n\tcout &lt;&lt; score[2] &lt;&lt; endl;\n\n\t//第二种定义方式\n\t//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;\n\t//如果&#123;&#125;内不足10个数据，剩余数据用0补全\n\tint score2[10] = &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;;\n\t//逐个输出\n\t//cout &lt;&lt; score2[0] &lt;&lt; endl;\n\t//cout &lt;&lt; score2[1] &lt;&lt; endl;\n\t//一个一个输出太麻烦，因此可以利用循环进行输出\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tcout &lt;&lt; score2[i] &lt;&lt; endl;\n\t&#125;\n\n\t//定义方式3\n\t//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;\n\tint score3[] = &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tcout &lt;&lt; score3[i] &lt;&lt; endl;\n\t&#125;\n  \n  int score4[]; // 报错：不允许使用不完整的类型。如果不能知道数组中有多少个数据元素，这个数组是不可以定义的。定义数组的时候，必须有初始长度\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>\n</blockquote>\n<blockquote>\n<p>总结 2：数组中下标从 0 开始索引</p>\n</blockquote>\n<h3 id=\"522-一维数组数组名\"><a class=\"anchor\" href=\"#522-一维数组数组名\">#</a> 5.2.2 一维数组数组名</h3>\n<p>一维数组名称的<strong>用途</strong>：</p>\n<ol>\n<li>可以统计整个数组在内存中的长度</li>\n<li>可以获取数组在内存中的首地址</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n  // 数组名用途\n  // 1、可以统计整个数组在内存中的长度\n  int arr[10] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;\n  cout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;// 40\n  cout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;// 4\n  cout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;// 10\n\n  // 2、可以通过数组名获取到数组首地址\n  cout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; arr &lt;&lt; endl;// 0x16fdfef40\n  // &amp;是取址符\n  cout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; &amp;arr[0] &lt;&lt; endl;// 0x16fdfef40\n  cout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; &amp;arr[1] &lt;&lt; endl;// 0x16fdfef44\n\n  // arr = 100; 错误，数组名是常量，因此不可以赋值\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>(int) arr、(int)&amp;arr [0]、(int)&amp;arr [1] 报错：  <code>cast from pointer to smaller type 'int' loses information</code>  ，这是因为试图将指针类型转换为 int 类型，这可能导致信息丢失。尤其是在 64 位系统上，指针的大小通常是 8 字节，而 int 只有 4 字节</p>\n<p>为了避免在 64 位系统上可能出现的信息丢失问题，应该使用  <code>uintptr_t</code>  或  <code>size_t</code>  类型来存储指针地址。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint></span> <span class=\"token comment\">// 包含 uintptr_t</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组首地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>arr <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 6171914048</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组中第一个元素地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 6171914048</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组中第二个元素地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 6171914052</span></pre></td></tr></table></figure><ul>\n<li><code>uintptr_t</code>  不是用来将十六进制数转换为十进制数的，而是一个无符号整数类型，足够大以存储指针，适用于指针与整数之间的转换。</li>\n<li>在输出指针地址时，使用  <code>uintptr_t</code>  可以确保在不同平台上都能正确处理指针大小。它的大小与平台相关，通常在 32 位系统上是 32 位，在 64 位系统上是 64 位。</li>\n<li>可以安全地将指针转换为  <code>uintptr_t</code>  类型，然后再转换回指针，而不会丢失信息。</li>\n</ul>\n</blockquote>\n<p>注意：数组名是常量，不可以赋值</p>\n<p>总结 1：直接打印数组名，可以查看数组所占内存的首地址</p>\n<p>总结 2：对数组名进行 sizeof，可以获取整个数组占内存空间的大小</p>\n<p><strong>练习案例 1</strong>：五只小猪称体重</p>\n<p><strong>案例描述：</strong></p>\n<p>在一个数组中记录了五只小猪的体重，如：int arr [5] = {300,350,200,400,250};</p>\n<p>找出并打印最重的小猪体重。</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410121030406.png\" alt=\"\" /></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 1、创建 5 只小猪体重的数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 2、从数组中找到最大值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 先认定一个最大值为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 如果访问的数组中的元素比我认定的最大值还要大，更新最大值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"最重的小猪体重为：\"</span> <span class=\"token operator\">&lt;&lt;</span> max <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 3、打印最大值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>** 练习案例 2：** 数组元素逆置</p>\n<p>** 案例描述：** 请声明一个 5 个元素的数组，并且将元素逆置.</p>\n<p>(如原数组元素为：1,3,2,5,4; 逆置后输出结果为：4,5,2,3,1);</p>\n<blockquote>\n<p>分析：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410121119103.jpg\" alt=\"\" /></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 1、创建数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2、实现逆置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 2.1 记录起始下标位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 2.2 记录结束下标位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 2.3 起始下标与结束下标的元素呼唤</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 2.4 起始位置 ++，结束位置 --</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 2.5 循环执行 2.1 操作，直到起始位置 >= 结束位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 3、打印逆置后的数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组元素逆置后：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"523-冒泡排序\"><a class=\"anchor\" href=\"#523-冒泡排序\">#</a> 5.2.3 冒泡排序</h3>\n<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>\n<ol>\n<li>比较相邻的元素，保证大的放后面。</li>\n<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值冒泡到最后面。</li>\n<li>重复以上的步骤，每次比较次数 - 1，直到不需要比较</li>\n</ol>\n<p><img data-src=\"assets/1541905327273.png\" alt=\"1541905327273\" /></p>\n<p><strong>示例：</strong> 将数组 {4,2,8,0,5,7,1,3,9} 进行升序排序</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410121800895.jpg\" alt=\"\" /></p>\n</blockquote>\n<pre><code class=\"language-C++\">int main() &#123;\n  int arr[9] = &#123;4, 2, 8, 0, 5, 7, 1, 3, 9&#125;;\n\n  // 外层循环执行一次代表元素从前到后排序一轮，排序轮数为元素个数-1\n  for (int i = 0; i &lt; 9 - 1; i++) &#123;\n    // 内层循环对比相邻元素，一轮的对比次数=元素个数-当前轮数-1\n    for (int j = 0; j &lt; 9 - i - 1; j++) &#123;\n      if (arr[j] &gt; arr[j + 1]) &#123;\n        int temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      &#125;\n    &#125;\n  &#125;\n\n  cout &lt;&lt; &quot;排序后：&quot; &lt;&lt; endl;\n  for (int i = 0; i &lt; 9; i++) &#123;\n    cout &lt;&lt; arr[i] &lt;&lt; endl;\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"53-二维数组\"><a class=\"anchor\" href=\"#53-二维数组\">#</a> 5.3 二维数组</h2>\n<p>二维数组就是在一维数组上，多加一个维度。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410121800519.jpg\" alt=\"\" /></p>\n<h3 id=\"531-二维数组定义方式\"><a class=\"anchor\" href=\"#531-二维数组定义方式\">#</a> 5.3.1 二维数组定义方式</h3>\n<p>二维数组定义的四种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n</ol>\n<blockquote>\n<p>建议：以上 4 种定义方式，利用<mark>第二种更加直观，提高代码的可读性</mark></p>\n</blockquote>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//方式1  \n\t//数组类型 数组名 [行数][列数]\n\tint arr[2][3];\n\tarr[0][0] = 1;\n\tarr[0][1] = 2;\n\tarr[0][2] = 3;\n\tarr[1][0] = 4;\n\tarr[1][1] = 5;\n\tarr[1][2] = 6;\n\tfor (int i = 0; i &lt; 2; i++) &#123;\n\t\tfor (int j = 0; j &lt; 3; j++) &#123;\n\t\t\tcout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\n\t//方式2 \n\t//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;\n\tint arr2[2][3] = &#123;\n\t\t&#123;1,2,3&#125;,\n\t\t&#123;4,5,6&#125;\n\t&#125;;\n  for (int i = 0; i &lt; 2; i++) &#123;\n    for (int j = 0; j &lt; 3; j++) &#123;\n      cout &lt;&lt; arr2[i][j] &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n  &#125;\n\n\t//方式3\n\t//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\n\tint arr3[2][3] = &#123; 1,2,3,4,5,6 &#125;; \n\n\t//方式4 \n\t//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\n\tint arr4[][3] = &#123; 1,2,3,4,5,6 &#125;;\n  \n  int arr5[][] = &#123; 1, 2, 3, 4, 5, 6&#125;;\n  // 报错：数组不能包含此类型的元素。不知道几行几列，可以是1行6列、6行1列、2行3列、3行2列，有很多种排列组合方式，没法计算\n  int arr6[2][] = &#123;1, 2, 3, 4, 5, 6&#125;;\n  /* 报错：1.数组不能包含此类型的元素\n  2.初始值设定项值太多&lt;error-type&gt; [2]&#123;(&lt;error-type&gt;)&lt;error-constant&gt;, (&lt;error-type&gt;)&lt;error-constant&gt;&#125;。\n  */\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>在定义多维数组时，必须指定所有维度的大小，除了第一维（行数）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，定义了一个有 2 行 3 列的二维数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，行数可以省略，列数必须指定</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> arr6<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，列数未指定</span></pre></td></tr></table></figure><p><strong>为什么行数可以省略而列数不可以</strong></p>\n<ul>\n<li><strong>内存布局</strong>：在内存中，数组是以连续的方式存储的。为了计算每个元素的地址，编译器需要知道每一行的列数，以便在访问时能够正确地跳转到下一行的起始位置。</li>\n<li><strong>灵活性</strong>：允许省略行数使得数组的定义更加灵活，尤其是在<mark>处理动态数据</mark>时。你可以根据需要<mark>定义不同数量的行，而列数通常是固定的</mark>。</li>\n</ul>\n</blockquote>\n<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>\n<h3 id=\"532-二维数组数组名\"><a class=\"anchor\" href=\"#532-二维数组数组名\">#</a> 5.3.2 二维数组数组名</h3>\n<ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//二维数组数组名\n\tint arr[2][3] = &#123;\n\t\t&#123;1,2,3&#125;,\n\t\t&#123;4,5,6&#125;\n\t&#125;;\n\n\tcout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;// 24。2行3列一共6个数据，每个整型数据占用的内存空间是4字节\n\tcout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;\n\n\t//地址\n\tcout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;// 首地址和第一行地址一样\n\tcout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;// 第二行和第一行差12\n\tcout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;// 第一个元素地址和首地址、第一行地址一样\n\tcout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;// 第二个元素地址和第一个元素地址差4\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：二维数组名就是这个数组的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：对二维数组名进行 sizeof 时，可以获取整个二维数组占用的内存空间大小</p>\n</blockquote>\n<h2 id=\"533-二维数组应用案例\"><a class=\"anchor\" href=\"#533-二维数组应用案例\">#</a> <strong>5.3.3 二维数组应用案例</strong></h2>\n<p><strong>考试成绩统计：</strong></p>\n<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语文</th>\n<th>数学</th>\n<th>英语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td>100</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>90</td>\n<td>50</td>\n<td>100</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>60</td>\n<td>70</td>\n<td>80</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>分析：</p>\n<ol>\n<li>创建二维数组，3 行 3 列</li>\n<li>统计考试成绩，让每行的 3 列相加，统计出总和</li>\n</ol>\n</blockquote>\n<p><strong>参考答案：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main() &#123;\n\n\tint scores[3][3] = &#123;\n\t\t&#123;100,100,100&#125;,\n\t\t&#123;90,50,100&#125;,\n\t\t&#123;60,70,80&#125;,\n\t&#125;;\n\n\tstring names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;\n\n\tfor (int i = 0; i &lt; 3; i++) &#123;\n\t\tint sum = 0;\n\t\tfor (int j = 0; j &lt; 3; j++) &#123;\n\t\t\tsum += scores[i][j];\n\t\t&#125;\n\t\tcout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<h1 id=\"6-函数\"><a class=\"anchor\" href=\"#6-函数\">#</a> 6 函数</h1>\n<h2 id=\"61-概述\"><a class=\"anchor\" href=\"#61-概述\">#</a> 6.1 概述</h2>\n<p>** 作用：** 将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h2 id=\"62-函数的定义\"><a class=\"anchor\" href=\"#62-函数的定义\">#</a> 6.2 函数的定义</h2>\n<p>函数的定义一般主要有 5 个步骤：</p>\n<p>1、返回值类型</p>\n<p>2、函数名</p>\n<p>3、参数列表</p>\n<p>4、函数体语句</p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">返回值类型 函数名 （参数列表） &#123;\n\n       函数体语句\n\n       return表达式\n\n&#125;\n</code></pre>\n<ul>\n<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>\n<li>函数名：给函数起个名称</li>\n<li>参数列表：使用该函数时，传入的数据</li>\n<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>\n<li>return 表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>\n</ul>\n<p>** 示例：** 定义一个加法函数，实现两个数相加</p>\n<pre><code class=\"language-C++\">//函数定义\nint add(int num1, int num2) &#123;\n\tint sum = num1 + num2;\n\treturn sum;\n&#125;\n</code></pre>\n<h2 id=\"63-函数的调用\"><a class=\"anchor\" href=\"#63-函数的调用\">#</a> 6.3 函数的调用</h2>\n<p>** 功能：** 使用定义好的函数</p>\n<p><strong>语法：</strong> <code> 函数名（参数）</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数定义\nint add(int num1, int num2) &#123;\n  // 函数定义中的时候，num1和num2并没有真实数据，只是一个形式上的参数，简称形参\n\tint sum = num1 + num2;\n\treturn sum;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\t// main函数中调用add函数\n\tint sum = add(a, b);// 调用时的a，b称为实际参数，简称实参。当调用函数的时候，实参的值会传递给形参\n\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\n\n\ta = 100;\n\tb = 100;\n\tsum = add(a, b);\n\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>\n</blockquote>\n<h2 id=\"64-值传递\"><a class=\"anchor\" href=\"#64-值传递\">#</a> 6.4 值传递</h2>\n<ul>\n<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>\n<li>值传递时，<mark>如果形参发生任何改变，并不会影响实参</mark></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">void swap(int num1, int num2) &#123;\n\tcout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;// 10\n\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;// 20\n\n\tint temp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n\n\tcout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;// 20\n\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;// 10\n\n\t// return; 当函数声明时候，不需要返回值，可以不写return。也可以写return;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n\tswap(a, b);\n\n\tcout &lt;&lt; &quot;mian中的 a = &quot; &lt;&lt; a &lt;&lt; endl;// 10\n\tcout &lt;&lt; &quot;mian中的 b = &quot; &lt;&lt; b &lt;&lt; endl;// 20\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410121830156.png\" alt=\"\" /></p>\n<ol>\n<li>创建数据 a，在内存上开辟 4 个字节给变量 a</li>\n<li>在内存上创建一个变量 b=20</li>\n<li>把 a 和 b 调入函数体的时候，num1 和 num2 也是要分配空间的，跟 a 和 b 不是一个东西</li>\n<li>在内存上再分配 2 块内存，一个是 num1，还有一个是 num2。由于是值传递，会把 a 的数据给 num1，b 的数据给 num2</li>\n<li>下面的代码中，int temp = num1;，temp 也是一个变量，也要分配一块临时的内存空间 ，这个临时的空间等于 num1</li>\n<li>num2 的值赋值给了 num1</li>\n<li>temp 的值给了 num2，temp 值没有发生改变，还是 10。</li>\n<li>当  <code>swap</code>  函数返回时，所有在该函数中定义的局部变量（ <code>num1</code> 、 <code>num2</code> 、 <code>temp</code> ）都会被销毁，释放它们占用的内存。</li>\n<li>在程序执行期间，a 和 b 从头到尾都没发生改变</li>\n</ol>\n</blockquote>\n<p>总结： 值传递时，形参是修饰不了实参的</p>\n<h2 id=\"65-函数的常见样式\"><a class=\"anchor\" href=\"#65-函数的常见样式\">#</a> <strong>6.5 函数的常见样式</strong></h2>\n<p>常见的函数样式有 4 种</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数常见样式\n//1、 无参无返\nvoid test01() &#123;\n\t//void a = 10; //无类型不可以创建变量,原因无法分配内存\n\tcout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;\n&#125;\n\n//2、 有参无返\nvoid test02(int a) &#123;\n\tcout &lt;&lt; &quot;this is test02 a = &quot; &lt;&lt; a &lt;&lt; endl;\n&#125;\n\n//3、无参有返\nint test03() &#123;\n\tcout &lt;&lt; &quot;this is test03&quot; &lt;&lt; endl;\n\treturn 10;\n&#125;\n\n//4、有参有返\nint test04(int a) &#123;\n\tcout &lt;&lt; &quot;this is test04 a = &quot; &lt;&lt; a &lt;&lt; endl;\n\treturn a;\n&#125;\n\nint main() &#123;\n  // 无参无返函数调用\n  test01();// &quot;this is test01&quot;\n  \n  // 有参无返函数调用\n  test02(100);// this is test02 a = 100\n  \n  // 无参有返函数调用\n  int num1 = test03();// this is test03\n  cout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; ednl;// num1 = 10\n  \n  // 有参有返函数调用\n  int num2 = test04(10000);// this is test04 a = 10000\n  cout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;// num2 = 10000\n  \n  return 0;\n&#125;\n</code></pre>\n<h2 id=\"66-函数的声明\"><a class=\"anchor\" href=\"#66-函数的声明\">#</a> 6.6 函数的声明</h2>\n<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">// 提前告诉编译器函数的存在，可以利用函数的声明\n// 声明可以多次，定义只能一次\n// 声明\nint max(int a, int b);\nint max(int a, int b);\n// 定义\nint max(int a, int b) &#123;\n\treturn a &gt; b ? a : b;\n&#125;\n\nint main() &#123;\n\n\tint a = 100;\n\tint b = 200;\n\n\tcout &lt;&lt; max(a, b) &lt;&lt; endl;// 20\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li>如果把 main 函数写在最前面，把 max 函数的声明和定义写到后边，运行会报错： <code>&quot;max&quot;: 找不到标识符</code> ，双击报错信息定位到 main 函数里的调用 max 语句。因为代码是一行一行执行的，所以执行到 main 中调用 max 那行的时候，看不到 max 在哪，往下执行到 max 定义语句的时候才能找到它，发现得比较晚</li>\n<li>只要把 max 函数的声明放在 main 前面，不管函数的定义放在 main 前还是 main 后，都不会报错</li>\n</ul>\n</blockquote>\n<h2 id=\"67-函数的分文件编写\"><a class=\"anchor\" href=\"#67-函数的分文件编写\">#</a> 6.7 函数的分文件编写</h2>\n<p>** 作用：** 让代码结构更加清晰</p>\n<p>函数分文件编写一般有 4 个步骤</p>\n<ol>\n<li>创建后缀名为.h 的头文件</li>\n<li>创建后缀名为.cpp 的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n<p><strong>示例：</strong></p>\n<p>swap.h 文件：</p>\n<pre><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\n//实现两个数字交换的函数声明\nvoid swap(int a, int b);\n</code></pre>\n<p>swap.cpp 文件：</p>\n<pre><code class=\"language-C++\">#include &quot;swap.h&quot;\n\n// 函数的定义\nvoid swap(int a, int b) &#123;\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n&#125;\n</code></pre>\n<p>main.cpp 文件：</p>\n<pre><code class=\"language-C++\">#include &quot;swap.h&quot;\nint main() &#123;\n\n\tint a = 100;\n\tint b = 200;\n\tswap(a, b);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h1 id=\"7-指针\"><a class=\"anchor\" href=\"#7-指针\">#</a> 7 指针</h1>\n<h2 id=\"71-指针的基本概念\"><a class=\"anchor\" href=\"#71-指针的基本概念\">#</a> 7.1 指针的基本概念</h2>\n<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<ul>\n<li>\n<p>内存编号是从 0 开始记录的，一般用十六进制数字表示</p>\n</li>\n<li>\n<p>可以利用指针变量保存地址</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131425245.png\" alt=\"\" /></p>\n<p>如果知道了地址编号是多少，也可以拿到 10 这个数据。可以再创建一个变量，而这个变量中保存的数据是 0x0000，即数据 10 的地址。这个变量就可以称为指针变量，通常写成 p 来代表一个指针</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"72-指针变量的定义和使用\"><a class=\"anchor\" href=\"#72-指针变量的定义和使用\">#</a> 7.2 指针变量的定义和使用</h2>\n<p>指针变量定义语法：  <code>数据类型 * 变量名；</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//1、定义指针\n\tint a = 10; //定义整型变量a\n\t//指针定义的语法： 数据类型 * 指针变量名;\n\tint* p;\n\t//指针变量赋值\n\tp = &amp;a; //让指针记录变量a的地址\n\tcout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址\n\tcout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p\n\n\t//2、使用指针\n\t//可以通过解引用的方式来找到指针指向的内存中的数据\n  //指针前加 * 代表解引用\n\tcout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;\n  *p = 1000;// 通过指针可以修改指向的数据，也可以访问指向的数据\n  cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 1000\n  cout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;// 1000\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>指针变量和普通变量的区别</p>\n<ul>\n<li>普通变量存放的是数据，指针变量存放的是地址</li>\n<li>指针变量可以通过 &quot;*&quot; 操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>\n</ul>\n<blockquote>\n<p>总结 1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结 3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<h2 id=\"73-指针所占内存空间\"><a class=\"anchor\" href=\"#73-指针所占内存空间\">#</a> 7.3 指针所占内存空间</h2>\n<p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n  int a = 10;\n\n  int* p = &amp;a;  // 指针指向数据a的地址\n\n  cout &lt;&lt; *p &lt;&lt; endl;  // 10。* 解引用\n  cout &lt;&lt; sizeof(p) &lt;&lt; endl;// 8\n  cout &lt;&lt; sizeof(char *) &lt;&lt; endl;// 8\n  cout &lt;&lt; sizeof(float *) &lt;&lt; endl;// 8\n  cout &lt;&lt; sizeof(double *) &lt;&lt; endl;// 8\n\n  return 0;\n&#125;\n</code></pre>\n<p>在 C++ 中，指针的大小取决于系统的架构（32 位或 64 位）。</p>\n<ul>\n<li><strong>32 位系统</strong>：指针类型的变量通常占用 <strong>4 个字节</strong>（32 位）。</li>\n<li><strong>64 位系统</strong>：指针类型的变量通常占用 <strong>8 个字节</strong>（64 位）。</li>\n</ul>\n<blockquote>\n<p>指针的大小是由地址空间的大小决定的。在 32 位系统中，地址空间限制在 2^32（即 4 GB），因此需要 4 个字节来表示一个地址。而在 64 位系统中，地址空间可以达到 2^64（即非常大的空间），因此需要 8 个字节来表示一个地址</p>\n</blockquote>\n<h2 id=\"74-空指针和野指针\"><a class=\"anchor\" href=\"#74-空指针和野指针\">#</a> 7.4 空指针和野指针</h2>\n<p><strong>空指针</strong>：指针变量指向内存中编号为 0 的空间</p>\n<p>** 用途：** 初始化指针变量</p>\n<p>** 注意：** 空指针指向的内存是不可以访问的</p>\n<p><strong>示例 1：空指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//指针变量p指向内存地址编号为0的空间\n\tint* p = NULL;\n\n\t//访问空指针报错 \n\t//内存编号0 ~255为系统占用内存，不允许用户访问\n  *p = 100;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n  /*\n  以上两行代码报错皆为：\n  发生异常: Exception\n  EXC_BAD_ACCESS (code=1, address=0x0)\n  */\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p><strong>示例 2：野指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n  // 指针变量p指向内存地址编号为0x1100的空间\n  int* p = (int*)0x1100;\n\n  /* 访问野指针报错：\n  发生异常: Exception\n  EXC_BAD_ACCESS (code=1, address=0x1100)\n  */\n  cout &lt;&lt; *p &lt;&lt; endl;\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>0x1100 是随便拿一指针在内存中指向的编号，但并没有申请这块地址，所以没有访问权限、没有权利操纵这块内存</p>\n</blockquote>\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n<h2 id=\"75-const修饰指针\"><a class=\"anchor\" href=\"#75-const修饰指针\">#</a> 7.5 const 修饰指针</h2>\n<p>const 修饰指针有三种情况</p>\n<ol>\n<li>\n<p>const 修饰指针   --- 常量指针</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131729050.png\" alt=\"\" /></p>\n</blockquote>\n</li>\n<li>\n<p>const 修饰常量   --- 指针常量</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131731965.png\" alt=\"\" /></p>\n</blockquote>\n</li>\n<li>\n<p>const 既修饰指针，又修饰常量</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131732600.png\" alt=\"\" /></p>\n</blockquote>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\t// 1、const修饰指针，指针指向可以改，指针指向的值不可以更改\n\tconst int* p1 = &amp;a; \n\tp1 = &amp;b; //正确\n\t//*p1 = 100;  //报错\n\t\n\n\t// 2、const修饰常量，指针指向不可以改，指针指向的值可以更改\n\tint* const p2 = &amp;a;\n\t//p2 = &amp;b; //错误\n\t*p2 = 100; //正确\n\n  // 3、const修饰指针和常量\n\tconst int* const p3 = &amp;a;\n\t//p3 = &amp;b; //错误\n\t//*p3 = 100; //错误\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>技巧：看 const 右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h2 id=\"76-指针和数组\"><a class=\"anchor\" href=\"#76-指针和数组\">#</a> 7.6 指针和数组</h2>\n<p>** 作用：** 利用指针访问数组中元素</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\n\tint* p = arr;  //指向数组的指针\n  // 数组arr的元素类型和指针p指向的数据类型换成double，也是一样的效果\n\n\tcout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;\n\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\t//利用指针遍历数组\n\t\tcout &lt;&lt; *p &lt;&lt; endl;\n\t\tp++;// 让指针往后移指向的数据的类型所占字节。这里往后移4个字节\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"77-指针和函数\"><a class=\"anchor\" href=\"#77-指针和函数\">#</a> 7.7 指针和函数</h2>\n<p>** 作用：** 利用指针作函数参数，可以修改实参的值</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//值传递\nvoid swap1(int a ,int b) &#123;\n\tint temp = a;\n\ta = b; \n\tb = temp;\n&#125;\n\n//地址传递\nvoid swap2(int* p1, int* p2) &#123;\n\tint temp = *p1;\n\t*p1 = *p2;\n\t*p2 = temp;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n  \n\tswap1(a, b); // 值传递不会改变实参\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 10\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;// 20\n\n\tswap2(&amp;a, &amp;b); //地址传递会改变实参\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;// 20\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;// 10\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410131808376.png\" alt=\"\" /></p>\n<ol>\n<li>内存条一开始分配了 4 个字节空间，放变量 int a = 10</li>\n<li>创建变量 b = 20</li>\n<li>程序跳转到 swap02 函数体，指针 p1 和 p2 要去接收 a 和 b 的地址。这时候会创建出来一个指针 p1 = 变量 a 的地址 0x0011，p2 = 变量 b 的地址 0x0022</li>\n<li>创建变量 temp，这个临时变量也要分配内存空间，等于 * p1，相当于解引用，找 0x0011 这块内存指向的数据 10</li>\n<li>*p2 是 p2 这个指针指向 0x0022 这块内存的值，相当于把 20 赋值给了 p1 指向的内存，即 a</li>\n<li>temp 的值 10 给 p2 指向的内存</li>\n</ol>\n</blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n<h2 id=\"78-指针-数组-函数\"><a class=\"anchor\" href=\"#78-指针-数组-函数\">#</a> 7.8 指针、数组、函数</h2>\n<p>** 案例描述：** 封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n<p>例如数组：int arr [10] = { 4,3,6,9,1,2,10,8,7,5 };</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">//冒泡排序函数\nvoid bubbleSort(int* arr, int len) &#123;// int* arr 也可以写为int arr[]\n\tfor (int i = 0; i &lt; len - 1; i++) &#123;\n\t\tfor (int j = 0; j &lt; len - 1 - i; j++) &#123;\n\t\t\tif (arr[j] &gt; arr[j + 1]) &#123;\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n\n//打印数组函数\nvoid printArray(int arr[], int len) &#123;\n\tfor (int i = 0; i &lt; len; i++) &#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tint arr[10] = &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;\n\tint len = sizeof(arr) / sizeof(int);\n\n\tbubbleSort(arr, len);\n\tprintArray(arr, len);\n  // 一般来说给一个数组做一些操作的时候，还会传入数组有多长\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n<h1 id=\"8-结构体\"><a class=\"anchor\" href=\"#8-结构体\">#</a> 8 结构体</h1>\n<h2 id=\"81-结构体基本概念\"><a class=\"anchor\" href=\"#81-结构体基本概念\">#</a> 8.1 结构体基本概念</h2>\n<p>结构体属于用户<mark>自定义的数据类型</mark>，允许用户存储不同的数据类型</p>\n<h2 id=\"82-结构体定义和使用\"><a class=\"anchor\" href=\"#82-结构体定义和使用\">#</a> 8.2 结构体定义和使用</h2>\n<p><strong>语法：</strong> <code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ol>\n<li>struct 结构体名 变量名</li>\n<li 成员1值=\"\" ，=\"\" 成员2值...=\"\">struct 结构体名 变量名 =</li>\n<li>定义结构体时顺便创建变量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\n// 1、创建学生数据类型：学生包括姓名，年龄，分数\n// 自定义数据类型：一些类型集合组成的一个类型\n// 结构体定义的时候，struct关键字不可以省略\nstruct Student &#123;\n  // 成员列表\n  string name;\n  int age;\n  int score;\n&#125;;\n\n// 2、通过学生类型创建具体学生\n// 结构体变量在创建的时候，struct关键字可以省略\nint main() &#123;\n  // 2.1 struct Student s1\n  struct Student s1;// 可以不写struct：Student s1;\n  s1.name = &quot;张三&quot;;\n  s1.age = 18;\n  s1.score = 100;\n  cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; s1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; s1.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; s1.score &lt;&lt; endl;\n\n  // 2.2 struct Student s2 = &#123; ... &#125;\n  struct Student s2 = &#123;&quot;李四&quot;, 19, 80&#125;;\n  cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; s2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; s2.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; s2.score &lt;&lt; endl;\n&#125;\n</code></pre>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 2.3 在定义结构体时顺便创建结构体变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  s3<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  s3<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  s3<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 仍然可以继续用 Student 这个结构体创建其他结构变量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>总结 1：定义结构体时的关键字是 struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结 2：创建结构体变量时，关键字 struct 可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结 3：结构体变量利用操作符 ''.''  访问成员</p>\n</blockquote>\n<h2 id=\"83-结构体数组\"><a class=\"anchor\" href=\"#83-结构体数组\">#</a> 8.3 结构体数组</h2>\n<p>** 作用：** 将自定义的结构体放入到数组中方便维护</p>\n<p><strong>语法：</strong> <code> struct 结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">// 1、定义结构体\nstruct Student &#123;\n  // 成员列表\n  string name;  // 姓名\n  int age;      // 年龄\n  int score;    // 分数\n&#125;;\n\nint main() &#123;\n  // 2、创建结构体数组\n  // 结构体数组在创建的时候，struct关键字可以省略\n  struct Student arr[3] = &#123;\n      &#123;&quot;张三&quot;, 18, 80&#125;,\n      &#123;&quot;李四&quot;, 19, 60&#125;,\n      &#123;&quot;王五&quot;, 20, 70&#125;&#125;;\n  \n  // 3、给结构体数组中的元素赋值\n  arr[2].name = &quot;赵六&quot;;\n  arr[2].age = 80;\n  arr[2].score = 60;\n\n  // 4、遍历结构体数组\n  for (int i = 0; i &lt; 3; i++) &#123;\n    cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;\n  &#125;\n\n  return 0;\n&#125;\n</code></pre>\n<h2 id=\"84-结构体指针\"><a class=\"anchor\" href=\"#84-结构体指针\">#</a> 8.4 结构体指针</h2>\n<p>** 作用：** 通过指针访问结构体中的成员</p>\n<ul>\n<li>利用操作符  <code>-&gt; </code> 可以通过结构体指针访问结构体属性</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">// 结构体定义\nstruct Student &#123;\n  // 成员列表\n  string name;  // 姓名\n  int age;      // 年龄\n  int score;    // 分数\n&#125;;\n\nint main() &#123;\n  struct Student stu = &#123;\n      &quot;张三&quot;,\n      18,\n      100,\n  &#125;;\n\n  struct Student* p = &amp;stu;\n\n  p-&gt;score = 80;  // 指针通过 -&gt; 操作符可以访问成员\n\n  cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;\n\n  return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>\n</blockquote>\n<h2 id=\"85-结构体嵌套结构体\"><a class=\"anchor\" href=\"#85-结构体嵌套结构体\">#</a> 8.5 结构体嵌套结构体</h2>\n<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>\n<p>** 例如：** 每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct Student &#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//教师结构体定义\nstruct Teacher &#123;\n  //成员列表\n\tint id; //职工编号\n\tstring name;  //教师姓名\n\tint age;   //教师年龄\n\tstruct Student stu; //子结构体 学生\n&#125;;\n\nint main() &#123;\n\n\tstruct Teacher t1;\n\tt1.id = 10000;\n\tt1.name = &quot;老王&quot;;\n\tt1.age = 40;\n\n\tt1.stu.name = &quot;张三&quot;;\n\tt1.stu.age = 18;\n\tt1.stu.score = 100;\n\n\tcout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;\n\t\n\tcout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>\n<h2 id=\"86-结构体做函数参数\"><a class=\"anchor\" href=\"#86-结构体做函数参数\">#</a> 8.6 结构体做函数参数</h2>\n<p>** 作用：** 将结构体作为参数向函数中传递</p>\n<p>传递方式有两种：</p>\n<ul>\n<li>值传递</li>\n<li>地址传递</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct Student &#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//值传递\nvoid printStudent(Student stu) &#123;\n\tstu.age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;// age：28\n&#125;\n\n//地址传递\nvoid printStudent2(Student* stu) &#123;\n\tstu-&gt;age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;// age：28\n&#125;\n\nint main() &#123;\n\n\tStudent stu = &#123; &quot;张三&quot;,18,100&#125;;\n  \n\t//值传递\n\tprintStudent(stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;// age：18\n\n\tcout &lt;&lt; endl;\n\n\t//地址传递\n\tprintStudent2(&amp;stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;// age：28\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>\n</blockquote>\n<h2 id=\"87-结构体中-const使用场景\"><a class=\"anchor\" href=\"#87-结构体中-const使用场景\">#</a> 8.7 结构体中 const 使用场景</h2>\n<p>** 作用：** 用 const 来防止误操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct Student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//const使用场景\n//加const防止函数体中的误操作\nvoid printStudent(const Student* stu) &#123;\n\t//stu-&gt;age = 100; // 加入const之后，一旦有修改的操作就会报错\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tStudent stu = &#123; &quot;张三&quot;,18,100 &#125;;\n\n\tprintStudent(&amp;stu);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>在函数  <code>printStudent</code>  中，参数  <code>const student* stu</code>  表示  <code>stu</code>  是一个指向  <code>student</code>  结构体的指针，并且指向的  <code>student</code>  对象的内容是不可修改的。这意味着不能通过  <code>stu</code>  来修改  <code>student</code>  结构体的成员变量（如  <code>age</code> 、 <code>name</code>  和  <code>score</code> ）</p>\n<p>尽管  <code>stu</code>  指向的  <code>student</code>  对象的内容不能被修改，但指针  <code>stu</code>  本身是可以改变的。也就是说，你可以让  <code>stu</code>  指向另一个  <code>student</code>  对象。以下是一个示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Student stu1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Student stu2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> Student<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>stu1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ptr 指向 stu1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>stu2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ptr 现在指向 stu2，这行是合法的</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>const student* stu</code>  表示  <code>stu</code>  指向的  <code>student</code>  对象的内容不可修改</li>\n<li>但是，指针  <code>stu</code>  本身是可以改变的，你可以让它指向另一个  <code>student</code>  对象</li>\n</ul>\n</blockquote>\n<h2 id=\"88-结构体案例\"><a class=\"anchor\" href=\"#88-结构体案例\">#</a> 8.8 结构体案例</h2>\n<h3 id=\"881-案例1\"><a class=\"anchor\" href=\"#881-案例1\">#</a> 8.8.1 案例 1</h3>\n<p><strong>案例描述：</strong></p>\n<p>学校正在做毕设项目，每名老师带领 5 个学生，总共有 3 名老师，需求如下</p>\n<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放 5 名学生的数组作为成员。学生的成员有姓名、考试分数</p>\n<p>创建数组存放 3 名老师，通过函数给每个老师及所带的学生赋值</p>\n<p>最终打印出老师数据以及老师所带的学生数据。</p>\n<blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202410140935254.png\" alt=\"\" /></p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;string&gt;\n#include &lt;ctime&gt;\n\nstruct Student &#123;\n\tstring name;\n\tint score;\n&#125;;\nstruct Teacher &#123;\n\tstring name;\n\tStudent sArray[5];\n&#125;;\n\nvoid allocateSpace(Teacher tArray[] , int len) &#123;\n\tstring tName = &quot;教师&quot;;\n\tstring sName = &quot;学生&quot;;\n\tstring nameSeed = &quot;ABCDE&quot;;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\ttArray[i].name = tName + nameSeed[i];\n\t\t\n\t\tfor (int j = 0; j &lt; 5; j++) &#123;\n\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];\n\t\t\ttArray[i].sArray[j].score = rand() % 61 + 40;\n\t\t&#125;\n\t&#125;\n&#125;\n\nvoid printTeachers(Teacher tArray[], int len) &#123;\n\tfor (int i = 0; i &lt; len; i++) &#123;\n\t\tcout &lt;&lt; tArray[i].name &lt;&lt; endl;\n\t\tfor (int j = 0; j &lt; 5; j++) &#123;\n\t\t\tcout &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tsrand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;\n\n\tTeacher tArray[3]; // 1、创建数组存放3名老师\n\n\tint len = sizeof(tArray) / sizeof(Teacher);\n\tallocateSpace(tArray, len); // 2、通过函数给每个老师及所带的学生赋值\n\tprintTeachers(tArray, len); // 3、打印出老师数据以及老师所带的学生数据\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"882-案例2\"><a class=\"anchor\" href=\"#882-案例2\">#</a> 8.8.2 案例 2</h3>\n<p><strong>案例描述：</strong></p>\n<p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放 5 名英雄。</p>\n<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>\n<p>五名英雄信息如下：</p>\n<pre><code class=\"language-C++\">\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\n\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\n\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\n\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\n\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//英雄结构体\nstruct Hero &#123;\n\tstring name;\n\tint age;\n\tstring sex;\n&#125;;\n//冒泡排序\nvoid bubbleSort(Hero arr[] , int len) &#123;\n\tfor (int i = 0; i &lt; len - 1; i++) &#123;\n\t\tfor (int j = 0; j &lt; len - 1 - i; j++) &#123;\n\t\t\tif (arr[j].age &gt; arr[j + 1].age) &#123;\n\t\t\t\tHero temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n        // 在 C++ 中，结构体是一个复合数据类型，赋值操作会复制整个结构体的内容，而不是仅仅交换它们的地址\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n//打印数组\nvoid printHeros(hero arr[], int len) &#123;\n\tfor (int i = 0; i &lt; len; i++) &#123;\n\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tstruct Hero arr[5] = &#123;\n\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\n\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\n\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\n\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\n\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\n\t&#125;;\n  int len = sizeof(arr) / sizeof(Hero); //获取数组元素个数\n\n\tbubbleSort(arr, len); //排序\n  printHeros(arr, len); //打印\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://60saint.github.io/cpp/VScode-C++%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88MAC%EF%BC%89/",
            "url": "https://60saint.github.io/cpp/VScode-C++%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88MAC%EF%BC%89/",
            "title": "VScode C++环境配置（MAC）",
            "date_published": "2024-09-30T09:32:46.157Z",
            "content_html": "<h1 id=\"安装-cc-插件\"><a class=\"anchor\" href=\"#安装-cc-插件\">#</a> 安装 C/C++ 插件</h1>\n<p>点击<strong>扩展</strong>，然后在<strong>商店<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aGlkYS56aGlodS5jb20vc2VhcmNoP2NvbnRlbnRfaWQ9MjM2Mjc3ODMyJmFtcDtjb250ZW50X3R5cGU9QXJ0aWNsZSZhbXA7bWF0Y2hfb3JkZXI9MSZhbXA7cT0lRTYlOTYlODclRTYlOUMlQUMlRTYlQTElODYmYW1wO3poaWRhX3NvdXJjZT1lbnRpdHk=\">文本框</span>中输入 C/C++</strong>，再选择 C/C++ 插件，点击<strong>安装</strong>。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301737368.png\" alt=\"\" /></p>\n<h1 id=\"配置运行环境\"><a class=\"anchor\" href=\"#配置运行环境\">#</a> 配置运行环境</h1>\n<h2 id=\"打开终端\"><a class=\"anchor\" href=\"#打开终端\">#</a> 打开终端</h2>\n<p>在命令行中输入 <strong>clang --version</strong>，如果之前<strong>没有安装 clang</strong> 的话，就会出现下图的对话框，点击安装，如下图。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301741336.png\" alt=\"\" /></p>\n<p>安装完成之后，验证是否成功，在命令行中输入 clang --version，显示版本号，代表成功了。</p>\n<h2 id=\"编写测试代码\"><a class=\"anchor\" href=\"#编写测试代码\">#</a> 编写测试代码</h2>\n<p>新建 test 文件夹，并在 vscode 中打开，添加 test.cpp 文件。输入一段可以运行的简易代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Come on\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置编译器\"><a class=\"anchor\" href=\"#配置编译器\">#</a> 配置编译器</h2>\n<p>按下 <strong>command + shift + P</strong> 调出面板，输入<strong> C/C++</strong>，选择<strong>编辑配置 (UI)</strong>，如下图示。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301822632.png\" alt=\"\" /></p>\n<p>此时，项目根目录下会出现一个 **.vscode 文件夹 **</p>\n<p>在 <strong>C/C++ 配置</strong>界面下的<strong>编译器路径</strong>，选择适合自己的，如果是 <strong>C 语言</strong>，则<strong>选择 clang</strong>，<strong>C++ 则选择 clang++</strong>，由于作者是用 C++，所以选择 clang++，如下图示。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301825520.png\" alt=\"\" /></p>\n<p>在当前界面下，将 <strong>IntelliSense 模式</strong>，设置成 <strong>clang-x64(legacy)</strong>，将 <strong>C</strong> 标准设置为 <strong>c17，C++</strong> 标准设置为<strong> c++17</strong>，如下图示。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301826786.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301836659.png\" alt=\"\" /></p>\n<p>此时，.vscode 文件夹 <strong>c_cpp_properties.json</strong> 文件内容如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mac\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"includePath\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"$&#123;workspaceFolder&#125;/**\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"defines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"macFrameworkPath\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"/Library/Developer/CommandLineTools/SDKs/MacOSX14.5.sdk/System/Library/Frameworks\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"compilerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/bin/clang++\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"cStandard\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c17\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">\"cppStandard\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c++17\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token property\">\"intelliSenseMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"clang-x64\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置构建任务\"><a class=\"anchor\" href=\"#配置构建任务\">#</a> 配置构建任务</h2>\n<ol>\n<li>\n<p>打开命令面板（ <code>Command + Shift + P</code> ），输入  <code>Tasks: Configure Task</code> ，然后选择  <code>Create tasks.json file from template</code> 。</p>\n</li>\n<li>\n<p>选择  <code>Others</code>  选项。</p>\n</li>\n<li>\n<p>在生成的  <code>tasks.json</code>  文件中，添加以下内容：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppbuild\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: clang++ 生成活动文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/bin/clang++\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"-fcolor-diagnostics\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"-fansi-escape-codes\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"$&#123;file&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"$gcc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token property\">\"isDefault\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token property\">\"detail\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"编译器: /usr/bin/clang++\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>再次打开命令面板（ <code>Command + Shift + P</code> ），输入  <code>Tasks: Configure Default Build Task</code> ，应该能看到刚刚添加的 C/C++ 任务</p>\n</li>\n</ol>\n<h2 id=\"配置调试设置\"><a class=\"anchor\" href=\"#配置调试设置\">#</a> 配置调试设置</h2>\n<ol>\n<li>\n<p>打开命令面板，输入  <code>Debug: Open launch.json</code> 。</p>\n</li>\n<li>\n<p>如果没有看到相关选项，可以选择  <code>C++ (GDB/LLDB)</code> 。</p>\n</li>\n<li>\n<p>将生成的  <code>launch.json</code>  文件修改为如下内容（根据您的文件名和路径进行调整）：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lldb\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C++ debug\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;workspaceFolder&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: g++ 生成活动文件\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>现在，应该能够在  <code>test.cpp</code>  文件中按  <code>Command + Shift + P</code> ，输入  <code>debug</code> ，并看到  <code>C/C++: clang++ 生成和调试活动文件</code>  选项</p>\n</li>\n</ol>\n<h1 id=\"验证可行性\"><a class=\"anchor\" href=\"#验证可行性\">#</a> 验证可行性</h1>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409302039066.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409302040652.png\" alt=\"\" /></p>\n<ul>\n<li><strong> <code>test</code>  文件</strong>：这是编译的 C++ 程序的可执行文件。</li>\n<li><strong> <code>test.dSYM</code>  文件</strong>：这是 macOS 系统下用于调试的符号文件，包含调试信息，帮助调试器更好地理解程序的结构和状态。</li>\n</ul>\n<p>至此，C++ 环境已经全部配置完成</p>\n",
            "tags": [
                "C++",
                "C++",
                "VSCode",
                "环境"
            ]
        },
        {
            "id": "https://60saint.github.io/typora%E5%BF%AB%E6%8D%B7%E9%94%AE(mac)/",
            "url": "https://60saint.github.io/typora%E5%BF%AB%E6%8D%B7%E9%94%AE(mac)/",
            "title": "typora 快捷键使用(mac)",
            "date_published": "2024-09-25T14:05:21.406Z",
            "content_html": "<p>一级标题：⌘1 (command + 1)<br />\n 二级标题：⌘2 (command + 2)<br />\n 三级标题：⌘3 (command + 3)<br />\n 四级标题：⌘4 (command + 4)<br />\n 五级标题：⌘5 (command + 5)</p>\n<p>段落：⌘o 不生效，快捷键冲突，使用⌃o (control + o)</p>\n<p>提升标题级别：⌘= (command + =)<br />\n 降低标题级别：⌘- (command + -)</p>\n<p>表格：⌥⌘T (option + command + T)<br />\n 代码块：⌥⌘C (option + command + C)<br />\n 公式块：⌥⌘B (option + command + B)</p>\n<p>引用：⌥⌘Q (option + command + Q)<br />\n 有序列表：⌥⌘O (option + command + O)<br />\n 无序列表：⌥⌘U (option + command + U)</p>\n<p>任务列表：⌥⌘X (option + command + X)<br />\n 列表缩进：<br />\n​ 增加缩进：⌘] (command +])<br />\n​ 减少缩进：⌘[( command + [)</p>\n<p>链接引用：⌥⌘L (option + command + L)<br />\n 脚注：⌥⌘R (option + command + R)</p>\n<p>水平分割线：⇧⌘- (shift + command + -)</p>\n<p>加粗：⌘B (command + B)<br />\n 斜体：⌘I (command + I)<br />\n 下划线：⌘U (command + U)</p>\n<p>代码：⇧⌘(shift + command +)</p>\n<p>内联公式：⌃M (control + M)<br />\n 删除线：⌃~ (control + ~)<br />\n 注释：⌃- (control + -)</p>\n<p>超链接:⌘K (command + K)<br />\n 图像：⌃⌘I (control + command + U)<br />\n 清除样式：⌘\\ (command +)</p>\n<p>显示 / 隐藏侧边栏：⇧⌘L (shift + command + L)<br />\n 大纲视图：⌃⌘1 (control + command + 1)<br />\n 文档列表视图：⌃⌘2 (control + command +2)<br />\n 文件树视图：⌃⌘3 (control + command + 3)</p>\n",
            "tags": [
                "Markdown"
            ]
        },
        {
            "id": "https://60saint.github.io/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/",
            "url": "https://60saint.github.io/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/",
            "title": "Hexo个人博客搭建教程",
            "date_published": "2024-09-25T10:53:11.000Z",
            "content_html": "<h1 id=\"准备工具\"><a class=\"anchor\" href=\"#准备工具\">#</a> 准备工具</h1>\n<ol>\n<li>\n<p>安装 Node.js</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>brew <span class=\"token function\">install</span> <span class=\"token function\">node</span></pre></td></tr></table></figure></li>\n<li>\n<p>安装 Hexo</p>\n<p>一旦下载了 Node.js，就能用 npm（Node 包管理器）全局安装 Hexo：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli</pre></td></tr></table></figure></li>\n<li>\n<p>验证 Hexo 是否安装成功</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><p>如果安装成功，则显示一系列版本号</p>\n</li>\n</ol>\n<h1 id=\"生成ssh-keys\"><a class=\"anchor\" href=\"#生成ssh-keys\">#</a> 生成 ssh Keys</h1>\n<p>Git bash 输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"邮件地址\"</span></pre></td></tr></table></figure><ol>\n<li>\n<p>敲 4 次 Enter⌨️</p>\n</li>\n<li>\n<p>访达 -&gt; shift+command+G -&gt; 输入～/.ssh</p>\n<p>即：访达 -&gt; 前往 -&gt; 前往文件夹 -&gt; 输入～/.ssh</p>\n</li>\n<li>\n<p>打开里面的 id_rsa.pub，全选复制代码</p>\n</li>\n<li>\n<p>打开 github</p>\n</li>\n<li>\n<p>进入用户设置，找到 SSH and GPG keys</p>\n</li>\n<li>\n<p>新建一个 New SSH key，标题任意，粘贴刚刚复制的代码，点击 Add SSH key 创建</p>\n</li>\n<li>\n<p>打开 git bash 验证是否已经成功添加</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com</pre></td></tr></table></figure><p>输入 yes</p>\n<p>看到 <code>Hi 60sAINT! You've successfully authenticated, but GitHub does not provide shell access.</code>  则成功</p>\n</li>\n</ol>\n<h1 id=\"本地部署\"><a class=\"anchor\" href=\"#本地部署\">#</a> 本地部署</h1>\n<ol>\n<li>选择一个合适的位置创建一个文件夹，用于放置博客文件。control + 单击文件夹 -&gt; “新建位于文件夹位置的终端窗口”</li>\n<li>输入 <code>hexo init</code>  进行初始化。如果不行就在前面加 npx -&gt;  <code>npx hexo init</code></li>\n<li><code>hexo install</code>  安装</li>\n<li><code>hexo g</code>  生成</li>\n<li><code>hexo s</code>  本地部署，得到一个链接，打开就可以看到博客已经成功在本地部署了</li>\n</ol>\n<blockquote>\n<p>下一步就可以选择喜欢的主题在本地继续配置了</p>\n<p>我的爱用：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmthaXRha3UueHl6L2d1aWRlL2NvbmZpZy5odG1sI2FsZ29saWEtJUU2JTkwJTlDJUU3JUI0JUEy\">https://docs.kaitaku.xyz/guide/config.html#algolia - 搜索</span></p>\n</blockquote>\n<h1 id=\"上线博客\"><a class=\"anchor\" href=\"#上线博客\">#</a> 上线博客</h1>\n<ol>\n<li>\n<p>打开博客文件夹中的 config 文件，配置下列代码：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/60sAINT/60sAINT.github.io.git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr></table></figure></li>\n<li>\n<p>git bash -&gt;  <code>hexo algolia</code>  上传索引</p>\n</li>\n<li>\n<p><code>hexo g</code>  生成</p>\n</li>\n<li>\n<p>安装 Hexo Git 部署插件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>hexo d</code>  上传</p>\n<blockquote>\n<p>第一次上传要进行身份验证</p>\n<p>GitHub 已经不再支持使用密码进行身份验证，它要求用户使用更安全的身份验证方式。</p>\n<ol>\n<li>\n<p><mark>使用 SSH 密钥</mark></p>\n<ol>\n<li>\n<p><strong>生成 SSH 密钥</strong>（如果您还没有的话）：<br />\n打开终端并输入以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"your_email@example.com\"</span></pre></td></tr></table></figure><p>按照提示操作，默认情况下会在  <code>~/.ssh/id_rsa</code>  生成密钥。</p>\n</li>\n<li>\n<p><strong>将公钥添加到 GitHub</strong>：</p>\n<ul>\n<li>\n<p>复制公钥：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</pre></td></tr></table></figure></li>\n<li>\n<p>登录到 GitHub，进入 <strong>Settings</strong> -&gt; <strong>SSH and GPG keys</strong> -&gt; <strong>New SSH key</strong>，将公钥粘贴进去。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>更改 Hexo 配置</strong>：<br />\n在您的 Hexo 项目的  <code>_config.yml</code>  中，将 GitHub 的 URL 更改为 SSH 格式：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> git@github.com<span class=\"token punctuation\">:</span>60sAINT/60sAINT.github.io.git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p><mark>使用 Personal Access Token</mark></p>\n<p>如果更愿意使用 HTTPS，可以使用 GitHub 的 Personal Access Token 代替密码：</p>\n<ol>\n<li><strong>在 Hexo 中使用 Token</strong>：<br />\n在您执行  <code>hexo d</code>  时，输入用户名为 GitHub 用户名，密码为刚刚生成的 token。</li>\n<li><strong>在 Hexo 中使用 Token</strong>：<br />\n在您执行  <code>hexo d</code>  时，输入用户名为 GitHub 用户名，密码为刚刚生成的 token。</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "GitHub"
            ]
        },
        {
            "id": "https://60saint.github.io/hexo%E4%B8%ADmarkdown%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://60saint.github.io/hexo%E4%B8%ADmarkdown%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "Hexo 中 Markdown 特殊字符的处理方法",
            "date_published": "2024-09-24T12:19:05.000Z",
            "content_html": "<h1 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h1>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1IZXhvJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\">Hexo</span> 搭建的博客中对文章进行编写，经常会用到一些特殊字符需要转译，比如  <code>-</code> 、 <code>.</code> 、空格、制表符等等，在正常情况下可以使用  <code>\\</code>  进行转译，但是有一些字符无法转译，使用后在执行  <code>hexo server</code>  命令的时候会报错。</p>\n<p><strong>报错信息：</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Unhandled rejection Template render error: <span class=\"token punctuation\">(</span>unknown path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Line <span class=\"token number\">7</span>, Column <span class=\"token number\">23</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Error: Unable to call <span class=\"token variable\"><span class=\"token variable\">`</span>worldcount<span class=\"token variable\">`</span></span>, <span class=\"token function\">which</span> is undefined or falsey<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h1 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h1>\n<p>报错的原因是，Hexo 编译时发生错误，可能是文章中存在特殊字符，如：{[ () ] } 等等。如下面这段代码：</p>\n<p><strong>在页面中：</strong></p>\n<pre><code>&#123;&#123; worldcount(post.content) &#125;&#125;\n</code></pre>\n<p><strong>在 Markdown 中：</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;&#123; worldcount<span class=\"token entity\" title=\"&#40;\">&amp;#40;</span>post.content<span class=\"token entity\" title=\"&#41;\">&amp;#41;</span> &#125;&#125;</pre></td></tr></table></figure><p>在 Markdown 中使用  <code>\\</code>  无法转译的字符需要使用字符的命名实体或十进制编码，如上面代码中。</p>\n<p><em><strong>注意：需要转义的字符只是文本中的特殊字符，代码块中的特殊字符无需转译或使用转译字符。</strong></em></p>\n<h1 id=\"常见特殊字符\"><a class=\"anchor\" href=\"#常见特殊字符\">#</a> 常见特殊字符</h1>\n<p>常用特殊字符转译字符对照表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特殊符号</th>\n<th style=\"text-align:center\">命名实体</th>\n<th style=\"text-align:center\">十进制编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">空格</td>\n<td style=\"text-align:center\"><code>&amp;nbsp;</code></td>\n<td style=\"text-align:center\"><code>&amp;#160;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全角空格</td>\n<td style=\"text-align:center\"><code>&amp;emsp;</code></td>\n<td style=\"text-align:center\"><code>&amp;#12288;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">回车</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\"><code>&amp;#13;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">’</td>\n<td style=\"text-align:center\"><code>&amp;apos;</code></td>\n<td style=\"text-align:center\"><code>&amp;#39;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&quot;</td>\n<td style=\"text-align:center\"><code>&amp;quot;</code></td>\n<td style=\"text-align:center\"><code>&amp;#34;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\"><code>&amp;#40;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">)</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\"><code>&amp;#41;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\"><code>&amp;lt;</code></td>\n<td style=\"text-align:center\"><code>&amp;#60;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\"><code>&amp;gt;</code></td>\n<td style=\"text-align:center\"><code>&amp;#62;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\"><code>&amp;#91;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">]</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\"><code>&amp;#93;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\"><code>&amp;#123;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">}</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\"><code>&amp;#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">´</td>\n<td style=\"text-align:center\"><code>&amp;acute;</code></td>\n<td style=\"text-align:center\"><code>&amp;#180;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">°</td>\n<td style=\"text-align:center\"><code>&amp;deg;</code></td>\n<td style=\"text-align:center\"><code>&amp;#176;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">®</td>\n<td style=\"text-align:center\"><code>&amp;reg;</code></td>\n<td style=\"text-align:center\"><code>&amp;#174;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">©</td>\n<td style=\"text-align:center\"><code>&amp;copy;</code></td>\n<td style=\"text-align:center\"><code>&amp;#169;</code></td>\n</tr>\n</tbody>\n</table>\n<p>常用数学转译字符对照表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特殊符号</th>\n<th style=\"text-align:center\">命名实体</th>\n<th style=\"text-align:center\">十进制编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">≤</td>\n<td style=\"text-align:center\"><code>&amp;le;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8804;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">≥</td>\n<td style=\"text-align:center\"><code>&amp;ge;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8805;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">≈</td>\n<td style=\"text-align:center\"><code>&amp;asymp;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8773;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">≠</td>\n<td style=\"text-align:center\"><code>&amp;ne;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8800;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∩</td>\n<td style=\"text-align:center\"><code>&amp;cap;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8745;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∪</td>\n<td style=\"text-align:center\"><code>&amp;cup;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8746;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∠</td>\n<td style=\"text-align:center\"><code>&amp;ang;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8736;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∞</td>\n<td style=\"text-align:center\"><code>&amp;infin;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8734;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">±</td>\n<td style=\"text-align:center\"><code>&amp;plusmn;</code></td>\n<td style=\"text-align:center\"><code>&amp;#177;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"><code>&amp;radic;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8730;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∑</td>\n<td style=\"text-align:center\"><code>&amp;sum;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8722;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∫</td>\n<td style=\"text-align:center\"><code>&amp;int;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8747;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Δ</td>\n<td style=\"text-align:center\"><code>&amp;Delta;</code></td>\n<td style=\"text-align:center\"><code>&amp;#916;</code></td>\n</tr>\n</tbody>\n</table>\n<p>常用希腊字母转译字符对照表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特殊符号</th>\n<th style=\"text-align:center\">命名实体</th>\n<th style=\"text-align:center\">十进制编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Φ</td>\n<td style=\"text-align:center\"><code>&amp;Phi;</code></td>\n<td style=\"text-align:center\"><code>&amp;#934;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ω</td>\n<td style=\"text-align:center\"><code>&amp;Omega;</code></td>\n<td style=\"text-align:center\"><code>&amp;#937;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">α</td>\n<td style=\"text-align:center\"><code>&amp;alpha;</code></td>\n<td style=\"text-align:center\"><code>&amp;#945;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">β</td>\n<td style=\"text-align:center\"><code>&amp;beta;</code></td>\n<td style=\"text-align:center\"><code>&amp;#946;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">γ</td>\n<td style=\"text-align:center\"><code>&amp;gamma;</code></td>\n<td style=\"text-align:center\"><code>&amp;#947;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">δ</td>\n<td style=\"text-align:center\"><code>&amp;delta;</code></td>\n<td style=\"text-align:center\"><code>&amp;#948;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ε</td>\n<td style=\"text-align:center\"><code>&amp;epsilon;</code></td>\n<td style=\"text-align:center\"><code>&amp;#949;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ζ</td>\n<td style=\"text-align:center\"><code>&amp;zeta;</code></td>\n<td style=\"text-align:center\"><code>&amp;#950;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">η</td>\n<td style=\"text-align:center\"><code>&amp;eta;</code></td>\n<td style=\"text-align:center\"><code>&amp;#951;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">θ</td>\n<td style=\"text-align:center\"><code>&amp;theta;</code></td>\n<td style=\"text-align:center\"><code>&amp;#952;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">λ</td>\n<td style=\"text-align:center\"><code>&amp;lambda;</code></td>\n<td style=\"text-align:center\"><code>&amp;#955;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">μ</td>\n<td style=\"text-align:center\"><code>&amp;mu;</code></td>\n<td style=\"text-align:center\"><code>&amp;#956;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ξ</td>\n<td style=\"text-align:center\"><code>&amp;xi;</code></td>\n<td style=\"text-align:center\"><code>&amp;#958;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">π</td>\n<td style=\"text-align:center\"><code>&amp;pi;</code></td>\n<td style=\"text-align:center\"><code>&amp;#960;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ρ</td>\n<td style=\"text-align:center\"><code>&amp;rho;</code></td>\n<td style=\"text-align:center\"><code>&amp;#961;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">σ</td>\n<td style=\"text-align:center\"><code>&amp;sigma;</code></td>\n<td style=\"text-align:center\"><code>&amp;#963;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">φ</td>\n<td style=\"text-align:center\"><code>&amp;phi;</code></td>\n<td style=\"text-align:center\"><code>&amp;#966;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ψ</td>\n<td style=\"text-align:center\"><code>&amp;psi;</code></td>\n<td style=\"text-align:center\"><code>&amp;#968;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ω</td>\n<td style=\"text-align:center\"><code>&amp;omega;</code></td>\n<td style=\"text-align:center\"><code>&amp;#969;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∂</td>\n<td style=\"text-align:center\"><code>&amp;part;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8706;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∅</td>\n<td style=\"text-align:center\"><code>&amp;empty;</code></td>\n<td style=\"text-align:center\"><code>&amp;#8709;</code></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Hexo",
                "Markdown"
            ]
        },
        {
            "id": "https://60saint.github.io/picgo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://60saint.github.io/picgo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/",
            "title": "PicGo + Github搭建个人免费图床",
            "date_published": "2024-09-24T12:18:45.000Z",
            "content_html": "<h1 id=\"使用github搭建图床\"><a class=\"anchor\" href=\"#使用github搭建图床\">#</a> 使用 Github 搭建图床</h1>\n<ol>\n<li>\n<p>新建仓库</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20240930170046.png\" alt=\"\" /></p>\n<p>!!<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzYwc0FJTlQvaW1hZ2VzQGxhdGVzdC8yMDI0MDkzMDE3MDQ5OTAucG5n\"></span></p>\n</li>\n<li>\n<p>点击右上角用户头像 =&gt; settings</p>\n</li>\n<li>\n<p>生成 token 令牌，往下拉，直到左侧到底，选择 Developer settings</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20240930170517.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301705330.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>密码验证</p>\n</li>\n<li>\n<p>可以给令牌 (token) 做个 Note (标记)，然后选择令牌 (token) 截止时间。不建议选永久，因为不安全。基本是该图床用到多久就选多久。</p>\n<p>选择 repo 权限，然后拉到底部，选择创建就行了。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301706904.png\" alt=\"\" /></p>\n<p>创建完毕之后，生成的 Token 是你的账户下的 github 服务器的令牌</p>\n</li>\n</ol>\n<h1 id=\"picgo整合github图床\"><a class=\"anchor\" href=\"#picgo整合github图床\">#</a> PicGo 整合 Github 图床</h1>\n<p>PicGo 是一款优秀的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlOUIlQkUlRTUlQkElOEElRTUlQjclQTUlRTUlODUlQjcmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">图床工具</span>，能够自动把本地图片上传至网络，并转换成可访问的链接。</p>\n<h2 id=\"下载并安装picgo\"><a class=\"anchor\" href=\"#下载并安装picgo\">#</a> 下载并安装 PicGo</h2>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL3BpY2dvL3JlbGVhc2Vz\">https://github.com/Molunerfinn/picgo/releases</span></p>\n<p>根据自己的操作系统（Win/Linux/Mac）来下载安装包</p>\n<p>Mac 系统选择后缀为.dmg 的进行安装</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301708256.png\" alt=\"\" /></p>\n<blockquote>\n<p><strong>Mac 系统安装 PicGo 时打开报错：文件已损坏，您应该讲它移到废纸篓</strong></p>\n<p>解决办法：</p>\n<ul>\n<li>\n<p>打开终端输入以下内容，“为安装路径，默认是以下路径”</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> xattr <span class=\"token parameter variable\">-d</span> com.apple.quarantine <span class=\"token string\">\"/Applications/PicGo.app\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>按照提示输入电脑锁屏密码回车即可</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"设置图床\"><a class=\"anchor\" href=\"#设置图床\">#</a> 设置图床</h2>\n<p>图床设置 -&gt; Github</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301711644.png\" alt=\"\" /></p>\n<h2 id=\"整合jsdelivr\"><a class=\"anchor\" href=\"#整合jsdelivr\">#</a> 整合 jsDelivr</h2>\n<p>想要知道 jsDelivr 的作用，首先就需要了解 CDN 是什么</p>\n<p>CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。</p>\n<p>由于 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，jsDelivr + Github 便是免费且好用的 CDN，非常适合博客网站使用。</p>\n<p>进行图床配置：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20240924163148.png\" alt=\"\" /></p>\n<div class=\"note info\">\n<p>具体配置介绍</p>\n<div class=\"tab\" data-id=\"id1\" data-title=\"设定仓库名\">\n<p>用户名 / 仓库名</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"设定分支名\">\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301713979.png\" alt=\"\" /></p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"设定Token\">\n<p>上面刚刚在 Github 上获取的 token</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"设定存储路径\">\n<p>需要放到仓库中的哪个文件夹下</p>\n<ul>\n<li>如果直接放到仓库的根目录下就不需要填写这一栏</li>\n<li>如果需要放到某个目录下，直接写目录名就行，不需要在目录名前加 /</li>\n</ul>\n<blockquote>\n<p>建议在路径后面统一都加个 ’ / '，否则 PicGo 会在 test 后再拼接上本地的文件名然后一起作为远程仓库存储图片的图片名</p>\n<p>eg：test/</p>\n</blockquote>\n<ul>\n<li>\n<p>当有多级目录时，也是直接写路径。</p>\n<p>eg：test/test1/test2/</p>\n</li>\n<li>\n<p>当填写的目录不存在时，PicGo 会自动帮你在 Github 上创建目录，这个不用担心！</p>\n</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"设定自定义域名\">\n<p>此时就需要结合 jsDelivr 来加速了</p>\n<p>打开 jsDelivr 官网，了解它的使用方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanNkZWxpdnIuY29t\">https://www.jsdelivr.com</span></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301714667.png\" alt=\"\" /></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># https://cdn.jsdelivr.net/gh/：固定的前缀，相当于替换掉了Github地址中的https://github.com/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre># user：Github上的用户名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># repo：仓库名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre># @version：版本号（这里我们可以不管）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre># file：文件名（这里我们也不需要加上，因为上传完图片后，它会自动将上传的图片的名字作为存储的文件名）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//cdn.jsdelivr.net/gh/user/repo@version/file</span></span></pre></td></tr></table></figure><p>例如我的自定义域名就为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzYwc0FJTlQvaW1hZ2VzQGxhdGVzdA==\">https://cdn.jsdelivr.net/gh/60sAINT/images@latest</span></p>\n<blockquote>\n<p>这里值得注意的是，如果需要指定上传到哪个分支，此时需要在自定义域名后面使用 @ + 分支名，如果是仓库默认的分支，可以省略指定分支这一步。</p>\n<p>eg：我需要上传到 test 分支上，此时自定义域名就变成了：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzYwc0FJTlQvaW1hZ2VzQGxhdGVzdA==\">https://cdn.jsdelivr.net/gh/60sAINT/images@latest</span></p>\n</blockquote>\n</div>\n</div>\n<h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<p>配置完成后，切换到刚刚配置好的图床，然后手动上传图片试试：可以点击’点击上传’，也可以通过拖拽的方式进行上传</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301716029.png\" alt=\"\" /></p>\n<p>然后，我们能够在相册中看到我们已经上传的图片，可以查看、复制已经上传的图片的 URL，同时也可以将上传的图片删除。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301716169.png\" alt=\"\" /></p>\n<h2 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h2>\n<p>可以在 PicGo 设置中开启 时间戳重命名 ，这样同时上传相同的图片就不会被覆盖了。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/202409301717945.png\" alt=\"\" /></p>\n",
            "tags": [
                "GitHub",
                "PicGo"
            ]
        },
        {
            "id": "https://60saint.github.io/front-end/AJAX/AJAX-%E8%BF%9B%E9%98%B6%E7%AF%87/",
            "url": "https://60saint.github.io/front-end/AJAX/AJAX-%E8%BF%9B%E9%98%B6%E7%AF%87/",
            "title": "AJAX - 进阶篇",
            "date_published": "2023-08-28T16:00:00.000Z",
            "content_html": "<h1 id=\"同步代码和异步代码\"><a class=\"anchor\" href=\"#同步代码和异步代码\">#</a> 同步代码和异步代码</h1>\n<ul>\n<li>\n<p>&lt;u&gt; 同步代码 &lt;/u&gt;：逐行执行，需原地等待结果后，才继续向下执行</p>\n<p>我们应该注意的是，实际上浏览器是按照我们 &lt;u&gt; 书写代码的顺序一行一行地执行程序的 &lt;/u&gt;。浏览器会等待代码的解析和工作，在 &lt; u &gt; 上一行完成后才会执行下一行 &lt;/u&gt;。这样做是很有必要的，因为每一行新的代码都是建立在前面代码的基础之上的</p>\n<p>这也使得它成为一个同步程序</p>\n</li>\n<li>\n<p>&lt;u&gt; 异步代码 &lt;/u&gt;：调用后耗时，不阻塞代码继续执行（不必原地等待），在将来完成后触发一个回调函数</p>\n<p>异步编程技术使你的程序可以在执行一个 &lt;u&gt; 可能长期运行的任务 &lt;/u &gt; 的同时继续对其他事件做出反应 &lt; u &gt; 不必等待任务完成 &lt;/u&gt;。与此同时，你的程序也将在任务 &lt; u &gt; 完成后显示结果 &lt;/u&gt;</p>\n</li>\n</ul>\n<blockquote>\n<p>例子：回答打印数字的顺序是什么？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>打印结果：1,4,2</p>\n<p>点击按钮一次就打印一次 3</p>\n<p>异步代码接收结果：使用回调函数</p>\n</blockquote>\n<h1 id=\"回调函数地狱\"><a class=\"anchor\" href=\"#回调函数地狱\">#</a> 回调函数地狱</h1>\n<p>需求：展示默认第一个省，第一个城市，第一个地区在下拉菜单中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 获取默认第一个省份的名字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 2. 获取默认第一个城市的名字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> pname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 3. 获取默认第一个地区的名字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> pname<span class=\"token punctuation\">,</span> cname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token keyword\">const</span> areaName <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> areaName</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token comment\">// 若第三步获取默认第一个地区的名字传入 url 错误，该行不会执行，错误直接被 axios 内部代码捕获抛出到浏览器中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>概念：在回调函数中嵌套回调函数，一直嵌套下去就形成了回调函数地狱</p>\n<p>缺点：可读性差，异常无法捕获，耦合性严重，牵一发动全身</p>\n<h1 id=\"promise-链式调用\"><a class=\"anchor\" href=\"#promise-链式调用\">#</a> Promise - 链式调用</h1>\n<p>概念：依靠 then () 方法会返回一个新生成的 Promise 对象特性，继续串联下一环任务，直到结束</p>\n<p>细节：then () 回调函数中的返回值，会影响新生成的 Promise 对象最终状态和结果</p>\n<p>好处：通过链式调用，解决回调函数嵌套问题</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230829134953.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 目标：掌握 Promise 的链式调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 需求：把省市的嵌套结构，改成链式调用的线性结构</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1. 创建 Promise 对象 - 模拟请求省份名字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'北京市'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 2. 获取省份名字</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 3. 创建 Promise 对象 - 模拟请求城市名字</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">//return Promise 对象最终状态和结果，影响到新的 Promise 对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token string\">'--- 北京'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 4. 获取城市名字</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//then () 返回的结果是一个新的 Promise 对象</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">===</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>📗Promise 链式应用</p>\n<p>目标：使用 Promise 链式调用，解决回调函数地狱问题</p>\n<p>做法：每个 Promise 对象中管理一个异步任务，用 then 返回 Promise 对象，串联起来</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230829144835.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    * 目标：把回调函数嵌套代码，改成 Promise 链式调用结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 需求：获取默认第一个省，第一个市，第一个地区并展示在下拉菜单中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">let</span> pname <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 1. 得到 - 获取省份 Promise 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token comment\">// 2. 得到 - 获取城市 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> pname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token comment\">// 3. 得到 - 获取地区 Promise 对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> pname<span class=\"token punctuation\">,</span> cname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token keyword\">const</span> areaName <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> areaName</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"async-和-await-使用\"><a class=\"anchor\" href=\"#async-和-await-使用\">#</a> async 和 await 使用</h1>\n<p>&lt;u&gt; 定义 &lt;/u&gt;：async 函数是使用  <code>async</code>  关键字声明的函数。async 函数是 &lt;u&gt; <code>AsyncFunction</code> &lt;/u&gt; 构造函数的实例，并且其中允许使用  <code>await</code>  关键字。  <code>async</code>  和  <code>await</code>  关键字让我们可以用一种更简洁的方式写出基于 &lt;u&gt; <code>Promise</code> &lt;/u&gt; 的异步行为，而无需刻意地链式调用  <code>promise</code></p>\n<p>概念： 在 async 函数内，使用 await 关键字取代 then 函数，等待获取 Promise 对象成功状态的结果值</p>\n<p>示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 定义 async 修饰函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">// 2. await 等待 Promise 对象成功的结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> pname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> pname<span class=\"token punctuation\">,</span> cname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">const</span> areaName <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> areaName</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "AJAX",
                "前端",
                "JavaScript",
                "AJAX"
            ]
        },
        {
            "id": "https://60saint.github.io/front-end/AJAX/AJAX-%E5%8E%9F%E7%90%86%E7%AF%87/",
            "url": "https://60saint.github.io/front-end/AJAX/AJAX-%E5%8E%9F%E7%90%86%E7%AF%87/",
            "title": "AJAX - 原理篇",
            "date_published": "2023-08-23T16:00:00.000Z",
            "content_html": "<h1 id=\"xmlhttprequest\"><a class=\"anchor\" href=\"#xmlhttprequest\">#</a> XMLHttpRequest</h1>\n<ul>\n<li>\n<p>定义：  <code>XMLHttpRequest</code>  （XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。  <code>XMLHttpRequest</code>  在 AJAX 编程中被大量使用。</p>\n</li>\n<li>\n<p>关系：axios 内部采用 XMLHttpRequest 与服务器交互</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230824155906.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>好处：掌握使用 XHR 与服务器进行数据交互，了解 axios 内部原理</p>\n</li>\n</ul>\n<h2 id=\"使用-xmlhttprequest\"><a class=\"anchor\" href=\"#使用-xmlhttprequest\">#</a> 使用 XMLHttpRequest</h2>\n<p>步骤：</p>\n<ol>\n<li>创建 XMLHttpRequest 对象</li>\n<li>配置请求方法和请求 url 地址</li>\n<li>监听 loadend 事件，接收响应结果</li>\n<li>发起请求</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求方法'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'请求url网址'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 响应结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//response 是 xhr 对象里的一个固定属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这句代码执行后才会真正发起一次请求到服务器</span></pre></td></tr></table></figure><blockquote>\n<p>📗需求：获取并展示所有省份名字</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-p<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//xhr.response 是一个对象结构的 json 字符串，而 axios 会把返回的数据从 json 字符串转成 js 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"查询参数\"><a class=\"anchor\" href=\"#查询参数\">#</a> 查询参数</h2>\n<p>定义：浏览器提供给服务器的额外信息，让服务器返回浏览器想要的数据</p>\n<p>语法：<span class=\"exturl\" data-url=\"aHR0cDovL3h4eHguY29tL3h4eC94eHg=\">http://xxxx.com/xxx/xxx</span>? 参数名 1 = 值 1 &amp; 参数名 2 = 值 2</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230828111629.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city-p<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city?pname=河北省'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>📗案例：地区查询</p>\n<p>需求：输入省份和城市名字，查询地区列表</p>\n<p>请求地址：<span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvYXJlYQ==\">http://hmajax.itheima.net/api/area</span>? 参数名 1 = 值 1 &amp; 参数名 2 = 值 2</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230828112517.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// URLSearchParams 对象：把普通的 js 对象转成查询参数字符串的格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1. 创建 URLSearchParams 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 生成指定格式查询参数字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果：参数名 1 = 值 1&amp; 参数名 2 = 值 2</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 查询按钮 - 点击事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.sel-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 2. 收集省份和城市名字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 3. 组织查询参数字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">const</span> qObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       pname<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       cname</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 查询参数对象 -> 查询参数字符串</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>qObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 4. 使用 xhr 对象，查询地区列表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hmajax.itheima.net/api/area?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token keyword\">const</span> htmlStr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">areaName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li class=\"list-group-item\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>areaName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/li></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.list-group'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> htmlStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"数据提交\"><a class=\"anchor\" href=\"#数据提交\">#</a> 数据提交</h2>\n<ul>\n<li>\n<p>需求：通过 XHR 提交用户名和密码，完成注册功能</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230828195705.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>核心：</p>\n<p>请求头设置 Content-Type：application/json</p>\n<p>请求体携带 JSON 字符串</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求方法'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'请求url网址'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 告诉服务器我传递的内容是 JSON 字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 准备数据并转成 JSON 字符串</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'lxy0819'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> userStr <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringfy</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 发送请求体数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>userStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reg-btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>注册用户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.reg-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">assEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\txhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 准备提交的数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> userObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'lxy0819'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> userStr <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringfy</span><span class=\"token punctuation\">(</span>userObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 设置请求体，发起请求</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>userStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h1>\n<ul>\n<li>\n<p>定义：  <code>Promise</code>  对象用于表示一个异步操作的最终完成（或失败）及其结果值</p>\n</li>\n<li>\n<p>好处：</p>\n<ol>\n<li>逻辑更清晰</li>\n<li>了解 axios 函数内部运作机制</li>\n<li>能解决回调函数地狱问题</li>\n</ol>\n</li>\n<li>\n<p>语法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这两个形参为函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2. 执行异步任务 - 并传递结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 成功调用：resolve (值) 触发 then () 执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 失败调用：reject (值) 触发 catch () 执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 接收结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 成功</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>三种状态：</p>\n<p>一个 Promise 对象，必然处于以下几种状态之一</p>\n<ul>\n<li>待定（pending）：初始状态，既没有被兑现，也没有被拒绝</li>\n<li>已兑现（fulfilled）：意味着，操作成功完成</li>\n<li>已拒绝（rejected）：意味着，操作失败</li>\n</ul>\n<p>注意：Promise 对象一旦被兑现 / 拒绝就是已敲定了，状态无法再被改变</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 创建 Promise 对象（pending - 待定状态）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// Promise 对象创建时，这里的代码就会立刻执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 2. 执行异步代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 在异步函数执行之前，会先继续执行下面的代码，给 Promise 对象绑定 then 和 catch 的回调</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//resolve () => 'fulfilled 状态 - 已兑现 ' => then ()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求-成功结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 2s 后调用 resolve 后会把 Promise 对象的状态从 pending 改为 fulfilled</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//reject () => 'rejected 状态 - 已拒绝 ' => catch ()</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求-失败结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 两个函数都写，Promise 对象最后还是” 已兑现 “状态，因为先执行上面的代码。Promise 对象一旦被兑现 / 拒绝就是已敲定了，状态无法再被改变</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 3. 获取结果</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 模拟 AJAX 请求 - 成功结果</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Error: 模拟 AJAX 请求 - 失败结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>📗案例：使用 Promise + XHR 获取省份列表</p>\n<p>需求：使用 Promise 管理 XHR 获取省份列表，并展示到页面上</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230828211527.png\" alt=\"\" /></p>\n<p>步骤：</p>\n<ol>\n<li>创建 Promise 对象</li>\n<li>执行 XHR 异步代码，获取省份列表</li>\n<li>关联成功或失败函数，做后续处理</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 2. 执行 xhr 异步代码，获取省份列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token comment\">//xhr 如何判断响应成功还是失败？——2 开头的都是成功响应状态码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span><span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 3. 关联成功或失败函数，做后续处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 错误对象要用 console.dir 详细打印</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 服务器返回错误提示消息，插入到 p 标签显示</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"封装简易版-axios\"><a class=\"anchor\" href=\"#封装简易版-axios\">#</a> 封装简易版 axios</h1>\n<h2 id=\"获取省份列表\"><a class=\"anchor\" href=\"#获取省份列表\">#</a> 获取省份列表</h2>\n<p>需求：基于 Promise + XHR 封装 myAxios 函数，获取省份列表展示</p>\n<p>步骤：</p>\n<ol>\n<li>定义 myAxios 函数，接收配置对象，返回 Promise 对象</li>\n<li>发起 XHR 请求，默认请求方法为 GET</li>\n<li>调用成功 / 失败的处理程序</li>\n<li>使用 myAxios 函数，获取省份列表展示</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// XHR 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 调用成功 / 失败的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-p<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方法为 GET</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token comment\">// 3. 调用成功 / 失败的处理程序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 4. 使用 myAxios 函数，获取省份列表展示</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"获取地区列表\"><a class=\"anchor\" href=\"#获取地区列表\">#</a> 获取地区列表</h2>\n<p>需求：修改 myAxios 函数支持传递查询参数，获取 &quot;辽宁省&quot;，&quot;大连市&quot; 对应地区列表展示</p>\n<p>步骤：</p>\n<ol>\n<li>myAxios 函数调用后，判断 params 选项</li>\n<li>基于 URLSearchParams 转换查询参数字符串</li>\n<li>使用自己封装的 myAxios 函数展示地区列表</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// XHR 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 调用成功 / 失败的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-p<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 1. 判断有 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token comment\">// 2. 使用 URLSearchParams 转换，并携带到 url 上</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token comment\">// 把查询参数字符串，拼接在 url？后面</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 3. 使用 myAxios 函数，获取地区列表</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> <span class=\"token string\">'辽宁省'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> <span class=\"token string\">'大连市'</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"注册用户\"><a class=\"anchor\" href=\"#注册用户\">#</a> 注册用户</h2>\n<p>需求：修改 myAxios 函数支持传递请求体数据，完成注册用户功能</p>\n<p>步骤：</p>\n<ol>\n<li>myAxios 函数调用后，判断 data 选项</li>\n<li>转换数据类型，在 send 方法中发送</li>\n<li>使用自己封装的 myAxios 函数完成注册用户功能</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// XHR 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 调用成功 / 失败的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reg-btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>注册用户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 1. 判断有 data 选项，携带请求体</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\">// 2. 转换数据类型，在 send 中发送</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">const</span> jsonStr <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token comment\">// 如果没有请求体数据，正常的发起请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.reg-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 3. 使用 myAxios 函数，完成注册用户</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'itheima999'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'666666'</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"案例-天气预报\"><a class=\"anchor\" href=\"#案例-天气预报\">#</a> 案例 - 天气预报</h1>\n<p>步骤：</p>\n<ol>\n<li>获取北京市天气数据，展示</li>\n<li>搜索城市列表，展示</li>\n<li>点击城市，显示对应天气数据</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230829105444.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 1：默认显示 - 北京市天气</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *  1.1 获取北京市天气数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *  1.2 数据展示到页面</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 获取并渲染城市天气函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getWeather</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cityCode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 1.1 获取北京市天气数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/weather'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> cityCode</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> wObj <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 1.2 数据展示到页面</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 阳历和农历日期</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> dateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span class=\"dateShort\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &lt;span class=\"calendar\">农历&amp;nbsp;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      &lt;span class=\"dateLunar\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>dateLunar<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    &lt;/span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> dateStr</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 城市名字</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> wObj<span class=\"token punctuation\">.</span>area</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 当天气温</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">const</span> nowWStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"tem-box\"></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    &lt;span class=\"temp\"></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      &lt;span class=\"temperature\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>temperature<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      &lt;span>°&lt;/span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    &lt;/span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  &lt;/div></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  &lt;div class=\"climate-box\"></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &lt;div class=\"air\"></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      &lt;span class=\"psPm25\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>psPm25<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      &lt;span class=\"psPm25Level\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>psPm25Level<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    &lt;/div></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    &lt;ul class=\"weather-list\"></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      &lt;li></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        &lt;img src=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>weatherImg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" class=\"weatherImg\" alt=\"\"></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        &lt;span class=\"weather\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>weather<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      &lt;/li></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      &lt;li class=\"windDirection\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>windDirection<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/li></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      &lt;li class=\"windPower\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>wObj<span class=\"token punctuation\">.</span>windPower<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/li></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    &lt;/ul></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  &lt;/div></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.weather-box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> nowWStr</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 当天天气</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">const</span> twObj <span class=\"token operator\">=</span> wObj<span class=\"token punctuation\">.</span>todayWeather</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">const</span> todayWStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"range-box\"></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    &lt;span>今天：&lt;/span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    &lt;span class=\"range\"></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      &lt;span class=\"weather\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>twObj<span class=\"token punctuation\">.</span>weather<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      &lt;span class=\"temNight\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>twObj<span class=\"token punctuation\">.</span>temNight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      &lt;span>-&lt;/span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      &lt;span class=\"temDay\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>twObj<span class=\"token punctuation\">.</span>temDay<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      &lt;span>℃&lt;/span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    &lt;/span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  &lt;/div></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  &lt;ul class=\"sun-list\"></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      &lt;span>紫外线&lt;/span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      &lt;span class=\"ultraviolet\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>twObj<span class=\"token punctuation\">.</span>ultraviolet<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      &lt;span>湿度&lt;/span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      &lt;span class=\"humidity\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>twObj<span class=\"token punctuation\">.</span>humidity<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span>%</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      &lt;span>日出&lt;/span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      &lt;span class=\"sunriseTime\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>twObj<span class=\"token punctuation\">.</span>sunriseTime<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      &lt;span>日落&lt;/span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      &lt;span class=\"sunsetTime\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>twObj<span class=\"token punctuation\">.</span>sunsetTime<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  &lt;/ul></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.today-weather'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> todayWStr</pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 7 日天气预报数据展示</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">const</span> dayForecast <span class=\"token operator\">=</span> wObj<span class=\"token punctuation\">.</span>dayForecast</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">const</span> dayForecastStr <span class=\"token operator\">=</span> dayForecast<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li class=\"item\"></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      &lt;div class=\"date-box\"></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        &lt;span class=\"dateFormat\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>dateFormat<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        &lt;span class=\"date\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      &lt;/div></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      &lt;img src=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>weatherImg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" alt=\"\" class=\"weatherImg\"></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      &lt;span class=\"weather\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>weather<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      &lt;div class=\"temp\"></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        &lt;span class=\"temNight\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>temNight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span>-</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        &lt;span class=\"temDay\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>temDay<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        &lt;span>℃&lt;/span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      &lt;/div></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      &lt;div class=\"wind\"></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        &lt;span class=\"windDirection\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>windDirection<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        &lt;span class=\"windPower\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>windPower<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      &lt;/div></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    &lt;/li></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.week-wrap'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> dayForecastStr</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">// 默认进入网页 - 就要获取天气数据（北京市城市编码：'110100'）</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token function\">getWeather</span><span class=\"token punctuation\">(</span><span class=\"token string\">'110100'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"109\"></td><td><pre> * 目标 2：搜索城市列表</pre></td></tr><tr><td data-num=\"110\"></td><td><pre> *  2.1 绑定 input 事件，获取关键字</pre></td></tr><tr><td data-num=\"111\"></td><td><pre> *  2.2 获取展示城市列表数据</pre></td></tr><tr><td data-num=\"112\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">// 2.1 绑定 input 事件，获取关键字。当一个 &lt;input>, &lt;select>, 或 &lt;textarea> 元素的 value 被修改时，会触发 input 事件</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search-city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">// 2.2 获取展示城市列表数据</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/weather/city'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>      <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">const</span> liStr <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      <span class=\"token comment\">// 给 li 设置自定义属性是为了点击 li 时获取该 li 的城市编码</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li class=\"city-item\" data-code=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>code<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/li></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search-list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> liStr</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"132\"></td><td><pre> * 目标 3：切换城市天气</pre></td></tr><tr><td data-num=\"133\"></td><td><pre> *  3.1 绑定城市点击事件，获取城市 code 值</pre></td></tr><tr><td data-num=\"134\"></td><td><pre> *  3.2 调用获取并展示天气的函数</pre></td></tr><tr><td data-num=\"135\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token comment\">// 3.1 绑定城市点击事件，获取城市 code 值</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search-list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'city-item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token comment\">// 只有点击城市 li 才会走这里</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">const</span> cityCode <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>code</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">// 3.2 调用获取并展示天气的函数</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token function\">getWeather</span><span class=\"token punctuation\">(</span>cityCode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "AJAX",
                "前端",
                "JavaScript",
                "AJAX"
            ]
        },
        {
            "id": "https://60saint.github.io/front-end/JS/JS%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1Object%E8%AF%A6%E8%A7%A3/",
            "url": "https://60saint.github.io/front-end/JS/JS%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1Object%E8%AF%A6%E8%A7%A3/",
            "title": "JS内置对象 Object 详解",
            "date_published": "2023-08-06T16:00:00.000Z",
            "content_html": "<h1 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h1>\n<h2 id=\"objectkeys\"><a class=\"anchor\" href=\"#objectkeys\">#</a>  <code>Object.keys()</code></h2>\n<p><strong> <code>Object.keys()</code> </strong> 静态方法返回一个由给定对象自身的可枚举的字符串键属性名组成的数组。</p>\n<ul>\n<li>\n<p>尝试一下</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'somestring'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Expected output: Array [\"a\", \"b\", \"c\"]</span></pre></td></tr></table></figure></li>\n<li>\n<p>语法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>参数：</p>\n<ul>\n<li>\n<p><code>obj</code></p>\n<p>一个对象</p>\n</li>\n</ul>\n</li>\n<li>\n<p>返回值：</p>\n<p>一个由给定对象自身可枚举的字符串键属性键组成的数组。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<blockquote>\n<p>📗使用  <code>Object.keys()</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 简单数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1', '2']</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 类数组对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1', '2']</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 键的顺序随机的类数组对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> anObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">100</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>anObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['2', '7', '100']</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>🍏在基本类型中使用  <code>Object.keys()</code></p>\n<p>非对象参数会强制转换为对象。只有字符串可以有自己的可枚举属性，而其他所有基本类型都返回一个空数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 字符串具有索引作为可枚举的自有属性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1', '2']</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 其他基本类型没有自有属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n",
            "tags": [
                "前端",
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://60saint.github.io/front-end/AJAX/AJAX-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E7%AF%87/",
            "url": "https://60saint.github.io/front-end/AJAX/AJAX-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E7%AF%87/",
            "title": "AJAX - 综合案例篇",
            "date_published": "2023-08-02T16:00:00.000Z",
            "content_html": "<h1 id=\"案例-图书管理\"><a class=\"anchor\" href=\"#案例-图书管理\">#</a> 案例 - 图书管理</h1>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230803103902.png\" alt=\"\" /></p>\n<ol>\n<li>Bootstrap 弹框</li>\n<li>渲染列表（查）</li>\n<li>新增图书（增）</li>\n<li>删除图书（删）</li>\n<li>编辑图书（改）</li>\n</ol>\n<h2 id=\"bootstrap-弹框\"><a class=\"anchor\" href=\"#bootstrap-弹框\">#</a> Bootstrap 弹框</h2>\n<p>Bootstrap 弹框 = Modal = 模态</p>\n<p>功能：不离开当前页面，显示单独内容，供用户操作</p>\n<h3 id=\"通过属性控制\"><a class=\"anchor\" href=\"#通过属性控制\">#</a> 通过属性控制</h3>\n<p>单纯显示 / 隐藏</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230803104312.png\" alt=\"\" /></p>\n<p>步骤：</p>\n<ol>\n<li>\n<p>引入 bootstrap.css</p>\n</li>\n<li>\n<p>准备弹框标签，确认结构</p>\n</li>\n<li>\n<p>通过 bootstrap 内部的自定义属性，控制弹框的显示和隐藏</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">data-bs-toggle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-bs-target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css选择器<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>显示弹框<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">data-bs-dismiss</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Close<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 bootstrap.css --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 bootstrap.js --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-bs-toggle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-bs-target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.my-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>显示弹框<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 以下是从 bootstrap 引入的 Modal --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 给以下的弹框设置一个自己的类名，方便上面的 button 按钮绑定 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal my-box<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-dialog<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 弹框 - 内容 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 弹框 - 头部 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Modal title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-dismiss</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Close<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&times;\">&amp;times;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 弹框 - 身体 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Modal body text goes here.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 弹框 - 底部 --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-secondary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-dismiss</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Close<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Save changes<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"通过-js-控制\"><a class=\"anchor\" href=\"#通过-js-控制\">#</a> 通过 JS 控制</h3>\n<p>额外逻辑代码，增加功能：</p>\n<ol>\n<li>点击 “编辑姓名” 按钮弹出弹框，同时赋予输入框默认值</li>\n<li>点击 “保存” 按钮获取输入框数据提交给服务器</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230803113128.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建弹框对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> modalDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css选择器'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> modal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bootstrap<span class=\"token punctuation\">.</span>Modal</span><span class=\"token punctuation\">(</span>modelDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 显示弹框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 隐藏弹框</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>modal<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 bootstrap.css --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 bootstrap.js --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary edit-btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>编辑姓名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 以下是从 bootstrap 引入的 Modal --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 给以下的弹框设置一个自己的类名，方便上面的 button 按钮绑定 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal name-box<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-dialog<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 弹框 - 内容 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 弹框 - 头部 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请输入姓名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-dismiss</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Close<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&times;\">&amp;times;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 弹框 - 身体 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>姓名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 弹框 - 底部 --></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-secondary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-dismiss</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>取消<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary save-btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>保存<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 创建弹框对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> modalDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.name-box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> modal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bootstrap<span class=\"token punctuation\">.</span>Modal</span><span class=\"token punctuation\">(</span>modelDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 编辑姓名 -> 点击 -> 赋予默认姓名 -> 弹框显示</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'默认姓名'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 显示弹框</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 保存 -> 点击 -> 获取姓名 -> 弹框隐藏</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.save-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 2. 隐藏弹框</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    modal<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"图书管理-渲染列表\"><a class=\"anchor\" href=\"#图书管理-渲染列表\">#</a> 图书管理 - 渲染列表</h2>\n<p>自己的图书数据：给自己起个外号，并告诉服务器，默认会有三本书，基于这三本书做数据的增删改查</p>\n<p>获取数据 -&gt; 渲染数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> creator <span class=\"token operator\">=</span> <span class=\"token string\">'老张'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 封装 - 获取并渲染图书列表函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getBooksList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/books'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            creator</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">const</span> bookList <span class=\"token operator\">=</span> reault<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个数组，每个元素是一个图书对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 渲染数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">const</span> htmlStr <span class=\"token operator\">=</span> bookList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;tr></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      \t\t\t\t\t&lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/td></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                      \t&lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>bookname<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/td></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                      \t&lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>author<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/td></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                      \t&lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>publisher<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/td></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                      \t&lt;td data-id=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        \t&lt;span class=\"del\">删除&lt;/span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        \t&lt;span class=\"edit\">编辑&lt;/span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                      \t&lt;/td></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    \t\t\t\t&lt;/tr></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 自定义属性 data-id，方便删除图书时判断删除的是哪个图书</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> htmlStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 网页加载运行，获取并渲染列表一次</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">getBooksList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"图书管理-新增图书\"><a class=\"anchor\" href=\"#图书管理-新增图书\">#</a> 图书管理 - 新增图书</h2>\n<p>新增图书 - 弹框（显示 &amp; 隐藏） -&gt; 收集数据 &amp; 提交保存 -&gt; 刷新 - 图书列表</p>\n<p>&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&quot;1&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&quot;token comment&quot;&gt;// 创建弹框对象 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;2&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addModalDom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'.add-modal'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;3&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addModal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addModalDom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;4&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&quot;token comment&quot;&gt;// 保存按钮 -&gt; 点击 -&gt; 隐藏弹框 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;5&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'.add-btn'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;6&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&quot;token comment&quot;&gt;// 收集表单数据，并提交到服务器保存 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;7&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addForm &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'.add-form'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;8&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bookObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addForm&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;9&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&quot;token comment&quot;&gt;// 提交到服务器 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;10&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&quot;token function&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;11&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'<span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvYm9va3M=\">http://hmajax.itheima.net/api/books</span>'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;12&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;13&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;14&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;bookObj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;15&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            creator&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;16&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;17&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;18&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token comment&quot;&gt;// 添加成功后，重新请求并渲染图书列表 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;19&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token function&quot;&gt;getBookList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;20&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token comment&quot;&gt;// 重置表单，不写这行代码的话点保存按钮再点添加按钮会发现表单还填着已提交的内容 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;21&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        addForm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;22&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&quot;token comment&quot;&gt;// 隐藏弹框 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;23&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        addModal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;24&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&quot;25&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</p>\n<h2 id=\"图书管理-删除图书\"><a class=\"anchor\" href=\"#图书管理-删除图书\">#</a> 图书管理 - 删除图书</h2>\n<p>绑定点击事件（获取图书 id） -&gt; 调用删除接口 -&gt; 刷新图书列表</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除元素 -> 点击（事件委托，委托给 tbody，就不需要给每个删除按钮循环绑定事件了）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 判断点击的是删除元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'del'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取图书 id</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">const</span> theId <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 调用删除接口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 接口文档写的参数位置为 path</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hmajax.itheima.net/api/books/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>theId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">getBooksList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"图书管理-编辑图书\"><a class=\"anchor\" href=\"#图书管理-编辑图书\">#</a> 图书管理 - 编辑图书</h2>\n<p>编辑图书 - 弹框（显示 &amp; 隐藏） -&gt; 表单（数据回显） -&gt; 保存修改 &amp; 刷新列表</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> editDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit-modal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> editModal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bootstrap<span class=\"token punctuation\">.</span>Modal</span><span class=\"token punctuation\">(</span>editDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'edit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取当前编辑图书数据 -> 回显到编辑表单中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">const</span> theId <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hmajax.itheima.net/api/books/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>theId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 默认 get 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">const</span> bookObj <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            document.querySelector('.edit-form .bookname').value = bookObj.bookname;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            document.querySelector('.edit-form .author').value = bookObj.author; </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 数据对象的属性和标签类名一致</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 遍历数据对象，使用属性去获取对应的标签，快速取值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>bookObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//keys 是一个数组，每个元素为 bookObj 属性名的字符串</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            keys<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.edit-form .</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> bookObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        editModal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 修改按钮 -> 点击 -> 隐藏弹框</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">const</span> editForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit-form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>id<span class=\"token punctuation\">,</span> bookname<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> publisher<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>editForm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hmajax.itheima.net/api/books/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            bookname<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            author<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            pubisher<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            creator</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">getBooksList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    editModal<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"图片上传\"><a class=\"anchor\" href=\"#图片上传\">#</a> 图片上传</h1>\n<ol>\n<li>\n<p>获取图片文件对象</p>\n</li>\n<li>\n<p>使用 FormData 携带图片文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>参数名<span class=\"token punctuation\">,</span> 值<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>提交表单数据到服务器，使用图片 url 网址</p>\n</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230807105911.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 文件选择元素 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>upload<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-img<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 监听文件选择元素选完图片之后的 change 改变事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.upload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 1. 获取图片文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//e.target 是触发事件的文件选择元素 &amp; lt;input type=\"file\" class=\"upload\"></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 刚刚用户选的文件就在 inupt 元素里边，原生属性 files 可以拿到文件选择元素 input 里边的文件列表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 2. 使用 FormData 携带图片文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 3. 提交到服务器，获取图片 url 网址使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/uploadimg'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> fd</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 取出图片 url 网址，用 img 标签加载显示</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">const</span> imgUrl <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgUrl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"案例-网站换肤\"><a class=\"anchor\" href=\"#案例-网站换肤\">#</a> 案例 - 网站换肤</h1>\n<ol>\n<li>选择图片上传，设置 body 背景</li>\n<li>上传成功时，保存 url 网址</li>\n<li>网页运行后，获取 url 网址使用</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>更换背景<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-ipt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.bg-ipt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/uploadimg'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> fd</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> imgUrl <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>imgUrl<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 2. 上传成功时，“保存” 图片 url 网址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgImg'</span><span class=\"token punctuation\">,</span> imgUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 3. 网页运行后，“获取” url 网址使用</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> bgUrl <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgImg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>bgUrl <span class=\"token operator\">&amp;&amp;</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>bgUrl<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果 bgUrl 值为空，则 &amp; amp;&amp; 后面的代码就不执行了</span></pre></td></tr></table></figure><h1 id=\"案例-个人信息设置\"><a class=\"anchor\" href=\"#案例-个人信息设置\">#</a> 案例 - 个人信息设置</h1>\n<p>步骤：</p>\n<ol>\n<li>信息渲染</li>\n<li>头像修改</li>\n<li>提交表单</li>\n<li>结果提示</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230807124843.png\" alt=\"\" /></p>\n<h2 id=\"信息渲染\"><a class=\"anchor\" href=\"#信息渲染\">#</a> 信息渲染</h2>\n<p>自己的用户信息：给自己起个外号，并告诉服务器，获取对应的用户信息</p>\n<p>获取数据 -&gt; 渲染数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> creator <span class=\"token operator\">=</span> <span class=\"token string\">'lxy'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1.1 获取用户的数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">aixos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/settings'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        creator</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> userObj <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span><span class=\"token comment\">// &#123;avator: ' 头像图片文件的网址 ', desc: ' 我是李欣怡，大家好！！！', email: 'lxy1@itcast.cn', gender: 1, nickname: 'lxy1'&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 1.2 回显数据到标签上</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>userObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'avator'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.prew'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> userObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'gender'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 获取性别单选框：[男 radio 元素，女 radio 元素]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">const</span> gRadioList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.gender'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 获取性别数字：0 男，1 女</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">const</span> gNum <span class=\"token operator\">=</span> userObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            gRadioList<span class=\"token punctuation\">[</span>gNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> userObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"头像修改\"><a class=\"anchor\" href=\"#头像修改\">#</a> 头像修改</h2>\n<p>选择头像文件 -&gt; 提交保存 + 回显</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>upload<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>更换头像<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>upload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>upload<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.upload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'avator'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'creator'</span><span class=\"token punctuation\">,</span> creator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/avator'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> fd</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">const</span> imgUrl <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>avator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 把新的头像回显到页面上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.prew'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgUrl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"信息修改\"><a class=\"anchor\" href=\"#信息修改\">#</a> 信息修改</h2>\n<p>收集表单 -&gt; 提交保存</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.submit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 收集表单信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> userForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.user-form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> userObj <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>userForm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    userObj<span class=\"token punctuation\">.</span>creator <span class=\"token operator\">=</span> creator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 性别数字字符串，转成数字类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    userObj<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>userObj<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 提交到服务器保存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/settings'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> userObj</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这行开始为” 提示框 “代码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">const</span> toastDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-toast'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> toast <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bootstrap<span class=\"token punctuation\">.</span>Toast</span><span class=\"token punctuation\">(</span>toastDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        toast<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"提示框\"><a class=\"anchor\" href=\"#提示框\">#</a> 提示框</h2>\n<p>确认 - 提示框 -&gt; 控制显示</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toast my-toast<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-bs-delay</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toast-body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-success info-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            提示框内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建提示框对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> toastDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css选择器'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> toast <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bootstrap<span class=\"token punctuation\">.</span>Toast</span><span class=\"token punctuation\">(</span>toastDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 显示提示框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>toast<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在上一节 “信息修改” 中继续修改代码</p>\n",
            "tags": [
                "前端",
                "AJAX",
                "前端",
                "JavaScript",
                "AJAX"
            ]
        },
        {
            "id": "https://60saint.github.io/front-end/AJAX/AJAX-%E5%85%A5%E9%97%A8%E7%AF%87/",
            "url": "https://60saint.github.io/front-end/AJAX/AJAX-%E5%85%A5%E9%97%A8%E7%AF%87/",
            "title": "AJAX - 入门篇",
            "date_published": "2023-08-01T16:00:00.000Z",
            "content_html": "<h1 id=\"ajax-入门篇\"><a class=\"anchor\" href=\"#ajax-入门篇\">#</a> AJAX - 入门篇</h1>\n<h1 id=\"ajax-概念和-axios-使用\"><a class=\"anchor\" href=\"#ajax-概念和-axios-使用\">#</a> AJAX 概念和 axios 使用</h1>\n<h2 id=\"什么是-ajax\"><a class=\"anchor\" href=\"#什么是-ajax\">#</a> 什么是 AJAX</h2>\n<p>定义：AJAX [ˈeɪdʒæks] 是异步的 JavaScript 和 XML（<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML）。简单点说，就是使用  <code>XMLHttpRequest</code>  对象与服务器通信。它可以使用 JSON，XML，HTML 和 text 文本等格式发送和接收数据。AJAX 最吸引人的就是它的 “异步” 特性，也就是说它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。</p>\n<p>概念：AJAX 是浏览器与服务器进行数据通信的技术</p>\n<h2 id=\"怎么用-ajax\"><a class=\"anchor\" href=\"#怎么用-ajax\">#</a> 怎么用 AJAX</h2>\n<ol>\n<li>先使用 axios [æk‘sioʊs] 库，与服务器进行数据通信\n<ul>\n<li>基于 XMLHttpRequest 封装、代码简单、月下载量在 14 亿次</li>\n<li>Vue、React 项目中都会用到 axios</li>\n</ul>\n</li>\n<li>再学习 XMLHttpRequest 对象的使用，了解 AJAX 底层原理</li>\n</ol>\n<h2 id=\"axios-使用\"><a class=\"anchor\" href=\"#axios-使用\">#</a> axios 使用</h2>\n<p>语法：</p>\n<ol>\n<li>\n<p>引入 axios.js：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9heGlvcy9kaXN0L2F4aW9zLm1pbi5qcw==\">https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js</span></p>\n</li>\n<li>\n<p>使用 axios 函数</p>\n<ul>\n<li>传入配置对象</li>\n<li>再用 .then 回调函数接收结果，并做后续处理</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 对服务器返回的数据做后续处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>📗</p>\n<p>需求：请求目标资源地址，拿到省份列表数据，显示到页面</p>\n<p>目标资源地址：<span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvcHJvdmluY2U=\">http://hmajax.itheima.net/api/province</span></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802095404.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">&lt;!-- 引入 axios 库 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-p<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code class=\"language-JS\">// 使用 axios 函数\naxios(&#123;\n   url: 'http://hmajax.itheima.net/api/province'\n&#125;).then(result =&gt; &#123;\n   // 好习惯：多打印，确认属性名\n   console.log(result);\n   console.log(result.data.list);\n   console.log(result.data.list.join('&lt;br&gt;'));\n   // 把准备好的省份列表插入到页面\n   document.querySelector('.my-p').innerHTML = result.data.list.join('&lt;br&gt;');\n&#125;)\n</code></pre>\n<p>控制台打印如下：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/eeffa77a7f52fc64c0ef6993010a26b.jpg\" alt=\"\" /></p>\n</blockquote>\n<h1 id=\"认识-url\"><a class=\"anchor\" href=\"#认识-url\">#</a> 认识 URL</h1>\n<p>知道作用和组成，方便与后端人员沟通</p>\n<h2 id=\"什么是-url\"><a class=\"anchor\" href=\"#什么是-url\">#</a> 什么是 URL</h2>\n<p>定义：</p>\n<p><strong>统一资源定位符</strong>（英语：<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator，缩写：<strong>URL</strong>，或称<strong>统一资源定位器、定位地址、URL 地址</strong>）俗称网页地址，简称<strong>网址</strong>，是因特网上标准的资源的地址（Address），如同在网络上的门牌。它最初是由蒂姆・伯纳斯 - 李发明用来作为万维网的地址，现在它已被万维网联盟编制为因特网标准 RFC 1738。</p>\n<p>例如：</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29tL2luZGV4Lmh0bWw=\">https://www.baidu.com/index.html</span></p>\n<p>网页资源</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXRoZWltYS5jb20vaW1hZ2VzL2xvZ28ucG5n\">https://www.itheima.com/images/logo.png</span></p>\n<p>图片资源</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvcHJvdmluY2U=\">http://hmajax.itheima.net/api/province</span></p>\n<p>数据资源</p>\n</li>\n</ul>\n<p>概念：</p>\n<p>URL 就是统一资源定位符，简称网址，用于访问网络上的资源</p>\n<h2 id=\"url-的组成\"><a class=\"anchor\" href=\"#url-的组成\">#</a> URL 的组成</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802101615.png\" alt=\"\" /></p>\n<h3 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h3>\n<p>http 协议：超文本传输协议，规定浏览器和服务器之间传输数据的格式</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802101755.png\" alt=\"\" /></p>\n<p>协议范围：http，https，...</p>\n<h3 id=\"域名\"><a class=\"anchor\" href=\"#域名\">#</a> 域名</h3>\n<p>标记服务器在互联网中方位</p>\n<p>例如：</p>\n<ul>\n<li>百度服务器 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span></li>\n<li>淘宝服务器 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YW9iYW8uY29t\">www.taobao.com</span></li>\n</ul>\n<h3 id=\"资源路径\"><a class=\"anchor\" href=\"#资源路径\">#</a> 资源路径</h3>\n<p>标记资源在服务器下的具体位置</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802102210.png\" alt=\"\" /></p>\n<blockquote>\n<p>📗获取 - 新闻列表</p>\n<p>需求：使用 axios 从服务器拿到新闻列表数据</p>\n<p>目标资源地址：<span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvbmV3cw==\">http://hmajax.itheima.net/api/news</span></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/news'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   cosnole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/de00985cb4b9a1953dbcaf09f70fd08.jpg\" alt=\"\" /></p>\n</blockquote>\n<h2 id=\"url-查询参数\"><a class=\"anchor\" href=\"#url-查询参数\">#</a> URL 查询参数</h2>\n<p>定义：浏览器提供给服务器的额外信息，让服务器返回浏览器想要的数据</p>\n<p>语法：<span class=\"exturl\" data-url=\"aHR0cDovL3h4eHguY29tL3h4eC94eHg/JUU1JThGJTgyJUU2JTk1JUIwJUU1JTkwJThE\">http://xxxx.com/xxx/xxx? 参数名</span> 1 = 值 1 &amp; 参数名 2 = 值 2</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802103146.png\" alt=\"\" /></p>\n<blockquote>\n<p>📗axios－查询参数</p>\n<p>语法：使用 axios 提供的 params 选项</p>\n<p>注意：axios 在运行时把参数名和值，会拼接到 url? 参数名 = 值</p>\n<p>城市列表：<span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvY2l0eT9wbmFtZQ==\">http://hmajax.itheima.net/api/city?pname</span> = 河北省</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 查询参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> <span class=\"token string\">'河北省'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>🍏案例 - 地区查询</p>\n<p>需求：根据输入的省份名字和城市名字，查询地区并渲染列表</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/985b3a58a7060ad20dbd572998ad36c.jpg\" alt=\"\" /></p>\n<p>首先：确定 URL 网址和参数说明</p>\n<ul>\n<li>查询某个省内某个城市的所有地区: <span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvYXJlYQ==\">http://hmajax.itheima.net/api/area</span></li>\n<li>参数名：</li>\n<li>pname：省份名字或直辖市名字，比如北京、福建省、辽宁省...</li>\n<li>cname：城市名字，比如北京市、厦门市、大连市...</li>\n</ul>\n<p>完整：<span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvYXJlYT9wbmFtZQ==\">http://hmajax.itheima.net/api/area?pname</span> = 北京 &amp; cname = 北京市</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 查询按钮 - 点击事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.sel-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 2. 获取省份和城市名字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> pname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">let</span> cname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 3. 基于 axios 请求地区列表数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token comment\">// pname: pname,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           <span class=\"token comment\">// cname: cname,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token comment\">// ES6 对象当中属性名和属性值变量同名时可以只写一个，属性名是后端要求的，不能乱写，属性值变量名可以随便定义</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           pname<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           cname</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token comment\">// 把数据转成 li 标签插入到页面上</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token keyword\">let</span> theLi <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">areaName</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li class=\"list-group-item\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>areaName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/li></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//.join ('') 前的代码返回一个数组，每个元素是 '&lt;li class=\"list-group-item\">$&#123;areaName&#125;&lt;/li>' 字符串</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.list-group'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> theLi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"常用请求方法和数据提交\"><a class=\"anchor\" href=\"#常用请求方法和数据提交\">#</a> 常用请求方法和数据提交</h1>\n<h2 id=\"常用请求方法\"><a class=\"anchor\" href=\"#常用请求方法\">#</a> 常用请求方法</h2>\n<p>请求方法：对服务器资源，要执行的操作</p>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>获取数据</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>数据提交</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>修改数据（全部）</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>修改数据（部分）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据提交\"><a class=\"anchor\" href=\"#数据提交\">#</a> 数据提交</h2>\n<p>场景：当数据需要在服务器上保存</p>\n<p>url：请求的 URL 网址</p>\n<p>method：请求的方法，GET 为默认值，可以省略（不区分大小写）</p>\n<p>data：提交数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'请求方法'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token literal-property property\">参数名</span><span class=\"token operator\">:</span> 值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 对服务器返回的数据做后续处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>📗数据提交－注册账号</p>\n<p>需求：通过 axios 提交用户名和密码，完成注册功能</p>\n<p>注册用户 URL 地址：<span class=\"exturl\" data-url=\"aHR0cDovL2htYWpheC5pdGhlaW1hLm5ldC9hcGkvcmVnaXN0ZXI=\">http://hmajax.itheima.net/api/register</span></p>\n<p>请求方法：POST</p>\n<p>参数名：</p>\n<p>username 用户名（中英文和数字组成，最少 8 位）</p>\n<p>password 密码（最少 6 位）</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>注册用户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token comment\">// 指定请求方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token comment\">// 提交数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'lxy0819'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"axios-错误处理\"><a class=\"anchor\" href=\"#axios-错误处理\">#</a> axios 错误处理</h2>\n<p>场景：再次注册相同的账号，会遇到报错信息</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802130519.png\" alt=\"\" /></p>\n<p>处理：用更直观的方式，给普通用户展示错误信息</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802130658.png\" alt=\"\" /></p>\n<p>语法：在 then 方法的后面，通过点语法调用 catch 方法，传入回调函数并定义形参</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 请求选项</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 处理数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 处理错误</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>📗注册案例，重复注册时通过弹框提示用户错误原因</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token comment\">// 指定请求方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token comment\">// 提交数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'lxy0819'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token comment\">// 处理错误信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"http-协议-报文\"><a class=\"anchor\" href=\"#http-协议-报文\">#</a> HTTP 协议 - 报文</h1>\n<h2 id=\"http-协议-请求报文\"><a class=\"anchor\" href=\"#http-协议-请求报文\">#</a> HTTP 协议 - 请求报文</h2>\n<p>HTTP 协议：规定了浏览器发送及服务器返回内容的格式</p>\n<p>请求报文：浏览器按照 HTTP 协议要求的格式，发送给服务器的内容</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'itheima007'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'7654321'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802141030.png\" alt=\"\" /></p>\n<p>请求报文的组成部分有：</p>\n<ol>\n<li>\n<p>请求行：请求方法，URL，协议</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\">http://hmajax.itheima.net/api/register</span> <span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr></table></figure><p>请求方法：由代码中的 method 选项设置</p>\n<p>URL：由代码中的 url 选项设置</p>\n<p>协议：自动携带</p>\n</li>\n<li>\n<p>请求头：以键值对的格式携带的附加信息</p>\n<p>请求头里的内容并没有在代码中书写，它是自动生成的</p>\n<p>注意这行，规定这次请求时携带的内容类型是一个 json 的字符串：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr></table></figure><p>所以服务器就会接着往下找，找到空行之后服务器就会知道上面的内容已经告一段落，再往下找就是浏览器发来的内容数据了</p>\n</li>\n<li>\n<p>空行：分隔请求头，空行之后的是发送给服务器的资源</p>\n</li>\n<li>\n<p>请求体：发送的资源</p>\n<p>这里是 json 字符串，是在代码当中的 data 项携带的</p>\n</li>\n</ol>\n<p>通过 Chrome 的网络面板查看请求报文：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/88c1653da4bd0a936a7d87f131fd662.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802143324.png\" alt=\"\" /></p>\n<h2 id=\"http-响应报文\"><a class=\"anchor\" href=\"#http-响应报文\">#</a> HTTP - 响应报文</h2>\n<p>HTTP 协议：规定了浏览器发送及服务器返回内容的格式</p>\n<p>响应报文：服务器按照 HTTP 协议要求的格式，返回给浏览器的内容</p>\n<p>以下是再次注册已注册的账号后，服务器返回的响应报文：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802143940.png\" alt=\"\" /></p>\n<ol>\n<li>\n<p>响应行（状态行）：协议、HTTP 响应状态码、状态信息</p>\n<p>HTTP 响应状态码：用来表明请求是否成功完成</p>\n<p>比如：404（服务器找不到资源）</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 响应状态码 404 的可能原因之一是 url 写错了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/registerweer1ddd'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'itheima007'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'7654321'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>信息</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>成功</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>重定向消息</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端错误</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务端错误</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>响应头：以键值对的格式携带的附加信息，比如：Content-Type</p>\n</li>\n<li>\n<p>空行：分隔响应头，空行之后的是服务器返回的资源</p>\n</li>\n<li>\n<p>响应体：返回的资源</p>\n</li>\n</ol>\n<p>通过 Chrome 的网络面板查看响应报文：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802145010.png\" alt=\"\" /></p>\n<h1 id=\"接口文档\"><a class=\"anchor\" href=\"#接口文档\">#</a> 接口文档</h1>\n<p><strong>接口文档</strong>：描述接口的文章 （后端工程师）</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802145656.png\" alt=\"\" /></p>\n<p>位置 - query：表示参数 pname 和值要在查询参数里传递，写在 params 里面</p>\n<p><strong>接口</strong>：使用 AJAX 和服务器通讯时，使用的 URL，请求方法，以及参数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> <span class=\"token string\">'辽宁省'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>传送门</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGlmb3guY29tL2FwaWRvYy9zaGFyZWQtMWIwZGQ4NGYtZmFhOC00MzVkLWIzNTUtNWE4YTMyOWUzNGE4\">AJAX 阶段接口文档</span></p>\n<blockquote>\n<p>📗案例 - 注册账号</p>\n<p><strong>接口文档：</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802150607.png\" alt=\"\" /></p>\n<p>Body 参数的意思是在请求体 data 里边把用户名和密码携带<br />\n application/json 的意思是这次交的请求体数据得是 json 字符串</p>\n<p><strong>接口：</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 在 axios 内部的源码如果发现 data 属性的值是一个对象，内部就会帮你把这个对象转成 json 字符串携带给服务器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'lxy0819'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>🍏案例 - 登录</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>用户登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 用户登录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'lxy0819'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       \t<span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"案例-用户登录\"><a class=\"anchor\" href=\"#案例-用户登录\">#</a> 案例 - 用户登录</h1>\n<ol>\n<li>点击登录时，判断用户名和密码长度</li>\n<li>提交数据和服务器通信</li>\n<li>提示信息</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802152744.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 目标 1：点击登录时，用户名和密码长度判断，并提交数据和服务器通信</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 目标 2：使用提示框，反馈提示消息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2.1 获取提示框</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> myAlert <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.alert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 2.2 封装提示框函数，重复调用，满足提示需求</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   功能：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   1. 显示提示框</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   2. 不同提示文字 msg，和成功绿色失败红色 isSuccess（true 成功，false 失败）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   3. 过 2 秒后，让提示框自动消失</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> isSuccess</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 显示提示框</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 提示框内文字</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 提示框背景颜色添加</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">const</span> bgStyle <span class=\"token operator\">=</span> isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bgStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 过 2 秒隐藏</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 同时去除提示框背景颜色，避免类名冲突</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>bgStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 1.1 登录 - 点击事件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn-login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 1.2 获取用户名和密码</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 1.3 判断长度</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名必须大于等于8位'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名必须大于等于8位'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码必须大于等于6位'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码必须大于等于6位'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 1.4 基于 axios 提交用户名和密码</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            password</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 成功才会进入 then</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 失败才会进入 catch</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"form-serialize-插件\"><a class=\"anchor\" href=\"#form-serialize-插件\">#</a> form-serialize 插件</h1>\n<p>作用：快速收集表单元素的值</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./lib/form-serialize.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pwd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>提交<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!-- 目标：点击提交时，使用 form-serialize 插件，快速收集表单元素值 --></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example-form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 参数 1：要获取哪个表单的数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       参数 2：配置对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         hash 设置获取数据 data 的结构</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           - true：js 对象 &#123;uname: 'lxy0819', pwd: '123456'&#125;（推荐）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           - false：查询字符串 'uname=lxy0819&amp;pwd=123456'</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         empty 设置是否获取空值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           - true：获取空值 &#123;uname: '', pwd: '123456'&#125;（推荐，获取到的数据 data 结构与标签结构一致）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           - false：不获取空值 &#123;pwd: '123456'&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// &#123;uname: 'lxy0819', pwd: '123456'&#125;。获取到数据对象的属性名来自于 input 元素的 name 属性，建议 name 属性的值和接口文档参数名一致</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>📗案例 - 用户登录</p>\n<p>使用 form-serialize 插件，收集用户名和密码</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/60sAINT/images@latest/20230802154317.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 记得在 head 引入插件和 axios 库 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 表单 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mb-3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>账号名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mb-3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>密码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary btn-login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> myAlert <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.alert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> isSuccess</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   myAlert<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> bgStyle <span class=\"token operator\">=</span> isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bgStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>bgStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn-login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 使用 serialize 函数，收集登录表单里用户名和密码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//data 为 &#123;username: 'lxy0819', password: '123456'&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 解构赋值，变量名和变量值相同，可简写</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// const &#123;username: username, password: password&#125; = data;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">/* 插件把原本一个一个用 querySelector 获取的代码替换掉了</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   const username = document.querySelector ('.username').value;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   const password = document.querySelector ('.password').value; </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名必须大于等于8位'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名必须大于等于8位'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码必须大于等于6位'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码必须大于等于6位'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>       <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>           username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>           password</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 成功才会进入 then</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>       <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 失败才会进入 catch</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       <span class=\"token function\">alertFn</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "前端",
                "AJAX",
                "前端",
                "JavaScript",
                "AJAX"
            ]
        }
    ]
}